
uart3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004020  08004020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040b0  080040b0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040b8  080040b8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040b8  080040b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040bc  080040bc  000140bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080040c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000060  08004120  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08004120  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d037  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000219f  00000000  00000000  0002d10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  0002f2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ea  00000000  00000000  0002fd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020231  00000000  00000000  0003050a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d9c2  00000000  00000000  0005073b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf2c7  00000000  00000000  0005e0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002dbc  00000000  00000000  0011d3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00120180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004008 	.word	0x08004008

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004008 	.word	0x08004008

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b28      	ldr	r3, [pc, #160]	; (8000624 <MX_GPIO_Init+0xb8>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	4a27      	ldr	r2, [pc, #156]	; (8000624 <MX_GPIO_Init+0xb8>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058e:	4b25      	ldr	r3, [pc, #148]	; (8000624 <MX_GPIO_Init+0xb8>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b22      	ldr	r3, [pc, #136]	; (8000624 <MX_GPIO_Init+0xb8>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a21      	ldr	r2, [pc, #132]	; (8000624 <MX_GPIO_Init+0xb8>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <MX_GPIO_Init+0xb8>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_GPIO_Init+0xb8>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <MX_GPIO_Init+0xb8>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_GPIO_Init+0xb8>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2108      	movs	r1, #8
 80005ce:	4816      	ldr	r0, [pc, #88]	; (8000628 <MX_GPIO_Init+0xbc>)
 80005d0:	f000 fe34 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EC11_A_Pin;
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005d8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80005dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EC11_A_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	4619      	mov	r1, r3
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f000 fca4 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EC11_B_Pin;
 80005f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EC11_B_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	4619      	mov	r1, r3
 8000604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000608:	f000 fc96 	bl	8000f38 <HAL_GPIO_Init>



  /* EXTI interrupt init*///aka1
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2100      	movs	r1, #0
 8000610:	2017      	movs	r0, #23
 8000612:	f000 fbdc 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000616:	2017      	movs	r0, #23
 8000618:	f000 fbf5 	bl	8000e06 <HAL_NVIC_EnableIRQ>
}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	48000400 	.word	0x48000400

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char UART_BUF[12]="00";
 8000632:	f243 0330 	movw	r3, #12336	; 0x3030
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fa74 	bl	8000b2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f829 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f7ff ff8f 	bl	800056c <MX_GPIO_Init>

  MX_USART2_UART_Init();
 800064e:	f000 f9b5 	bl	80009bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit(&huart1,(uint8_t *)"UART1 START!\n",13,0xff);
  HAL_UART_Transmit(&huart2,(uint8_t *)"UART2 START!\n",13,0xff);
 8000652:	23ff      	movs	r3, #255	; 0xff
 8000654:	220d      	movs	r2, #13
 8000656:	490c      	ldr	r1, [pc, #48]	; (8000688 <main+0x5c>)
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <main+0x60>)
 800065a:	f002 f811 	bl	8002680 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(dir_flag != 2) {
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <main+0x64>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b02      	cmp	r3, #2
 8000664:	d0fb      	beq.n	800065e <main+0x32>
	 		dir_flag = 2;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <main+0x64>)
 8000668:	2202      	movs	r2, #2
 800066a:	701a      	strb	r2, [r3, #0]
	 		sprintf(UART_BUF, "%d", test_num);
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <main+0x68>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4909      	ldr	r1, [pc, #36]	; (8000698 <main+0x6c>)
 8000674:	4618      	mov	r0, r3
 8000676:	f003 f823 	bl	80036c0 <siprintf>
	 	    HAL_UART_Transmit(&huart2, (uint8_t*)UART_BUF, 12, 0xff);
 800067a:	1d39      	adds	r1, r7, #4
 800067c:	23ff      	movs	r3, #255	; 0xff
 800067e:	220c      	movs	r2, #12
 8000680:	4802      	ldr	r0, [pc, #8]	; (800068c <main+0x60>)
 8000682:	f001 fffd 	bl	8002680 <HAL_UART_Transmit>
	  if(dir_flag != 2) {
 8000686:	e7ea      	b.n	800065e <main+0x32>
 8000688:	08004020 	.word	0x08004020
 800068c:	20000088 	.word	0x20000088
 8000690:	20000000 	.word	0x20000000
 8000694:	2000007c 	.word	0x2000007c
 8000698:	08004030 	.word	0x08004030

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0ac      	sub	sp, #176	; 0xb0
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006a6:	2244      	movs	r2, #68	; 0x44
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 f828 	bl	8003700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};/////////important
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2254      	movs	r2, #84	; 0x54
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 f81a 	bl	8003700 <memset>
//    Error_Handler();
//  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006cc:	f000 fde6 	bl	800129c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006d0:	4b33      	ldr	r3, [pc, #204]	; (80007a0 <SystemClock_Config+0x104>)
 80006d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006d6:	4a32      	ldr	r2, [pc, #200]	; (80007a0 <SystemClock_Config+0x104>)
 80006d8:	f023 0318 	bic.w	r3, r3, #24
 80006dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006e0:	2314      	movs	r3, #20
 80006e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006f4:	2360      	movs	r3, #96	; 0x60
 80006f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000700:	2301      	movs	r3, #1
 8000702:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800070c:	2328      	movs	r3, #40	; 0x28
 800070e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000712:	2307      	movs	r3, #7
 8000714:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fe2b 	bl	8001384 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000734:	f000 f894 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2303      	movs	r3, #3
 800073e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800074c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000750:	2104      	movs	r1, #4
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fa2a 	bl	8001bac <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800075e:	f000 f87f 	bl	8000860 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000762:	2303      	movs	r3, #3
 8000764:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800076a:	2300      	movs	r3, #0
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fc3f 	bl	8001ff4 <HAL_RCCEx_PeriphCLKConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800077c:	f000 f870 	bl	8000860 <Error_Handler>
  }
   /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000780:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000784:	f000 fda8 	bl	80012d8 <HAL_PWREx_ControlVoltageScaling>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800078e:	f000 f867 	bl	8000860 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000792:	f001 fe25 	bl	80023e0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000796:	bf00      	nop
 8000798:	37b0      	adds	r7, #176	; 0xb0
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  static uint8_t count = 0;
  static uint8_t b_flag;
  GPIO_PinState a_value = HAL_GPIO_ReadPin(EC11_A_GPIO_Port, EC11_A_Pin);
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b4:	f000 fd2a 	bl	800120c <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	73fb      	strb	r3, [r7, #15]
  GPIO_PinState b_value = HAL_GPIO_ReadPin(EC11_B_GPIO_Port, EC11_B_Pin);
 80007bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f000 fd22 	bl	800120c <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	73bb      	strb	r3, [r7, #14]

  if(GPIO_Pin == EC11_A_Pin) {
 80007cc:	88fb      	ldrh	r3, [r7, #6]
 80007ce:	2b80      	cmp	r3, #128	; 0x80
 80007d0:	d13a      	bne.n	8000848 <HAL_GPIO_EXTI_Callback+0xa4>
    if(a_value == GPIO_PIN_RESET && count == 0) {
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d10f      	bne.n	80007f8 <HAL_GPIO_EXTI_Callback+0x54>
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <HAL_GPIO_EXTI_Callback+0xac>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10b      	bne.n	80007f8 <HAL_GPIO_EXTI_Callback+0x54>
		b_flag = 0;
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <HAL_GPIO_EXTI_Callback+0xb0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
		if(b_value) b_flag = 1;
 80007e6:	7bbb      	ldrb	r3, [r7, #14]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <HAL_GPIO_EXTI_Callback+0x4e>
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <HAL_GPIO_EXTI_Callback+0xb0>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	701a      	strb	r2, [r3, #0]
		count = 1;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <HAL_GPIO_EXTI_Callback+0xac>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
	}

	if(a_value == GPIO_PIN_SET && count == 1) {
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d124      	bne.n	8000848 <HAL_GPIO_EXTI_Callback+0xa4>
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_GPIO_EXTI_Callback+0xac>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d120      	bne.n	8000848 <HAL_GPIO_EXTI_Callback+0xa4>
		if(b_value == GPIO_PIN_RESET && b_flag ==1){
 8000806:	7bbb      	ldrb	r3, [r7, #14]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d10b      	bne.n	8000824 <HAL_GPIO_EXTI_Callback+0x80>
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_GPIO_EXTI_Callback+0xb0>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d107      	bne.n	8000824 <HAL_GPIO_EXTI_Callback+0x80>
			test_num--;
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3b01      	subs	r3, #1
 800081a:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <HAL_GPIO_EXTI_Callback+0xb4>)
 800081c:	6013      	str	r3, [r2, #0]
			dir_flag = 1;
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_GPIO_EXTI_Callback+0xb8>)
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
		}
		if(b_value && b_flag == 0) {
 8000824:	7bbb      	ldrb	r3, [r7, #14]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d00b      	beq.n	8000842 <HAL_GPIO_EXTI_Callback+0x9e>
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_GPIO_EXTI_Callback+0xb0>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d107      	bne.n	8000842 <HAL_GPIO_EXTI_Callback+0x9e>
			test_num++;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <HAL_GPIO_EXTI_Callback+0xb4>)
 800083a:	6013      	str	r3, [r2, #0]
			dir_flag = 0;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <HAL_GPIO_EXTI_Callback+0xb8>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
		}
		count = 0;
 8000842:	4b03      	ldr	r3, [pc, #12]	; (8000850 <HAL_GPIO_EXTI_Callback+0xac>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
	}

  }


}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000080 	.word	0x20000080
 8000854:	20000081 	.word	0x20000081
 8000858:	2000007c 	.word	0x2000007c
 800085c:	20000000 	.word	0x20000000

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <HAL_MspInit+0x44>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <HAL_MspInit+0x44>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6613      	str	r3, [r2, #96]	; 0x60
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <HAL_MspInit+0x44>)
 8000880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_MspInit+0x44>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_MspInit+0x44>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6593      	str	r3, [r2, #88]	; 0x58
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_MspInit+0x44>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <NMI_Handler+0x4>

080008ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <MemManage_Handler+0x4>

080008c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <BusFault_Handler+0x4>

080008cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <UsageFault_Handler+0x4>

080008d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000900:	f000 f96a 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <USART2_IRQHandler+0x10>)
 800090e:	f001 ff41 	bl	8002794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000088 	.word	0x20000088

0800091c <EXTI9_5_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EC11_A_Pin);
 8000920:	2080      	movs	r0, #128	; 0x80
 8000922:	f000 fca3 	bl	800126c <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d207      	bcs.n	800096c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800095c:	f002 fed8 	bl	8003710 <__errno>
 8000960:	4603      	mov	r3, r0
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	e009      	b.n	8000980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <_sbrk+0x64>)
 800097c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20010000 	.word	0x20010000
 800098c:	00000400 	.word	0x00000400
 8000990:	20000084 	.word	0x20000084
 8000994:	20000260 	.word	0x20000260

08000998 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <MX_USART2_UART_Init>:

volatile uint16_t usart2_rcv_len=0;
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009c2:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <MX_USART2_UART_Init+0x5c>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 8000a00:	f001 fdf0 	bl	80025e4 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a0a:	f7ff ff29 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000088 	.word	0x20000088
 8000a18:	40004400 	.word	0x40004400

08000a1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b09e      	sub	sp, #120	; 0x78
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	2254      	movs	r2, #84	; 0x54
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 fe5f 	bl	8003700 <memset>

  if(uartHandle->Instance==USART2)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a23      	ldr	r2, [pc, #140]	; (8000ad4 <HAL_UART_MspInit+0xb8>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d13e      	bne.n	8000aca <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 facb 	bl	8001ff4 <HAL_RCCEx_PeriphCLKConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a64:	f7ff fefc 	bl	8000860 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <HAL_UART_MspInit+0xbc>)
 8000a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <HAL_UART_MspInit+0xbc>)
 8000a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a72:	6593      	str	r3, [r2, #88]	; 0x58
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <HAL_UART_MspInit+0xbc>)
 8000a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <HAL_UART_MspInit+0xbc>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a84:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <HAL_UART_MspInit+0xbc>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_UART_MspInit+0xbc>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab6:	f000 fa3f 	bl	8000f38 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	2026      	movs	r0, #38	; 0x26
 8000ac0:	f000 f985 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ac4:	2026      	movs	r0, #38	; 0x26
 8000ac6:	f000 f99e 	bl	8000e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000aca:	bf00      	nop
 8000acc:	3778      	adds	r7, #120	; 0x78
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40004400 	.word	0x40004400
 8000ad8:	40021000 	.word	0x40021000

08000adc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae0:	f7ff ff5a 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae6:	490d      	ldr	r1, [pc, #52]	; (8000b1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <LoopForever+0xe>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000afc:	4c0a      	ldr	r4, [pc, #40]	; (8000b28 <LoopForever+0x16>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f002 fe07 	bl	800371c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b0e:	f7ff fd8d 	bl	800062c <main>

08000b12 <LoopForever>:

LoopForever:
    b LoopForever
 8000b12:	e7fe      	b.n	8000b12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b14:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b1c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b20:	080040c0 	.word	0x080040c0
  ldr r2, =_sbss
 8000b24:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b28:	2000025c 	.word	0x2000025c

08000b2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC1_IRQHandler>

08000b2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f93d 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f000 f80e 	bl	8000b60 <HAL_InitTick>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d002      	beq.n	8000b50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	71fb      	strb	r3, [r7, #7]
 8000b4e:	e001      	b.n	8000b54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b50:	f7ff fe8c 	bl	800086c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_InitTick+0x6c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d023      	beq.n	8000bbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_InitTick+0x70>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <HAL_InitTick+0x6c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f949 	bl	8000e22 <HAL_SYSTICK_Config>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d10f      	bne.n	8000bb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d809      	bhi.n	8000bb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 f913 	bl	8000dce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_InitTick+0x74>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	e007      	b.n	8000bc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	e004      	b.n	8000bc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e001      	b.n	8000bc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000000c 	.word	0x2000000c
 8000bd0:	20000004 	.word	0x20000004
 8000bd4:	20000008 	.word	0x20000008

08000bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x20>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x24>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_IncTick+0x24>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	2000000c 	.word	0x2000000c
 8000bfc:	20000110 	.word	0x20000110

08000c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <HAL_GetTick+0x14>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000110 	.word	0x20000110

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f7ff ff8e 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff29 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000de0:	f7ff ff3e 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000de4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff8e 	bl	8000d0c <NVIC_EncodePriority>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff5d 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff31 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffa2 	bl	8000d74 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b085      	sub	sp, #20
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d008      	beq.n	8000e64 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2204      	movs	r2, #4
 8000e56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e022      	b.n	8000eaa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 020e 	bic.w	r2, r2, #14
 8000e72:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0201 	bic.w	r2, r2, #1
 8000e82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e88:	f003 021c 	and.w	r2, r3, #28
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	2101      	movs	r1, #1
 8000e92:	fa01 f202 	lsl.w	r2, r1, r2
 8000e96:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b084      	sub	sp, #16
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d005      	beq.n	8000eda <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	e029      	b.n	8000f2e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 020e 	bic.w	r2, r2, #14
 8000ee8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f022 0201 	bic.w	r2, r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f003 021c 	and.w	r2, r3, #28
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	2101      	movs	r1, #1
 8000f08:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	4798      	blx	r3
    }
  }
  return status;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f46:	e148      	b.n	80011da <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	4013      	ands	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 813a 	beq.w	80011d4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d005      	beq.n	8000f78 <HAL_GPIO_Init+0x40>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d130      	bne.n	8000fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fae:	2201      	movs	r2, #1
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	091b      	lsrs	r3, r3, #4
 8000fc4:	f003 0201 	and.w	r2, r3, #1
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d017      	beq.n	8001016 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d123      	bne.n	800106a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	220f      	movs	r2, #15
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	691a      	ldr	r2, [r3, #16]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	6939      	ldr	r1, [r7, #16]
 8001066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0203 	and.w	r2, r3, #3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 8094 	beq.w	80011d4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ac:	4b52      	ldr	r3, [pc, #328]	; (80011f8 <HAL_GPIO_Init+0x2c0>)
 80010ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b0:	4a51      	ldr	r2, [pc, #324]	; (80011f8 <HAL_GPIO_Init+0x2c0>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6613      	str	r3, [r2, #96]	; 0x60
 80010b8:	4b4f      	ldr	r3, [pc, #316]	; (80011f8 <HAL_GPIO_Init+0x2c0>)
 80010ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010c4:	4a4d      	ldr	r2, [pc, #308]	; (80011fc <HAL_GPIO_Init+0x2c4>)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	220f      	movs	r2, #15
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ee:	d00d      	beq.n	800110c <HAL_GPIO_Init+0x1d4>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a43      	ldr	r2, [pc, #268]	; (8001200 <HAL_GPIO_Init+0x2c8>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d007      	beq.n	8001108 <HAL_GPIO_Init+0x1d0>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a42      	ldr	r2, [pc, #264]	; (8001204 <HAL_GPIO_Init+0x2cc>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d101      	bne.n	8001104 <HAL_GPIO_Init+0x1cc>
 8001100:	2302      	movs	r3, #2
 8001102:	e004      	b.n	800110e <HAL_GPIO_Init+0x1d6>
 8001104:	2307      	movs	r3, #7
 8001106:	e002      	b.n	800110e <HAL_GPIO_Init+0x1d6>
 8001108:	2301      	movs	r3, #1
 800110a:	e000      	b.n	800110e <HAL_GPIO_Init+0x1d6>
 800110c:	2300      	movs	r3, #0
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	f002 0203 	and.w	r2, r2, #3
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	4093      	lsls	r3, r2
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800111e:	4937      	ldr	r1, [pc, #220]	; (80011fc <HAL_GPIO_Init+0x2c4>)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3302      	adds	r3, #2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800112c:	4b36      	ldr	r3, [pc, #216]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001150:	4a2d      	ldr	r2, [pc, #180]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001156:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800117a:	4a23      	ldr	r2, [pc, #140]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001180:	4b21      	ldr	r3, [pc, #132]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011a4:	4a18      	ldr	r2, [pc, #96]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ce:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	3301      	adds	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	fa22 f303 	lsr.w	r3, r2, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f47f aeaf 	bne.w	8000f48 <HAL_GPIO_Init+0x10>
  }
}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010000 	.word	0x40010000
 8001200:	48000400 	.word	0x48000400
 8001204:	48000800 	.word	0x48000800
 8001208:	40010400 	.word	0x40010400

0800120c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	4013      	ands	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e001      	b.n	800122e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001258:	e002      	b.n	8001260 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	4013      	ands	r3, r2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d006      	beq.n	8001290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fa8a 	bl	80007a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40010400 	.word	0x40010400

0800129c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40007000 	.word	0x40007000

080012bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40007000 	.word	0x40007000

080012d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012e6:	d130      	bne.n	800134a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e8:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012f4:	d038      	beq.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012fe:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001300:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001304:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001306:	4b1d      	ldr	r3, [pc, #116]	; (800137c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2232      	movs	r2, #50	; 0x32
 800130c:	fb02 f303 	mul.w	r3, r2, r3
 8001310:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	0c9b      	lsrs	r3, r3, #18
 8001318:	3301      	adds	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800131c:	e002      	b.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3b01      	subs	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001330:	d102      	bne.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f2      	bne.n	800131e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001344:	d110      	bne.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e00f      	b.n	800136a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001356:	d007      	beq.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001360:	4a05      	ldr	r2, [pc, #20]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001366:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40007000 	.word	0x40007000
 800137c:	20000004 	.word	0x20000004
 8001380:	431bde83 	.word	0x431bde83

08001384 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	f000 bc02 	b.w	8001b9c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001398:	4b96      	ldr	r3, [pc, #600]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013a2:	4b94      	ldr	r3, [pc, #592]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80e4 	beq.w	8001582 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d007      	beq.n	80013d0 <HAL_RCC_OscConfig+0x4c>
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b0c      	cmp	r3, #12
 80013c4:	f040 808b 	bne.w	80014de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	f040 8087 	bne.w	80014de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013d0:	4b88      	ldr	r3, [pc, #544]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_OscConfig+0x64>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e3d9      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a1a      	ldr	r2, [r3, #32]
 80013ec:	4b81      	ldr	r3, [pc, #516]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <HAL_RCC_OscConfig+0x7e>
 80013f8:	4b7e      	ldr	r3, [pc, #504]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001400:	e005      	b.n	800140e <HAL_RCC_OscConfig+0x8a>
 8001402:	4b7c      	ldr	r3, [pc, #496]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800140e:	4293      	cmp	r3, r2
 8001410:	d223      	bcs.n	800145a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fd8c 	bl	8001f34 <RCC_SetFlashLatencyFromMSIRange>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e3ba      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001426:	4b73      	ldr	r3, [pc, #460]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a72      	ldr	r2, [pc, #456]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 800142c:	f043 0308 	orr.w	r3, r3, #8
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b70      	ldr	r3, [pc, #448]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	496d      	ldr	r1, [pc, #436]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001440:	4313      	orrs	r3, r2
 8001442:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001444:	4b6b      	ldr	r3, [pc, #428]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	4968      	ldr	r1, [pc, #416]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
 8001458:	e025      	b.n	80014a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800145a:	4b66      	ldr	r3, [pc, #408]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a65      	ldr	r2, [pc, #404]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001460:	f043 0308 	orr.w	r3, r3, #8
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	4b63      	ldr	r3, [pc, #396]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	4960      	ldr	r1, [pc, #384]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001474:	4313      	orrs	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001478:	4b5e      	ldr	r3, [pc, #376]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	495b      	ldr	r1, [pc, #364]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d109      	bne.n	80014a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fd4c 	bl	8001f34 <RCC_SetFlashLatencyFromMSIRange>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e37a      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014a6:	f000 fc81 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 80014aa:	4602      	mov	r2, r0
 80014ac:	4b51      	ldr	r3, [pc, #324]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	4950      	ldr	r1, [pc, #320]	; (80015f8 <HAL_RCC_OscConfig+0x274>)
 80014b8:	5ccb      	ldrb	r3, [r1, r3]
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	fa22 f303 	lsr.w	r3, r2, r3
 80014c2:	4a4e      	ldr	r2, [pc, #312]	; (80015fc <HAL_RCC_OscConfig+0x278>)
 80014c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014c6:	4b4e      	ldr	r3, [pc, #312]	; (8001600 <HAL_RCC_OscConfig+0x27c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fb48 	bl	8000b60 <HAL_InitTick>
 80014d0:	4603      	mov	r3, r0
 80014d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d052      	beq.n	8001580 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	e35e      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d032      	beq.n	800154c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014e6:	4b43      	ldr	r3, [pc, #268]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a42      	ldr	r2, [pc, #264]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014f2:	f7ff fb85 	bl	8000c00 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014fa:	f7ff fb81 	bl	8000c00 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e347      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800150c:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001518:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a35      	ldr	r2, [pc, #212]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 800151e:	f043 0308 	orr.w	r3, r3, #8
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4930      	ldr	r1, [pc, #192]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001536:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	492b      	ldr	r1, [pc, #172]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001546:	4313      	orrs	r3, r2
 8001548:	604b      	str	r3, [r1, #4]
 800154a:	e01a      	b.n	8001582 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800154c:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001558:	f7ff fb52 	bl	8000c00 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001560:	f7ff fb4e 	bl	8000c00 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e314      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x1dc>
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001580:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d073      	beq.n	8001676 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b08      	cmp	r3, #8
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_OscConfig+0x21c>
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b0c      	cmp	r3, #12
 8001598:	d10e      	bne.n	80015b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d10b      	bne.n	80015b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d063      	beq.n	8001674 <HAL_RCC_OscConfig+0x2f0>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d15f      	bne.n	8001674 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e2f1      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c0:	d106      	bne.n	80015d0 <HAL_RCC_OscConfig+0x24c>
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e025      	b.n	800161c <HAL_RCC_OscConfig+0x298>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d8:	d114      	bne.n	8001604 <HAL_RCC_OscConfig+0x280>
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a02      	ldr	r2, [pc, #8]	; (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e013      	b.n	800161c <HAL_RCC_OscConfig+0x298>
 80015f4:	40021000 	.word	0x40021000
 80015f8:	08004034 	.word	0x08004034
 80015fc:	20000004 	.word	0x20000004
 8001600:	20000008 	.word	0x20000008
 8001604:	4ba0      	ldr	r3, [pc, #640]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a9f      	ldr	r2, [pc, #636]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 800160a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b9d      	ldr	r3, [pc, #628]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a9c      	ldr	r2, [pc, #624]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 8001616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d013      	beq.n	800164c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff faec 	bl	8000c00 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fae8 	bl	8000c00 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	; 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e2ae      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163e:	4b92      	ldr	r3, [pc, #584]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x2a8>
 800164a:	e014      	b.n	8001676 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fad8 	bl	8000c00 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fad4 	bl	8000c00 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e29a      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001666:	4b88      	ldr	r3, [pc, #544]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x2d0>
 8001672:	e000      	b.n	8001676 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d060      	beq.n	8001744 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	2b04      	cmp	r3, #4
 8001686:	d005      	beq.n	8001694 <HAL_RCC_OscConfig+0x310>
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2b0c      	cmp	r3, #12
 800168c:	d119      	bne.n	80016c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d116      	bne.n	80016c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001694:	4b7c      	ldr	r3, [pc, #496]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_OscConfig+0x328>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e277      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ac:	4b76      	ldr	r3, [pc, #472]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	061b      	lsls	r3, r3, #24
 80016ba:	4973      	ldr	r1, [pc, #460]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c0:	e040      	b.n	8001744 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d023      	beq.n	8001712 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ca:	4b6f      	ldr	r3, [pc, #444]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a6e      	ldr	r2, [pc, #440]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d6:	f7ff fa93 	bl	8000c00 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016de:	f7ff fa8f 	bl	8000c00 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e255      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f0:	4b65      	ldr	r3, [pc, #404]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fc:	4b62      	ldr	r3, [pc, #392]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	061b      	lsls	r3, r3, #24
 800170a:	495f      	ldr	r1, [pc, #380]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
 8001710:	e018      	b.n	8001744 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001712:	4b5d      	ldr	r3, [pc, #372]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a5c      	ldr	r2, [pc, #368]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 8001718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800171c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171e:	f7ff fa6f 	bl	8000c00 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff fa6b 	bl	8000c00 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e231      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001738:	4b53      	ldr	r3, [pc, #332]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d03c      	beq.n	80017ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d01c      	beq.n	8001792 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001758:	4b4b      	ldr	r3, [pc, #300]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 800175a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800175e:	4a4a      	ldr	r2, [pc, #296]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff fa4a 	bl	8000c00 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff fa46 	bl	8000c00 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e20c      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001782:	4b41      	ldr	r3, [pc, #260]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 8001784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0ef      	beq.n	8001770 <HAL_RCC_OscConfig+0x3ec>
 8001790:	e01b      	b.n	80017ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001792:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 8001794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001798:	4a3b      	ldr	r2, [pc, #236]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a2:	f7ff fa2d 	bl	8000c00 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017aa:	f7ff fa29 	bl	8000c00 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e1ef      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017bc:	4b32      	ldr	r3, [pc, #200]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 80017be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1ef      	bne.n	80017aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 80a6 	beq.w	8001924 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017dc:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10d      	bne.n	8001804 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e8:	4b27      	ldr	r3, [pc, #156]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	4a26      	ldr	r2, [pc, #152]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 80017ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f2:	6593      	str	r3, [r2, #88]	; 0x58
 80017f4:	4b24      	ldr	r3, [pc, #144]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001800:	2301      	movs	r3, #1
 8001802:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <HAL_RCC_OscConfig+0x508>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180c:	2b00      	cmp	r3, #0
 800180e:	d118      	bne.n	8001842 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <HAL_RCC_OscConfig+0x508>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1d      	ldr	r2, [pc, #116]	; (800188c <HAL_RCC_OscConfig+0x508>)
 8001816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181c:	f7ff f9f0 	bl	8000c00 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001824:	f7ff f9ec 	bl	8000c00 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e1b2      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_RCC_OscConfig+0x508>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d108      	bne.n	800185c <HAL_RCC_OscConfig+0x4d8>
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 800184c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001850:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800185a:	e029      	b.n	80018b0 <HAL_RCC_OscConfig+0x52c>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b05      	cmp	r3, #5
 8001862:	d115      	bne.n	8001890 <HAL_RCC_OscConfig+0x50c>
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 8001866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186a:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 8001876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187a:	4a03      	ldr	r2, [pc, #12]	; (8001888 <HAL_RCC_OscConfig+0x504>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001884:	e014      	b.n	80018b0 <HAL_RCC_OscConfig+0x52c>
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	40007000 	.word	0x40007000
 8001890:	4b9a      	ldr	r3, [pc, #616]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001896:	4a99      	ldr	r2, [pc, #612]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a0:	4b96      	ldr	r3, [pc, #600]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a6:	4a95      	ldr	r2, [pc, #596]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d016      	beq.n	80018e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff f9a2 	bl	8000c00 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018be:	e00a      	b.n	80018d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c0:	f7ff f99e 	bl	8000c00 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e162      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d6:	4b89      	ldr	r3, [pc, #548]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 80018d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0ed      	beq.n	80018c0 <HAL_RCC_OscConfig+0x53c>
 80018e4:	e015      	b.n	8001912 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e6:	f7ff f98b 	bl	8000c00 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ec:	e00a      	b.n	8001904 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7ff f987 	bl	8000c00 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e14b      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001904:	4b7d      	ldr	r3, [pc, #500]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ed      	bne.n	80018ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001912:	7ffb      	ldrb	r3, [r7, #31]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d105      	bne.n	8001924 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001918:	4b78      	ldr	r3, [pc, #480]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	4a77      	ldr	r2, [pc, #476]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 800191e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001922:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b00      	cmp	r3, #0
 800192e:	d03c      	beq.n	80019aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01c      	beq.n	8001972 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001938:	4b70      	ldr	r3, [pc, #448]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 800193a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800193e:	4a6f      	ldr	r2, [pc, #444]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001948:	f7ff f95a 	bl	8000c00 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001950:	f7ff f956 	bl	8000c00 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e11c      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001962:	4b66      	ldr	r3, [pc, #408]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0ef      	beq.n	8001950 <HAL_RCC_OscConfig+0x5cc>
 8001970:	e01b      	b.n	80019aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001972:	4b62      	ldr	r3, [pc, #392]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001974:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001978:	4a60      	ldr	r2, [pc, #384]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001982:	f7ff f93d 	bl	8000c00 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800198a:	f7ff f939 	bl	8000c00 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e0ff      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800199c:	4b57      	ldr	r3, [pc, #348]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 800199e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1ef      	bne.n	800198a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80f3 	beq.w	8001b9a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	f040 80c9 	bne.w	8001b50 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019be:	4b4f      	ldr	r3, [pc, #316]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f003 0203 	and.w	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d12c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	3b01      	subs	r3, #1
 80019de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d123      	bne.n	8001a2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d11b      	bne.n	8001a2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d113      	bne.n	8001a2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0e:	085b      	lsrs	r3, r3, #1
 8001a10:	3b01      	subs	r3, #1
 8001a12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d109      	bne.n	8001a2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	085b      	lsrs	r3, r3, #1
 8001a24:	3b01      	subs	r3, #1
 8001a26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d06b      	beq.n	8001b04 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b0c      	cmp	r3, #12
 8001a30:	d062      	beq.n	8001af8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a32:	4b32      	ldr	r3, [pc, #200]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0ac      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a42:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a2d      	ldr	r2, [pc, #180]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a4e:	f7ff f8d7 	bl	8000c00 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a56:	f7ff f8d3 	bl	8000c00 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e099      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a68:	4b24      	ldr	r3, [pc, #144]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f0      	bne.n	8001a56 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <HAL_RCC_OscConfig+0x77c>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a84:	3a01      	subs	r2, #1
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	4311      	orrs	r1, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a8e:	0212      	lsls	r2, r2, #8
 8001a90:	4311      	orrs	r1, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a96:	0852      	lsrs	r2, r2, #1
 8001a98:	3a01      	subs	r2, #1
 8001a9a:	0552      	lsls	r2, r2, #21
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001aa2:	0852      	lsrs	r2, r2, #1
 8001aa4:	3a01      	subs	r2, #1
 8001aa6:	0652      	lsls	r2, r2, #25
 8001aa8:	4311      	orrs	r1, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aae:	06d2      	lsls	r2, r2, #27
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	4912      	ldr	r1, [pc, #72]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ace:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ad0:	f7ff f896 	bl	8000c00 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff f892 	bl	8000c00 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e058      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <HAL_RCC_OscConfig+0x778>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af6:	e050      	b.n	8001b9a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e04f      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
 8001afc:	40021000 	.word	0x40021000
 8001b00:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b04:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <HAL_RCC_OscConfig+0x820>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d144      	bne.n	8001b9a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b10:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <HAL_RCC_OscConfig+0x820>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a23      	ldr	r2, [pc, #140]	; (8001ba4 <HAL_RCC_OscConfig+0x820>)
 8001b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b1c:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <HAL_RCC_OscConfig+0x820>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4a20      	ldr	r2, [pc, #128]	; (8001ba4 <HAL_RCC_OscConfig+0x820>)
 8001b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b28:	f7ff f86a 	bl	8000c00 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b30:	f7ff f866 	bl	8000c00 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e02c      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_RCC_OscConfig+0x820>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x7ac>
 8001b4e:	e024      	b.n	8001b9a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	2b0c      	cmp	r3, #12
 8001b54:	d01f      	beq.n	8001b96 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <HAL_RCC_OscConfig+0x820>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <HAL_RCC_OscConfig+0x820>)
 8001b5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7ff f84d 	bl	8000c00 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff f849 	bl	8000c00 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e00f      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_OscConfig+0x820>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_RCC_OscConfig+0x820>)
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	4905      	ldr	r1, [pc, #20]	; (8001ba4 <HAL_RCC_OscConfig+0x820>)
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_RCC_OscConfig+0x824>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	60cb      	str	r3, [r1, #12]
 8001b94:	e001      	b.n	8001b9a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3720      	adds	r7, #32
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	feeefffc 	.word	0xfeeefffc

08001bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0e7      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b75      	ldr	r3, [pc, #468]	; (8001d98 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d910      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b72      	ldr	r3, [pc, #456]	; (8001d98 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 0207 	bic.w	r2, r3, #7
 8001bd6:	4970      	ldr	r1, [pc, #448]	; (8001d98 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b6e      	ldr	r3, [pc, #440]	; (8001d98 <HAL_RCC_ClockConfig+0x1ec>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0cf      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d010      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	4b66      	ldr	r3, [pc, #408]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d908      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0c:	4b63      	ldr	r3, [pc, #396]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4960      	ldr	r1, [pc, #384]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d04c      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c32:	4b5a      	ldr	r3, [pc, #360]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d121      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e0a6      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d107      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c4a:	4b54      	ldr	r3, [pc, #336]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d115      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e09a      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c62:	4b4e      	ldr	r3, [pc, #312]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e08e      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c72:	4b4a      	ldr	r3, [pc, #296]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e086      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c82:	4b46      	ldr	r3, [pc, #280]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f023 0203 	bic.w	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4943      	ldr	r1, [pc, #268]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c94:	f7fe ffb4 	bl	8000c00 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7fe ffb0 	bl	8000c00 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e06e      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 020c 	and.w	r2, r3, #12
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d1eb      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d010      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d208      	bcs.n	8001cf2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce0:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	492b      	ldr	r1, [pc, #172]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf2:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <HAL_RCC_ClockConfig+0x1ec>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d210      	bcs.n	8001d22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <HAL_RCC_ClockConfig+0x1ec>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 0207 	bic.w	r2, r3, #7
 8001d08:	4923      	ldr	r1, [pc, #140]	; (8001d98 <HAL_RCC_ClockConfig+0x1ec>)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d10:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <HAL_RCC_ClockConfig+0x1ec>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e036      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d008      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	4918      	ldr	r1, [pc, #96]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d009      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4910      	ldr	r1, [pc, #64]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d60:	f000 f824 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	490b      	ldr	r1, [pc, #44]	; (8001da0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7c:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <HAL_RCC_ClockConfig+0x1fc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe feeb 	bl	8000b60 <HAL_InitTick>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d8e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40022000 	.word	0x40022000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	08004034 	.word	0x08004034
 8001da4:	20000004 	.word	0x20000004
 8001da8:	20000008 	.word	0x20000008

08001dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dba:	4b3e      	ldr	r3, [pc, #248]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc4:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x34>
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d121      	bne.n	8001e1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d11e      	bne.n	8001e1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001de0:	4b34      	ldr	r3, [pc, #208]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dec:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df2:	0a1b      	lsrs	r3, r3, #8
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e005      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dfc:	4b2d      	ldr	r3, [pc, #180]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e08:	4a2b      	ldr	r2, [pc, #172]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10d      	bne.n	8001e34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d102      	bne.n	8001e2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	e004      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b0c      	cmp	r3, #12
 8001e38:	d134      	bne.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d003      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d003      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0xac>
 8001e50:	e005      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e52:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e54:	617b      	str	r3, [r7, #20]
      break;
 8001e56:	e005      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e5a:	617b      	str	r3, [r7, #20]
      break;
 8001e5c:	e002      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	617b      	str	r3, [r7, #20]
      break;
 8001e62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	3301      	adds	r3, #1
 8001e70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	0a1b      	lsrs	r3, r3, #8
 8001e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	fb03 f202 	mul.w	r2, r3, r2
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	0e5b      	lsrs	r3, r3, #25
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	3301      	adds	r3, #1
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ea4:	69bb      	ldr	r3, [r7, #24]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	; 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	0800404c 	.word	0x0800404c
 8001ebc:	00f42400 	.word	0x00f42400
 8001ec0:	007a1200 	.word	0x007a1200

08001ec4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000004 	.word	0x20000004

08001edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ee0:	f7ff fff0 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4904      	ldr	r1, [pc, #16]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ef2:	5ccb      	ldrb	r3, [r1, r3]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	08004044 	.word	0x08004044

08001f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f0c:	f7ff ffda 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	0adb      	lsrs	r3, r3, #11
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	4904      	ldr	r1, [pc, #16]	; (8001f30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	08004044 	.word	0x08004044

08001f34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f40:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f4c:	f7ff f9b6 	bl	80012bc <HAL_PWREx_GetVoltageRange>
 8001f50:	6178      	str	r0, [r7, #20]
 8001f52:	e014      	b.n	8001f7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	4a24      	ldr	r2, [pc, #144]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f6c:	f7ff f9a6 	bl	80012bc <HAL_PWREx_GetVoltageRange>
 8001f70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f84:	d10b      	bne.n	8001f9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b80      	cmp	r3, #128	; 0x80
 8001f8a:	d919      	bls.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f90:	d902      	bls.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f92:	2302      	movs	r3, #2
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	e013      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f98:	2301      	movs	r3, #1
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	e010      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b80      	cmp	r3, #128	; 0x80
 8001fa2:	d902      	bls.n	8001faa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	e00a      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b80      	cmp	r3, #128	; 0x80
 8001fae:	d102      	bne.n	8001fb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	e004      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b70      	cmp	r3, #112	; 0x70
 8001fba:	d101      	bne.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 0207 	bic.w	r2, r3, #7
 8001fc8:	4909      	ldr	r1, [pc, #36]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40022000 	.word	0x40022000

08001ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002000:	2300      	movs	r3, #0
 8002002:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200c:	2b00      	cmp	r3, #0
 800200e:	d031      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002014:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002018:	d01a      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800201a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800201e:	d814      	bhi.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002020:	2b00      	cmp	r3, #0
 8002022:	d009      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002024:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002028:	d10f      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800202a:	4b5d      	ldr	r3, [pc, #372]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	4a5c      	ldr	r2, [pc, #368]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002034:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002036:	e00c      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3304      	adds	r3, #4
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f9de 	bl	8002400 <RCCEx_PLLSAI1_Config>
 8002044:	4603      	mov	r3, r0
 8002046:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002048:	e003      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	74fb      	strb	r3, [r7, #19]
      break;
 800204e:	e000      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002052:	7cfb      	ldrb	r3, [r7, #19]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10b      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002058:	4b51      	ldr	r3, [pc, #324]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002066:	494e      	ldr	r1, [pc, #312]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800206e:	e001      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002070:	7cfb      	ldrb	r3, [r7, #19]
 8002072:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 809e 	beq.w	80021be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002086:	4b46      	ldr	r3, [pc, #280]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002096:	2300      	movs	r3, #0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00d      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209c:	4b40      	ldr	r3, [pc, #256]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	4a3f      	ldr	r2, [pc, #252]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a6:	6593      	str	r3, [r2, #88]	; 0x58
 80020a8:	4b3d      	ldr	r3, [pc, #244]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b4:	2301      	movs	r3, #1
 80020b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b8:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a39      	ldr	r2, [pc, #228]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020c4:	f7fe fd9c 	bl	8000c00 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020ca:	e009      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020cc:	f7fe fd98 	bl	8000c00 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d902      	bls.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	74fb      	strb	r3, [r7, #19]
        break;
 80020de:	e005      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020e0:	4b30      	ldr	r3, [pc, #192]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0ef      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80020ec:	7cfb      	ldrb	r3, [r7, #19]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d15a      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020f2:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01e      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	429a      	cmp	r2, r3
 800210c:	d019      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800210e:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002118:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800211a:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	4a1f      	ldr	r2, [pc, #124]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002130:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800213a:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d016      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7fe fd58 	bl	8000c00 <HAL_GetTick>
 8002150:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002152:	e00b      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002154:	f7fe fd54 	bl	8000c00 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d902      	bls.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	74fb      	strb	r3, [r7, #19]
            break;
 800216a:	e006      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0ec      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800217a:	7cfb      	ldrb	r3, [r7, #19]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10b      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218e:	4904      	ldr	r1, [pc, #16]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002196:	e009      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002198:	7cfb      	ldrb	r3, [r7, #19]
 800219a:	74bb      	strb	r3, [r7, #18]
 800219c:	e006      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a8:	7cfb      	ldrb	r3, [r7, #19]
 80021aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ac:	7c7b      	ldrb	r3, [r7, #17]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d105      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b2:	4b8a      	ldr	r3, [pc, #552]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	4a89      	ldr	r2, [pc, #548]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ca:	4b84      	ldr	r3, [pc, #528]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d0:	f023 0203 	bic.w	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4980      	ldr	r1, [pc, #512]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021ec:	4b7b      	ldr	r3, [pc, #492]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	f023 020c 	bic.w	r2, r3, #12
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	4978      	ldr	r1, [pc, #480]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800220e:	4b73      	ldr	r3, [pc, #460]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	496f      	ldr	r1, [pc, #444]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002230:	4b6a      	ldr	r3, [pc, #424]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223e:	4967      	ldr	r1, [pc, #412]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002252:	4b62      	ldr	r3, [pc, #392]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002258:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	495e      	ldr	r1, [pc, #376]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002274:	4b59      	ldr	r3, [pc, #356]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	4956      	ldr	r1, [pc, #344]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002296:	4b51      	ldr	r3, [pc, #324]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	494d      	ldr	r1, [pc, #308]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d028      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022b8:	4b48      	ldr	r3, [pc, #288]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	4945      	ldr	r1, [pc, #276]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022d6:	d106      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d8:	4b40      	ldr	r3, [pc, #256]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a3f      	ldr	r2, [pc, #252]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e2:	60d3      	str	r3, [r2, #12]
 80022e4:	e011      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022ee:	d10c      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3304      	adds	r3, #4
 80022f4:	2101      	movs	r1, #1
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f882 	bl	8002400 <RCCEx_PLLSAI1_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d028      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002316:	4b31      	ldr	r3, [pc, #196]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002324:	492d      	ldr	r1, [pc, #180]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002334:	d106      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002336:	4b29      	ldr	r3, [pc, #164]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4a28      	ldr	r2, [pc, #160]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800233c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002340:	60d3      	str	r3, [r2, #12]
 8002342:	e011      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800234c:	d10c      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3304      	adds	r3, #4
 8002352:	2101      	movs	r1, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f853 	bl	8002400 <RCCEx_PLLSAI1_Config>
 800235a:	4603      	mov	r3, r0
 800235c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800235e:	7cfb      	ldrb	r3, [r7, #19]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d01c      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002374:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002382:	4916      	ldr	r1, [pc, #88]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002392:	d10c      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3304      	adds	r3, #4
 8002398:	2102      	movs	r1, #2
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f830 	bl	8002400 <RCCEx_PLLSAI1_Config>
 80023a0:	4603      	mov	r3, r0
 80023a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80023aa:	7cfb      	ldrb	r3, [r7, #19]
 80023ac:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c8:	4904      	ldr	r1, [pc, #16]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000

080023e0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	6013      	str	r3, [r2, #0]
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000

08002400 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800240e:	4b74      	ldr	r3, [pc, #464]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d018      	beq.n	800244c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800241a:	4b71      	ldr	r3, [pc, #452]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 0203 	and.w	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d10d      	bne.n	8002446 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
       ||
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002432:	4b6b      	ldr	r3, [pc, #428]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
       ||
 8002442:	429a      	cmp	r2, r3
 8002444:	d047      	beq.n	80024d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	e044      	b.n	80024d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d018      	beq.n	8002486 <RCCEx_PLLSAI1_Config+0x86>
 8002454:	2b03      	cmp	r3, #3
 8002456:	d825      	bhi.n	80024a4 <RCCEx_PLLSAI1_Config+0xa4>
 8002458:	2b01      	cmp	r3, #1
 800245a:	d002      	beq.n	8002462 <RCCEx_PLLSAI1_Config+0x62>
 800245c:	2b02      	cmp	r3, #2
 800245e:	d009      	beq.n	8002474 <RCCEx_PLLSAI1_Config+0x74>
 8002460:	e020      	b.n	80024a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002462:	4b5f      	ldr	r3, [pc, #380]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d11d      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002472:	e01a      	b.n	80024aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002474:	4b5a      	ldr	r3, [pc, #360]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247c:	2b00      	cmp	r3, #0
 800247e:	d116      	bne.n	80024ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002484:	e013      	b.n	80024ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002486:	4b56      	ldr	r3, [pc, #344]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10f      	bne.n	80024b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002492:	4b53      	ldr	r3, [pc, #332]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024a2:	e006      	b.n	80024b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
      break;
 80024a8:	e004      	b.n	80024b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024aa:	bf00      	nop
 80024ac:	e002      	b.n	80024b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ae:	bf00      	nop
 80024b0:	e000      	b.n	80024b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10d      	bne.n	80024d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024ba:	4b49      	ldr	r3, [pc, #292]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6819      	ldr	r1, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	430b      	orrs	r3, r1
 80024d0:	4943      	ldr	r1, [pc, #268]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d17c      	bne.n	80025d6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024dc:	4b40      	ldr	r3, [pc, #256]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a3f      	ldr	r2, [pc, #252]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e8:	f7fe fb8a 	bl	8000c00 <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024ee:	e009      	b.n	8002504 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024f0:	f7fe fb86 	bl	8000c00 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d902      	bls.n	8002504 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	73fb      	strb	r3, [r7, #15]
        break;
 8002502:	e005      	b.n	8002510 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002504:	4b36      	ldr	r3, [pc, #216]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1ef      	bne.n	80024f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d15f      	bne.n	80025d6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d110      	bne.n	800253e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800251c:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002524:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6892      	ldr	r2, [r2, #8]
 800252c:	0211      	lsls	r1, r2, #8
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68d2      	ldr	r2, [r2, #12]
 8002532:	06d2      	lsls	r2, r2, #27
 8002534:	430a      	orrs	r2, r1
 8002536:	492a      	ldr	r1, [pc, #168]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002538:	4313      	orrs	r3, r2
 800253a:	610b      	str	r3, [r1, #16]
 800253c:	e027      	b.n	800258e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d112      	bne.n	800256a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002544:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800254c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6892      	ldr	r2, [r2, #8]
 8002554:	0211      	lsls	r1, r2, #8
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6912      	ldr	r2, [r2, #16]
 800255a:	0852      	lsrs	r2, r2, #1
 800255c:	3a01      	subs	r2, #1
 800255e:	0552      	lsls	r2, r2, #21
 8002560:	430a      	orrs	r2, r1
 8002562:	491f      	ldr	r1, [pc, #124]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002564:	4313      	orrs	r3, r2
 8002566:	610b      	str	r3, [r1, #16]
 8002568:	e011      	b.n	800258e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800256a:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002572:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6892      	ldr	r2, [r2, #8]
 800257a:	0211      	lsls	r1, r2, #8
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6952      	ldr	r2, [r2, #20]
 8002580:	0852      	lsrs	r2, r2, #1
 8002582:	3a01      	subs	r2, #1
 8002584:	0652      	lsls	r2, r2, #25
 8002586:	430a      	orrs	r2, r1
 8002588:	4915      	ldr	r1, [pc, #84]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800258a:	4313      	orrs	r3, r2
 800258c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800258e:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a13      	ldr	r2, [pc, #76]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002594:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002598:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259a:	f7fe fb31 	bl	8000c00 <HAL_GetTick>
 800259e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025a0:	e009      	b.n	80025b6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025a2:	f7fe fb2d 	bl	8000c00 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d902      	bls.n	80025b6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	73fb      	strb	r3, [r7, #15]
          break;
 80025b4:	e005      	b.n	80025c2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0ef      	beq.n	80025a2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d106      	bne.n	80025d6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	4903      	ldr	r1, [pc, #12]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e040      	b.n	8002678 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe fa08 	bl	8000a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	; 0x24
 8002610:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0201 	bic.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fde8 	bl	8003200 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fbb9 	bl	8002da8 <UART_SetConfig>
 8002636:	4603      	mov	r3, r0
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e01b      	b.n	8002678 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800264e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800265e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fe67 	bl	8003344 <UART_CheckIdleState>
 8002676:	4603      	mov	r3, r0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	; 0x28
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002694:	2b20      	cmp	r3, #32
 8002696:	d178      	bne.n	800278a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_UART_Transmit+0x24>
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e071      	b.n	800278c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2221      	movs	r2, #33	; 0x21
 80026b4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026b6:	f7fe faa3 	bl	8000c00 <HAL_GetTick>
 80026ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	88fa      	ldrh	r2, [r7, #6]
 80026c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	88fa      	ldrh	r2, [r7, #6]
 80026c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d4:	d108      	bne.n	80026e8 <HAL_UART_Transmit+0x68>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d104      	bne.n	80026e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	e003      	b.n	80026f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026f0:	e030      	b.n	8002754 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2200      	movs	r2, #0
 80026fa:	2180      	movs	r1, #128	; 0x80
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fec9 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d004      	beq.n	8002712 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e03c      	b.n	800278c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10b      	bne.n	8002730 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	881a      	ldrh	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002724:	b292      	uxth	r2, r2
 8002726:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	3302      	adds	r3, #2
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	e008      	b.n	8002742 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	781a      	ldrb	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	b292      	uxth	r2, r2
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	3301      	adds	r3, #1
 8002740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1c8      	bne.n	80026f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2200      	movs	r2, #0
 8002768:	2140      	movs	r1, #64	; 0x40
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 fe92 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d004      	beq.n	8002780 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2220      	movs	r2, #32
 800277a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e005      	b.n	800278c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e000      	b.n	800278c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800278a:	2302      	movs	r3, #2
  }
}
 800278c:	4618      	mov	r0, r3
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b0ba      	sub	sp, #232	; 0xe8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80027be:	f640 030f 	movw	r3, #2063	; 0x80f
 80027c2:	4013      	ands	r3, r2
 80027c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80027c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d115      	bne.n	80027fc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80027d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00f      	beq.n	80027fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d009      	beq.n	80027fc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 82ae 	beq.w	8002d4e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
      }
      return;
 80027fa:	e2a8      	b.n	8002d4e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80027fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8117 	beq.w	8002a34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002812:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002816:	4b85      	ldr	r3, [pc, #532]	; (8002a2c <HAL_UART_IRQHandler+0x298>)
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 810a 	beq.w	8002a34 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d011      	beq.n	8002850 <HAL_UART_IRQHandler+0xbc>
 800282c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d011      	beq.n	8002880 <HAL_UART_IRQHandler+0xec>
 800285c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00b      	beq.n	8002880 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2202      	movs	r2, #2
 800286e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002876:	f043 0204 	orr.w	r2, r3, #4
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d011      	beq.n	80028b0 <HAL_UART_IRQHandler+0x11c>
 800288c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2204      	movs	r2, #4
 800289e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a6:	f043 0202 	orr.w	r2, r3, #2
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d017      	beq.n	80028ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80028c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2208      	movs	r2, #8
 80028da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e2:	f043 0208 	orr.w	r2, r3, #8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d012      	beq.n	800291e <HAL_UART_IRQHandler+0x18a>
 80028f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00c      	beq.n	800291e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800290c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8214 	beq.w	8002d52 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800292a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00d      	beq.n	8002952 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002958:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b40      	cmp	r3, #64	; 0x40
 8002968:	d005      	beq.n	8002976 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800296a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800296e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002972:	2b00      	cmp	r3, #0
 8002974:	d04f      	beq.n	8002a16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fdf3 	bl	8003562 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002986:	2b40      	cmp	r3, #64	; 0x40
 8002988:	d141      	bne.n	8002a0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3308      	adds	r3, #8
 8002990:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002994:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002998:	e853 3f00 	ldrex	r3, [r3]
 800299c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3308      	adds	r3, #8
 80029b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029c6:	e841 2300 	strex	r3, r2, [r1]
 80029ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1d9      	bne.n	800298a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d013      	beq.n	8002a06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e2:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <HAL_UART_IRQHandler+0x29c>)
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe fa63 	bl	8000eb6 <HAL_DMA_Abort_IT>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d017      	beq.n	8002a26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a00:	4610      	mov	r0, r2
 8002a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	e00f      	b.n	8002a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f9b8 	bl	8002d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	e00b      	b.n	8002a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f9b4 	bl	8002d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a14:	e007      	b.n	8002a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f9b0 	bl	8002d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002a24:	e195      	b.n	8002d52 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a26:	bf00      	nop
    return;
 8002a28:	e193      	b.n	8002d52 <HAL_UART_IRQHandler+0x5be>
 8002a2a:	bf00      	nop
 8002a2c:	04000120 	.word	0x04000120
 8002a30:	0800362b 	.word	0x0800362b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	f040 814e 	bne.w	8002cda <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8147 	beq.w	8002cda <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 8140 	beq.w	8002cda <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2210      	movs	r2, #16
 8002a60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	f040 80b8 	bne.w	8002be2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8167 	beq.w	8002d56 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a92:	429a      	cmp	r2, r3
 8002a94:	f080 815f 	bcs.w	8002d56 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 8086 	bne.w	8002bc0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ac0:	e853 3f00 	ldrex	r3, [r3]
 8002ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ade:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ae2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002aee:	e841 2300 	strex	r3, r2, [r1]
 8002af2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1da      	bne.n	8002ab4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3308      	adds	r3, #8
 8002b04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b08:	e853 3f00 	ldrex	r3, [r3]
 8002b0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3308      	adds	r3, #8
 8002b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b2e:	e841 2300 	strex	r3, r2, [r1]
 8002b32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1e1      	bne.n	8002afe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3308      	adds	r3, #8
 8002b40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b44:	e853 3f00 	ldrex	r3, [r3]
 8002b48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3308      	adds	r3, #8
 8002b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b66:	e841 2300 	strex	r3, r2, [r1]
 8002b6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1e3      	bne.n	8002b3a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b88:	e853 3f00 	ldrex	r3, [r3]
 8002b8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b90:	f023 0310 	bic.w	r3, r3, #16
 8002b94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ba2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ba4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002baa:	e841 2300 	strex	r3, r2, [r1]
 8002bae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1e4      	bne.n	8002b80 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe f93d 	bl	8000e3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f8d8 	bl	8002d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002be0:	e0b9      	b.n	8002d56 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 80ab 	beq.w	8002d5a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8002c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80a6 	beq.w	8002d5a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c16:	e853 3f00 	ldrex	r3, [r3]
 8002c1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c30:	647b      	str	r3, [r7, #68]	; 0x44
 8002c32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c38:	e841 2300 	strex	r3, r2, [r1]
 8002c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e4      	bne.n	8002c0e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3308      	adds	r3, #8
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	e853 3f00 	ldrex	r3, [r3]
 8002c52:	623b      	str	r3, [r7, #32]
   return(result);
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3308      	adds	r3, #8
 8002c64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c68:	633a      	str	r2, [r7, #48]	; 0x30
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c70:	e841 2300 	strex	r3, r2, [r1]
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1e3      	bne.n	8002c44 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	e853 3f00 	ldrex	r3, [r3]
 8002c9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f023 0310 	bic.w	r3, r3, #16
 8002ca4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb6:	69b9      	ldr	r1, [r7, #24]
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	e841 2300 	strex	r3, r2, [r1]
 8002cbe:	617b      	str	r3, [r7, #20]
   return(result);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1e4      	bne.n	8002c90 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ccc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f85c 	bl	8002d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cd8:	e03f      	b.n	8002d5a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00e      	beq.n	8002d04 <HAL_UART_IRQHandler+0x570>
 8002ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fcd4 	bl	80036aa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d02:	e02d      	b.n	8002d60 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00e      	beq.n	8002d2e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01c      	beq.n	8002d5e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
    }
    return;
 8002d2c:	e017      	b.n	8002d5e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d012      	beq.n	8002d60 <HAL_UART_IRQHandler+0x5cc>
 8002d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00c      	beq.n	8002d60 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fc85 	bl	8003656 <UART_EndTransmit_IT>
    return;
 8002d4c:	e008      	b.n	8002d60 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002d4e:	bf00      	nop
 8002d50:	e006      	b.n	8002d60 <HAL_UART_IRQHandler+0x5cc>
    return;
 8002d52:	bf00      	nop
 8002d54:	e004      	b.n	8002d60 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002d56:	bf00      	nop
 8002d58:	e002      	b.n	8002d60 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002d5a:	bf00      	nop
 8002d5c:	e000      	b.n	8002d60 <HAL_UART_IRQHandler+0x5cc>
    return;
 8002d5e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002d60:	37e8      	adds	r7, #232	; 0xe8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop

08002d68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dac:	b08a      	sub	sp, #40	; 0x28
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	4bb4      	ldr	r3, [pc, #720]	; (80030a8 <UART_SetConfig+0x300>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de0:	430b      	orrs	r3, r1
 8002de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4aa9      	ldr	r2, [pc, #676]	; (80030ac <UART_SetConfig+0x304>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d004      	beq.n	8002e14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e10:	4313      	orrs	r3, r2
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e24:	430a      	orrs	r2, r1
 8002e26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4aa0      	ldr	r2, [pc, #640]	; (80030b0 <UART_SetConfig+0x308>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d126      	bne.n	8002e80 <UART_SetConfig+0xd8>
 8002e32:	4ba0      	ldr	r3, [pc, #640]	; (80030b4 <UART_SetConfig+0x30c>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d81b      	bhi.n	8002e78 <UART_SetConfig+0xd0>
 8002e40:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xa0>)
 8002e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e46:	bf00      	nop
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e69 	.word	0x08002e69
 8002e50:	08002e61 	.word	0x08002e61
 8002e54:	08002e71 	.word	0x08002e71
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e5e:	e080      	b.n	8002f62 <UART_SetConfig+0x1ba>
 8002e60:	2302      	movs	r3, #2
 8002e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e66:	e07c      	b.n	8002f62 <UART_SetConfig+0x1ba>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e6e:	e078      	b.n	8002f62 <UART_SetConfig+0x1ba>
 8002e70:	2308      	movs	r3, #8
 8002e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e76:	e074      	b.n	8002f62 <UART_SetConfig+0x1ba>
 8002e78:	2310      	movs	r3, #16
 8002e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e7e:	e070      	b.n	8002f62 <UART_SetConfig+0x1ba>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a8c      	ldr	r2, [pc, #560]	; (80030b8 <UART_SetConfig+0x310>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d138      	bne.n	8002efc <UART_SetConfig+0x154>
 8002e8a:	4b8a      	ldr	r3, [pc, #552]	; (80030b4 <UART_SetConfig+0x30c>)
 8002e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b0c      	cmp	r3, #12
 8002e96:	d82d      	bhi.n	8002ef4 <UART_SetConfig+0x14c>
 8002e98:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <UART_SetConfig+0xf8>)
 8002e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9e:	bf00      	nop
 8002ea0:	08002ed5 	.word	0x08002ed5
 8002ea4:	08002ef5 	.word	0x08002ef5
 8002ea8:	08002ef5 	.word	0x08002ef5
 8002eac:	08002ef5 	.word	0x08002ef5
 8002eb0:	08002ee5 	.word	0x08002ee5
 8002eb4:	08002ef5 	.word	0x08002ef5
 8002eb8:	08002ef5 	.word	0x08002ef5
 8002ebc:	08002ef5 	.word	0x08002ef5
 8002ec0:	08002edd 	.word	0x08002edd
 8002ec4:	08002ef5 	.word	0x08002ef5
 8002ec8:	08002ef5 	.word	0x08002ef5
 8002ecc:	08002ef5 	.word	0x08002ef5
 8002ed0:	08002eed 	.word	0x08002eed
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eda:	e042      	b.n	8002f62 <UART_SetConfig+0x1ba>
 8002edc:	2302      	movs	r3, #2
 8002ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ee2:	e03e      	b.n	8002f62 <UART_SetConfig+0x1ba>
 8002ee4:	2304      	movs	r3, #4
 8002ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eea:	e03a      	b.n	8002f62 <UART_SetConfig+0x1ba>
 8002eec:	2308      	movs	r3, #8
 8002eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ef2:	e036      	b.n	8002f62 <UART_SetConfig+0x1ba>
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002efa:	e032      	b.n	8002f62 <UART_SetConfig+0x1ba>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a6a      	ldr	r2, [pc, #424]	; (80030ac <UART_SetConfig+0x304>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d12a      	bne.n	8002f5c <UART_SetConfig+0x1b4>
 8002f06:	4b6b      	ldr	r3, [pc, #428]	; (80030b4 <UART_SetConfig+0x30c>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f14:	d01a      	beq.n	8002f4c <UART_SetConfig+0x1a4>
 8002f16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f1a:	d81b      	bhi.n	8002f54 <UART_SetConfig+0x1ac>
 8002f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f20:	d00c      	beq.n	8002f3c <UART_SetConfig+0x194>
 8002f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f26:	d815      	bhi.n	8002f54 <UART_SetConfig+0x1ac>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <UART_SetConfig+0x18c>
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f30:	d008      	beq.n	8002f44 <UART_SetConfig+0x19c>
 8002f32:	e00f      	b.n	8002f54 <UART_SetConfig+0x1ac>
 8002f34:	2300      	movs	r3, #0
 8002f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f3a:	e012      	b.n	8002f62 <UART_SetConfig+0x1ba>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f42:	e00e      	b.n	8002f62 <UART_SetConfig+0x1ba>
 8002f44:	2304      	movs	r3, #4
 8002f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4a:	e00a      	b.n	8002f62 <UART_SetConfig+0x1ba>
 8002f4c:	2308      	movs	r3, #8
 8002f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f52:	e006      	b.n	8002f62 <UART_SetConfig+0x1ba>
 8002f54:	2310      	movs	r3, #16
 8002f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5a:	e002      	b.n	8002f62 <UART_SetConfig+0x1ba>
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a51      	ldr	r2, [pc, #324]	; (80030ac <UART_SetConfig+0x304>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d17a      	bne.n	8003062 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d824      	bhi.n	8002fbe <UART_SetConfig+0x216>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <UART_SetConfig+0x1d4>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002fa1 	.word	0x08002fa1
 8002f80:	08002fbf 	.word	0x08002fbf
 8002f84:	08002fa9 	.word	0x08002fa9
 8002f88:	08002fbf 	.word	0x08002fbf
 8002f8c:	08002faf 	.word	0x08002faf
 8002f90:	08002fbf 	.word	0x08002fbf
 8002f94:	08002fbf 	.word	0x08002fbf
 8002f98:	08002fbf 	.word	0x08002fbf
 8002f9c:	08002fb7 	.word	0x08002fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa0:	f7fe ff9c 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 8002fa4:	61f8      	str	r0, [r7, #28]
        break;
 8002fa6:	e010      	b.n	8002fca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fa8:	4b44      	ldr	r3, [pc, #272]	; (80030bc <UART_SetConfig+0x314>)
 8002faa:	61fb      	str	r3, [r7, #28]
        break;
 8002fac:	e00d      	b.n	8002fca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fae:	f7fe fefd 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8002fb2:	61f8      	str	r0, [r7, #28]
        break;
 8002fb4:	e009      	b.n	8002fca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fba:	61fb      	str	r3, [r7, #28]
        break;
 8002fbc:	e005      	b.n	8002fca <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002fc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8107 	beq.w	80031e0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4413      	add	r3, r2
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d305      	bcc.n	8002fee <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d903      	bls.n	8002ff6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ff4:	e0f4      	b.n	80031e0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	461c      	mov	r4, r3
 8002ffc:	4615      	mov	r5, r2
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	022b      	lsls	r3, r5, #8
 8003008:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800300c:	0222      	lsls	r2, r4, #8
 800300e:	68f9      	ldr	r1, [r7, #12]
 8003010:	6849      	ldr	r1, [r1, #4]
 8003012:	0849      	lsrs	r1, r1, #1
 8003014:	2000      	movs	r0, #0
 8003016:	4688      	mov	r8, r1
 8003018:	4681      	mov	r9, r0
 800301a:	eb12 0a08 	adds.w	sl, r2, r8
 800301e:	eb43 0b09 	adc.w	fp, r3, r9
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003030:	4650      	mov	r0, sl
 8003032:	4659      	mov	r1, fp
 8003034:	f7fd f91c 	bl	8000270 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003046:	d308      	bcc.n	800305a <UART_SetConfig+0x2b2>
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800304e:	d204      	bcs.n	800305a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	60da      	str	r2, [r3, #12]
 8003058:	e0c2      	b.n	80031e0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003060:	e0be      	b.n	80031e0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800306a:	d16a      	bne.n	8003142 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800306c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003070:	2b08      	cmp	r3, #8
 8003072:	d834      	bhi.n	80030de <UART_SetConfig+0x336>
 8003074:	a201      	add	r2, pc, #4	; (adr r2, 800307c <UART_SetConfig+0x2d4>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	080030a1 	.word	0x080030a1
 8003080:	080030c1 	.word	0x080030c1
 8003084:	080030c9 	.word	0x080030c9
 8003088:	080030df 	.word	0x080030df
 800308c:	080030cf 	.word	0x080030cf
 8003090:	080030df 	.word	0x080030df
 8003094:	080030df 	.word	0x080030df
 8003098:	080030df 	.word	0x080030df
 800309c:	080030d7 	.word	0x080030d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a0:	f7fe ff1c 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 80030a4:	61f8      	str	r0, [r7, #28]
        break;
 80030a6:	e020      	b.n	80030ea <UART_SetConfig+0x342>
 80030a8:	efff69f3 	.word	0xefff69f3
 80030ac:	40008000 	.word	0x40008000
 80030b0:	40013800 	.word	0x40013800
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40004400 	.word	0x40004400
 80030bc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030c0:	f7fe ff22 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 80030c4:	61f8      	str	r0, [r7, #28]
        break;
 80030c6:	e010      	b.n	80030ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030c8:	4b4c      	ldr	r3, [pc, #304]	; (80031fc <UART_SetConfig+0x454>)
 80030ca:	61fb      	str	r3, [r7, #28]
        break;
 80030cc:	e00d      	b.n	80030ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ce:	f7fe fe6d 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 80030d2:	61f8      	str	r0, [r7, #28]
        break;
 80030d4:	e009      	b.n	80030ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030da:	61fb      	str	r3, [r7, #28]
        break;
 80030dc:	e005      	b.n	80030ea <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80030e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d077      	beq.n	80031e0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	005a      	lsls	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	441a      	add	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2b0f      	cmp	r3, #15
 800310a:	d916      	bls.n	800313a <UART_SetConfig+0x392>
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003112:	d212      	bcs.n	800313a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	b29b      	uxth	r3, r3
 8003118:	f023 030f 	bic.w	r3, r3, #15
 800311c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	085b      	lsrs	r3, r3, #1
 8003122:	b29b      	uxth	r3, r3
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	b29a      	uxth	r2, r3
 800312a:	8afb      	ldrh	r3, [r7, #22]
 800312c:	4313      	orrs	r3, r2
 800312e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	8afa      	ldrh	r2, [r7, #22]
 8003136:	60da      	str	r2, [r3, #12]
 8003138:	e052      	b.n	80031e0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003140:	e04e      	b.n	80031e0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003142:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003146:	2b08      	cmp	r3, #8
 8003148:	d827      	bhi.n	800319a <UART_SetConfig+0x3f2>
 800314a:	a201      	add	r2, pc, #4	; (adr r2, 8003150 <UART_SetConfig+0x3a8>)
 800314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003150:	08003175 	.word	0x08003175
 8003154:	0800317d 	.word	0x0800317d
 8003158:	08003185 	.word	0x08003185
 800315c:	0800319b 	.word	0x0800319b
 8003160:	0800318b 	.word	0x0800318b
 8003164:	0800319b 	.word	0x0800319b
 8003168:	0800319b 	.word	0x0800319b
 800316c:	0800319b 	.word	0x0800319b
 8003170:	08003193 	.word	0x08003193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003174:	f7fe feb2 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 8003178:	61f8      	str	r0, [r7, #28]
        break;
 800317a:	e014      	b.n	80031a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800317c:	f7fe fec4 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 8003180:	61f8      	str	r0, [r7, #28]
        break;
 8003182:	e010      	b.n	80031a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003184:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <UART_SetConfig+0x454>)
 8003186:	61fb      	str	r3, [r7, #28]
        break;
 8003188:	e00d      	b.n	80031a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800318a:	f7fe fe0f 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 800318e:	61f8      	str	r0, [r7, #28]
        break;
 8003190:	e009      	b.n	80031a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003196:	61fb      	str	r3, [r7, #28]
        break;
 8003198:	e005      	b.n	80031a6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031a4:	bf00      	nop
    }

    if (pclk != 0U)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d019      	beq.n	80031e0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	085a      	lsrs	r2, r3, #1
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	441a      	add	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80031be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2b0f      	cmp	r3, #15
 80031c4:	d909      	bls.n	80031da <UART_SetConfig+0x432>
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031cc:	d205      	bcs.n	80031da <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60da      	str	r2, [r3, #12]
 80031d8:	e002      	b.n	80031e0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3728      	adds	r7, #40	; 0x28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031fa:	bf00      	nop
 80031fc:	00f42400 	.word	0x00f42400

08003200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01a      	beq.n	8003316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032fe:	d10a      	bne.n	8003316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	605a      	str	r2, [r3, #4]
  }
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b098      	sub	sp, #96	; 0x60
 8003348:	af02      	add	r7, sp, #8
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003354:	f7fd fc54 	bl	8000c00 <HAL_GetTick>
 8003358:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b08      	cmp	r3, #8
 8003366:	d12e      	bne.n	80033c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003370:	2200      	movs	r2, #0
 8003372:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f88c 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d021      	beq.n	80033c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003396:	653b      	str	r3, [r7, #80]	; 0x50
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a0:	647b      	str	r3, [r7, #68]	; 0x44
 80033a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e6      	bne.n	8003382 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e062      	b.n	800348c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d149      	bne.n	8003468 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033dc:	2200      	movs	r2, #0
 80033de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f856 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d03c      	beq.n	8003468 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	e853 3f00 	ldrex	r3, [r3]
 80033fa:	623b      	str	r3, [r7, #32]
   return(result);
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340c:	633b      	str	r3, [r7, #48]	; 0x30
 800340e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003414:	e841 2300 	strex	r3, r2, [r1]
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e6      	bne.n	80033ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3308      	adds	r3, #8
 8003426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	e853 3f00 	ldrex	r3, [r3]
 800342e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 0301 	bic.w	r3, r3, #1
 8003436:	64bb      	str	r3, [r7, #72]	; 0x48
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3308      	adds	r3, #8
 800343e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003440:	61fa      	str	r2, [r7, #28]
 8003442:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003444:	69b9      	ldr	r1, [r7, #24]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	e841 2300 	strex	r3, r2, [r1]
 800344c:	617b      	str	r3, [r7, #20]
   return(result);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e5      	bne.n	8003420 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e011      	b.n	800348c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2220      	movs	r2, #32
 8003472:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3758      	adds	r7, #88	; 0x58
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a4:	e049      	b.n	800353a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d045      	beq.n	800353a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7fd fba7 	bl	8000c00 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e048      	b.n	800355a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d031      	beq.n	800353a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d110      	bne.n	8003506 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2208      	movs	r2, #8
 80034ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f838 	bl	8003562 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2208      	movs	r2, #8
 80034f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e029      	b.n	800355a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003514:	d111      	bne.n	800353a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800351e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f81e 	bl	8003562 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2220      	movs	r2, #32
 800352a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e00f      	b.n	800355a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4013      	ands	r3, r2
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	429a      	cmp	r2, r3
 8003548:	bf0c      	ite	eq
 800354a:	2301      	moveq	r3, #1
 800354c:	2300      	movne	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	429a      	cmp	r2, r3
 8003556:	d0a6      	beq.n	80034a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003562:	b480      	push	{r7}
 8003564:	b095      	sub	sp, #84	; 0x54
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003572:	e853 3f00 	ldrex	r3, [r3]
 8003576:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800357e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003588:	643b      	str	r3, [r7, #64]	; 0x40
 800358a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800358e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003590:	e841 2300 	strex	r3, r2, [r1]
 8003594:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e6      	bne.n	800356a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3308      	adds	r3, #8
 80035a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	e853 3f00 	ldrex	r3, [r3]
 80035aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3308      	adds	r3, #8
 80035ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c4:	e841 2300 	strex	r3, r2, [r1]
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e5      	bne.n	800359c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d118      	bne.n	800360a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f023 0310 	bic.w	r3, r3, #16
 80035ec:	647b      	str	r3, [r7, #68]	; 0x44
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f6:	61bb      	str	r3, [r7, #24]
 80035f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fa:	6979      	ldr	r1, [r7, #20]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	613b      	str	r3, [r7, #16]
   return(result);
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e6      	bne.n	80035d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800361e:	bf00      	nop
 8003620:	3754      	adds	r7, #84	; 0x54
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f7ff fb97 	bl	8002d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b088      	sub	sp, #32
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	60bb      	str	r3, [r7, #8]
   return(result);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	6979      	ldr	r1, [r7, #20]
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	613b      	str	r3, [r7, #16]
   return(result);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e6      	bne.n	800365e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff fb63 	bl	8002d68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036a2:	bf00      	nop
 80036a4:	3720      	adds	r7, #32
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <siprintf>:
 80036c0:	b40e      	push	{r1, r2, r3}
 80036c2:	b500      	push	{lr}
 80036c4:	b09c      	sub	sp, #112	; 0x70
 80036c6:	ab1d      	add	r3, sp, #116	; 0x74
 80036c8:	9002      	str	r0, [sp, #8]
 80036ca:	9006      	str	r0, [sp, #24]
 80036cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036d0:	4809      	ldr	r0, [pc, #36]	; (80036f8 <siprintf+0x38>)
 80036d2:	9107      	str	r1, [sp, #28]
 80036d4:	9104      	str	r1, [sp, #16]
 80036d6:	4909      	ldr	r1, [pc, #36]	; (80036fc <siprintf+0x3c>)
 80036d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80036dc:	9105      	str	r1, [sp, #20]
 80036de:	6800      	ldr	r0, [r0, #0]
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	a902      	add	r1, sp, #8
 80036e4:	f000 f992 	bl	8003a0c <_svfiprintf_r>
 80036e8:	9b02      	ldr	r3, [sp, #8]
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	b01c      	add	sp, #112	; 0x70
 80036f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80036f4:	b003      	add	sp, #12
 80036f6:	4770      	bx	lr
 80036f8:	2000005c 	.word	0x2000005c
 80036fc:	ffff0208 	.word	0xffff0208

08003700 <memset>:
 8003700:	4402      	add	r2, r0
 8003702:	4603      	mov	r3, r0
 8003704:	4293      	cmp	r3, r2
 8003706:	d100      	bne.n	800370a <memset+0xa>
 8003708:	4770      	bx	lr
 800370a:	f803 1b01 	strb.w	r1, [r3], #1
 800370e:	e7f9      	b.n	8003704 <memset+0x4>

08003710 <__errno>:
 8003710:	4b01      	ldr	r3, [pc, #4]	; (8003718 <__errno+0x8>)
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	2000005c 	.word	0x2000005c

0800371c <__libc_init_array>:
 800371c:	b570      	push	{r4, r5, r6, lr}
 800371e:	4d0d      	ldr	r5, [pc, #52]	; (8003754 <__libc_init_array+0x38>)
 8003720:	4c0d      	ldr	r4, [pc, #52]	; (8003758 <__libc_init_array+0x3c>)
 8003722:	1b64      	subs	r4, r4, r5
 8003724:	10a4      	asrs	r4, r4, #2
 8003726:	2600      	movs	r6, #0
 8003728:	42a6      	cmp	r6, r4
 800372a:	d109      	bne.n	8003740 <__libc_init_array+0x24>
 800372c:	4d0b      	ldr	r5, [pc, #44]	; (800375c <__libc_init_array+0x40>)
 800372e:	4c0c      	ldr	r4, [pc, #48]	; (8003760 <__libc_init_array+0x44>)
 8003730:	f000 fc6a 	bl	8004008 <_init>
 8003734:	1b64      	subs	r4, r4, r5
 8003736:	10a4      	asrs	r4, r4, #2
 8003738:	2600      	movs	r6, #0
 800373a:	42a6      	cmp	r6, r4
 800373c:	d105      	bne.n	800374a <__libc_init_array+0x2e>
 800373e:	bd70      	pop	{r4, r5, r6, pc}
 8003740:	f855 3b04 	ldr.w	r3, [r5], #4
 8003744:	4798      	blx	r3
 8003746:	3601      	adds	r6, #1
 8003748:	e7ee      	b.n	8003728 <__libc_init_array+0xc>
 800374a:	f855 3b04 	ldr.w	r3, [r5], #4
 800374e:	4798      	blx	r3
 8003750:	3601      	adds	r6, #1
 8003752:	e7f2      	b.n	800373a <__libc_init_array+0x1e>
 8003754:	080040b8 	.word	0x080040b8
 8003758:	080040b8 	.word	0x080040b8
 800375c:	080040b8 	.word	0x080040b8
 8003760:	080040bc 	.word	0x080040bc

08003764 <__retarget_lock_acquire_recursive>:
 8003764:	4770      	bx	lr

08003766 <__retarget_lock_release_recursive>:
 8003766:	4770      	bx	lr

08003768 <_free_r>:
 8003768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800376a:	2900      	cmp	r1, #0
 800376c:	d044      	beq.n	80037f8 <_free_r+0x90>
 800376e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003772:	9001      	str	r0, [sp, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	f1a1 0404 	sub.w	r4, r1, #4
 800377a:	bfb8      	it	lt
 800377c:	18e4      	addlt	r4, r4, r3
 800377e:	f000 f8df 	bl	8003940 <__malloc_lock>
 8003782:	4a1e      	ldr	r2, [pc, #120]	; (80037fc <_free_r+0x94>)
 8003784:	9801      	ldr	r0, [sp, #4]
 8003786:	6813      	ldr	r3, [r2, #0]
 8003788:	b933      	cbnz	r3, 8003798 <_free_r+0x30>
 800378a:	6063      	str	r3, [r4, #4]
 800378c:	6014      	str	r4, [r2, #0]
 800378e:	b003      	add	sp, #12
 8003790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003794:	f000 b8da 	b.w	800394c <__malloc_unlock>
 8003798:	42a3      	cmp	r3, r4
 800379a:	d908      	bls.n	80037ae <_free_r+0x46>
 800379c:	6825      	ldr	r5, [r4, #0]
 800379e:	1961      	adds	r1, r4, r5
 80037a0:	428b      	cmp	r3, r1
 80037a2:	bf01      	itttt	eq
 80037a4:	6819      	ldreq	r1, [r3, #0]
 80037a6:	685b      	ldreq	r3, [r3, #4]
 80037a8:	1949      	addeq	r1, r1, r5
 80037aa:	6021      	streq	r1, [r4, #0]
 80037ac:	e7ed      	b.n	800378a <_free_r+0x22>
 80037ae:	461a      	mov	r2, r3
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	b10b      	cbz	r3, 80037b8 <_free_r+0x50>
 80037b4:	42a3      	cmp	r3, r4
 80037b6:	d9fa      	bls.n	80037ae <_free_r+0x46>
 80037b8:	6811      	ldr	r1, [r2, #0]
 80037ba:	1855      	adds	r5, r2, r1
 80037bc:	42a5      	cmp	r5, r4
 80037be:	d10b      	bne.n	80037d8 <_free_r+0x70>
 80037c0:	6824      	ldr	r4, [r4, #0]
 80037c2:	4421      	add	r1, r4
 80037c4:	1854      	adds	r4, r2, r1
 80037c6:	42a3      	cmp	r3, r4
 80037c8:	6011      	str	r1, [r2, #0]
 80037ca:	d1e0      	bne.n	800378e <_free_r+0x26>
 80037cc:	681c      	ldr	r4, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	6053      	str	r3, [r2, #4]
 80037d2:	440c      	add	r4, r1
 80037d4:	6014      	str	r4, [r2, #0]
 80037d6:	e7da      	b.n	800378e <_free_r+0x26>
 80037d8:	d902      	bls.n	80037e0 <_free_r+0x78>
 80037da:	230c      	movs	r3, #12
 80037dc:	6003      	str	r3, [r0, #0]
 80037de:	e7d6      	b.n	800378e <_free_r+0x26>
 80037e0:	6825      	ldr	r5, [r4, #0]
 80037e2:	1961      	adds	r1, r4, r5
 80037e4:	428b      	cmp	r3, r1
 80037e6:	bf04      	itt	eq
 80037e8:	6819      	ldreq	r1, [r3, #0]
 80037ea:	685b      	ldreq	r3, [r3, #4]
 80037ec:	6063      	str	r3, [r4, #4]
 80037ee:	bf04      	itt	eq
 80037f0:	1949      	addeq	r1, r1, r5
 80037f2:	6021      	streq	r1, [r4, #0]
 80037f4:	6054      	str	r4, [r2, #4]
 80037f6:	e7ca      	b.n	800378e <_free_r+0x26>
 80037f8:	b003      	add	sp, #12
 80037fa:	bd30      	pop	{r4, r5, pc}
 80037fc:	20000254 	.word	0x20000254

08003800 <sbrk_aligned>:
 8003800:	b570      	push	{r4, r5, r6, lr}
 8003802:	4e0e      	ldr	r6, [pc, #56]	; (800383c <sbrk_aligned+0x3c>)
 8003804:	460c      	mov	r4, r1
 8003806:	6831      	ldr	r1, [r6, #0]
 8003808:	4605      	mov	r5, r0
 800380a:	b911      	cbnz	r1, 8003812 <sbrk_aligned+0x12>
 800380c:	f000 fba6 	bl	8003f5c <_sbrk_r>
 8003810:	6030      	str	r0, [r6, #0]
 8003812:	4621      	mov	r1, r4
 8003814:	4628      	mov	r0, r5
 8003816:	f000 fba1 	bl	8003f5c <_sbrk_r>
 800381a:	1c43      	adds	r3, r0, #1
 800381c:	d00a      	beq.n	8003834 <sbrk_aligned+0x34>
 800381e:	1cc4      	adds	r4, r0, #3
 8003820:	f024 0403 	bic.w	r4, r4, #3
 8003824:	42a0      	cmp	r0, r4
 8003826:	d007      	beq.n	8003838 <sbrk_aligned+0x38>
 8003828:	1a21      	subs	r1, r4, r0
 800382a:	4628      	mov	r0, r5
 800382c:	f000 fb96 	bl	8003f5c <_sbrk_r>
 8003830:	3001      	adds	r0, #1
 8003832:	d101      	bne.n	8003838 <sbrk_aligned+0x38>
 8003834:	f04f 34ff 	mov.w	r4, #4294967295
 8003838:	4620      	mov	r0, r4
 800383a:	bd70      	pop	{r4, r5, r6, pc}
 800383c:	20000258 	.word	0x20000258

08003840 <_malloc_r>:
 8003840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003844:	1ccd      	adds	r5, r1, #3
 8003846:	f025 0503 	bic.w	r5, r5, #3
 800384a:	3508      	adds	r5, #8
 800384c:	2d0c      	cmp	r5, #12
 800384e:	bf38      	it	cc
 8003850:	250c      	movcc	r5, #12
 8003852:	2d00      	cmp	r5, #0
 8003854:	4607      	mov	r7, r0
 8003856:	db01      	blt.n	800385c <_malloc_r+0x1c>
 8003858:	42a9      	cmp	r1, r5
 800385a:	d905      	bls.n	8003868 <_malloc_r+0x28>
 800385c:	230c      	movs	r3, #12
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	2600      	movs	r6, #0
 8003862:	4630      	mov	r0, r6
 8003864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003868:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800393c <_malloc_r+0xfc>
 800386c:	f000 f868 	bl	8003940 <__malloc_lock>
 8003870:	f8d8 3000 	ldr.w	r3, [r8]
 8003874:	461c      	mov	r4, r3
 8003876:	bb5c      	cbnz	r4, 80038d0 <_malloc_r+0x90>
 8003878:	4629      	mov	r1, r5
 800387a:	4638      	mov	r0, r7
 800387c:	f7ff ffc0 	bl	8003800 <sbrk_aligned>
 8003880:	1c43      	adds	r3, r0, #1
 8003882:	4604      	mov	r4, r0
 8003884:	d155      	bne.n	8003932 <_malloc_r+0xf2>
 8003886:	f8d8 4000 	ldr.w	r4, [r8]
 800388a:	4626      	mov	r6, r4
 800388c:	2e00      	cmp	r6, #0
 800388e:	d145      	bne.n	800391c <_malloc_r+0xdc>
 8003890:	2c00      	cmp	r4, #0
 8003892:	d048      	beq.n	8003926 <_malloc_r+0xe6>
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	4631      	mov	r1, r6
 8003898:	4638      	mov	r0, r7
 800389a:	eb04 0903 	add.w	r9, r4, r3
 800389e:	f000 fb5d 	bl	8003f5c <_sbrk_r>
 80038a2:	4581      	cmp	r9, r0
 80038a4:	d13f      	bne.n	8003926 <_malloc_r+0xe6>
 80038a6:	6821      	ldr	r1, [r4, #0]
 80038a8:	1a6d      	subs	r5, r5, r1
 80038aa:	4629      	mov	r1, r5
 80038ac:	4638      	mov	r0, r7
 80038ae:	f7ff ffa7 	bl	8003800 <sbrk_aligned>
 80038b2:	3001      	adds	r0, #1
 80038b4:	d037      	beq.n	8003926 <_malloc_r+0xe6>
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	442b      	add	r3, r5
 80038ba:	6023      	str	r3, [r4, #0]
 80038bc:	f8d8 3000 	ldr.w	r3, [r8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d038      	beq.n	8003936 <_malloc_r+0xf6>
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	42a2      	cmp	r2, r4
 80038c8:	d12b      	bne.n	8003922 <_malloc_r+0xe2>
 80038ca:	2200      	movs	r2, #0
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	e00f      	b.n	80038f0 <_malloc_r+0xb0>
 80038d0:	6822      	ldr	r2, [r4, #0]
 80038d2:	1b52      	subs	r2, r2, r5
 80038d4:	d41f      	bmi.n	8003916 <_malloc_r+0xd6>
 80038d6:	2a0b      	cmp	r2, #11
 80038d8:	d917      	bls.n	800390a <_malloc_r+0xca>
 80038da:	1961      	adds	r1, r4, r5
 80038dc:	42a3      	cmp	r3, r4
 80038de:	6025      	str	r5, [r4, #0]
 80038e0:	bf18      	it	ne
 80038e2:	6059      	strne	r1, [r3, #4]
 80038e4:	6863      	ldr	r3, [r4, #4]
 80038e6:	bf08      	it	eq
 80038e8:	f8c8 1000 	streq.w	r1, [r8]
 80038ec:	5162      	str	r2, [r4, r5]
 80038ee:	604b      	str	r3, [r1, #4]
 80038f0:	4638      	mov	r0, r7
 80038f2:	f104 060b 	add.w	r6, r4, #11
 80038f6:	f000 f829 	bl	800394c <__malloc_unlock>
 80038fa:	f026 0607 	bic.w	r6, r6, #7
 80038fe:	1d23      	adds	r3, r4, #4
 8003900:	1af2      	subs	r2, r6, r3
 8003902:	d0ae      	beq.n	8003862 <_malloc_r+0x22>
 8003904:	1b9b      	subs	r3, r3, r6
 8003906:	50a3      	str	r3, [r4, r2]
 8003908:	e7ab      	b.n	8003862 <_malloc_r+0x22>
 800390a:	42a3      	cmp	r3, r4
 800390c:	6862      	ldr	r2, [r4, #4]
 800390e:	d1dd      	bne.n	80038cc <_malloc_r+0x8c>
 8003910:	f8c8 2000 	str.w	r2, [r8]
 8003914:	e7ec      	b.n	80038f0 <_malloc_r+0xb0>
 8003916:	4623      	mov	r3, r4
 8003918:	6864      	ldr	r4, [r4, #4]
 800391a:	e7ac      	b.n	8003876 <_malloc_r+0x36>
 800391c:	4634      	mov	r4, r6
 800391e:	6876      	ldr	r6, [r6, #4]
 8003920:	e7b4      	b.n	800388c <_malloc_r+0x4c>
 8003922:	4613      	mov	r3, r2
 8003924:	e7cc      	b.n	80038c0 <_malloc_r+0x80>
 8003926:	230c      	movs	r3, #12
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	4638      	mov	r0, r7
 800392c:	f000 f80e 	bl	800394c <__malloc_unlock>
 8003930:	e797      	b.n	8003862 <_malloc_r+0x22>
 8003932:	6025      	str	r5, [r4, #0]
 8003934:	e7dc      	b.n	80038f0 <_malloc_r+0xb0>
 8003936:	605b      	str	r3, [r3, #4]
 8003938:	deff      	udf	#255	; 0xff
 800393a:	bf00      	nop
 800393c:	20000254 	.word	0x20000254

08003940 <__malloc_lock>:
 8003940:	4801      	ldr	r0, [pc, #4]	; (8003948 <__malloc_lock+0x8>)
 8003942:	f7ff bf0f 	b.w	8003764 <__retarget_lock_acquire_recursive>
 8003946:	bf00      	nop
 8003948:	20000250 	.word	0x20000250

0800394c <__malloc_unlock>:
 800394c:	4801      	ldr	r0, [pc, #4]	; (8003954 <__malloc_unlock+0x8>)
 800394e:	f7ff bf0a 	b.w	8003766 <__retarget_lock_release_recursive>
 8003952:	bf00      	nop
 8003954:	20000250 	.word	0x20000250

08003958 <__ssputs_r>:
 8003958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800395c:	688e      	ldr	r6, [r1, #8]
 800395e:	461f      	mov	r7, r3
 8003960:	42be      	cmp	r6, r7
 8003962:	680b      	ldr	r3, [r1, #0]
 8003964:	4682      	mov	sl, r0
 8003966:	460c      	mov	r4, r1
 8003968:	4690      	mov	r8, r2
 800396a:	d82c      	bhi.n	80039c6 <__ssputs_r+0x6e>
 800396c:	898a      	ldrh	r2, [r1, #12]
 800396e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003972:	d026      	beq.n	80039c2 <__ssputs_r+0x6a>
 8003974:	6965      	ldr	r5, [r4, #20]
 8003976:	6909      	ldr	r1, [r1, #16]
 8003978:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800397c:	eba3 0901 	sub.w	r9, r3, r1
 8003980:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003984:	1c7b      	adds	r3, r7, #1
 8003986:	444b      	add	r3, r9
 8003988:	106d      	asrs	r5, r5, #1
 800398a:	429d      	cmp	r5, r3
 800398c:	bf38      	it	cc
 800398e:	461d      	movcc	r5, r3
 8003990:	0553      	lsls	r3, r2, #21
 8003992:	d527      	bpl.n	80039e4 <__ssputs_r+0x8c>
 8003994:	4629      	mov	r1, r5
 8003996:	f7ff ff53 	bl	8003840 <_malloc_r>
 800399a:	4606      	mov	r6, r0
 800399c:	b360      	cbz	r0, 80039f8 <__ssputs_r+0xa0>
 800399e:	6921      	ldr	r1, [r4, #16]
 80039a0:	464a      	mov	r2, r9
 80039a2:	f000 faeb 	bl	8003f7c <memcpy>
 80039a6:	89a3      	ldrh	r3, [r4, #12]
 80039a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b0:	81a3      	strh	r3, [r4, #12]
 80039b2:	6126      	str	r6, [r4, #16]
 80039b4:	6165      	str	r5, [r4, #20]
 80039b6:	444e      	add	r6, r9
 80039b8:	eba5 0509 	sub.w	r5, r5, r9
 80039bc:	6026      	str	r6, [r4, #0]
 80039be:	60a5      	str	r5, [r4, #8]
 80039c0:	463e      	mov	r6, r7
 80039c2:	42be      	cmp	r6, r7
 80039c4:	d900      	bls.n	80039c8 <__ssputs_r+0x70>
 80039c6:	463e      	mov	r6, r7
 80039c8:	6820      	ldr	r0, [r4, #0]
 80039ca:	4632      	mov	r2, r6
 80039cc:	4641      	mov	r1, r8
 80039ce:	f000 faab 	bl	8003f28 <memmove>
 80039d2:	68a3      	ldr	r3, [r4, #8]
 80039d4:	1b9b      	subs	r3, r3, r6
 80039d6:	60a3      	str	r3, [r4, #8]
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	4433      	add	r3, r6
 80039dc:	6023      	str	r3, [r4, #0]
 80039de:	2000      	movs	r0, #0
 80039e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e4:	462a      	mov	r2, r5
 80039e6:	f000 fad7 	bl	8003f98 <_realloc_r>
 80039ea:	4606      	mov	r6, r0
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d1e0      	bne.n	80039b2 <__ssputs_r+0x5a>
 80039f0:	6921      	ldr	r1, [r4, #16]
 80039f2:	4650      	mov	r0, sl
 80039f4:	f7ff feb8 	bl	8003768 <_free_r>
 80039f8:	230c      	movs	r3, #12
 80039fa:	f8ca 3000 	str.w	r3, [sl]
 80039fe:	89a3      	ldrh	r3, [r4, #12]
 8003a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a04:	81a3      	strh	r3, [r4, #12]
 8003a06:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0a:	e7e9      	b.n	80039e0 <__ssputs_r+0x88>

08003a0c <_svfiprintf_r>:
 8003a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a10:	4698      	mov	r8, r3
 8003a12:	898b      	ldrh	r3, [r1, #12]
 8003a14:	061b      	lsls	r3, r3, #24
 8003a16:	b09d      	sub	sp, #116	; 0x74
 8003a18:	4607      	mov	r7, r0
 8003a1a:	460d      	mov	r5, r1
 8003a1c:	4614      	mov	r4, r2
 8003a1e:	d50e      	bpl.n	8003a3e <_svfiprintf_r+0x32>
 8003a20:	690b      	ldr	r3, [r1, #16]
 8003a22:	b963      	cbnz	r3, 8003a3e <_svfiprintf_r+0x32>
 8003a24:	2140      	movs	r1, #64	; 0x40
 8003a26:	f7ff ff0b 	bl	8003840 <_malloc_r>
 8003a2a:	6028      	str	r0, [r5, #0]
 8003a2c:	6128      	str	r0, [r5, #16]
 8003a2e:	b920      	cbnz	r0, 8003a3a <_svfiprintf_r+0x2e>
 8003a30:	230c      	movs	r3, #12
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	e0d0      	b.n	8003bdc <_svfiprintf_r+0x1d0>
 8003a3a:	2340      	movs	r3, #64	; 0x40
 8003a3c:	616b      	str	r3, [r5, #20]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	9309      	str	r3, [sp, #36]	; 0x24
 8003a42:	2320      	movs	r3, #32
 8003a44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a4c:	2330      	movs	r3, #48	; 0x30
 8003a4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003bf4 <_svfiprintf_r+0x1e8>
 8003a52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a56:	f04f 0901 	mov.w	r9, #1
 8003a5a:	4623      	mov	r3, r4
 8003a5c:	469a      	mov	sl, r3
 8003a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a62:	b10a      	cbz	r2, 8003a68 <_svfiprintf_r+0x5c>
 8003a64:	2a25      	cmp	r2, #37	; 0x25
 8003a66:	d1f9      	bne.n	8003a5c <_svfiprintf_r+0x50>
 8003a68:	ebba 0b04 	subs.w	fp, sl, r4
 8003a6c:	d00b      	beq.n	8003a86 <_svfiprintf_r+0x7a>
 8003a6e:	465b      	mov	r3, fp
 8003a70:	4622      	mov	r2, r4
 8003a72:	4629      	mov	r1, r5
 8003a74:	4638      	mov	r0, r7
 8003a76:	f7ff ff6f 	bl	8003958 <__ssputs_r>
 8003a7a:	3001      	adds	r0, #1
 8003a7c:	f000 80a9 	beq.w	8003bd2 <_svfiprintf_r+0x1c6>
 8003a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a82:	445a      	add	r2, fp
 8003a84:	9209      	str	r2, [sp, #36]	; 0x24
 8003a86:	f89a 3000 	ldrb.w	r3, [sl]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80a1 	beq.w	8003bd2 <_svfiprintf_r+0x1c6>
 8003a90:	2300      	movs	r3, #0
 8003a92:	f04f 32ff 	mov.w	r2, #4294967295
 8003a96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a9a:	f10a 0a01 	add.w	sl, sl, #1
 8003a9e:	9304      	str	r3, [sp, #16]
 8003aa0:	9307      	str	r3, [sp, #28]
 8003aa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003aa6:	931a      	str	r3, [sp, #104]	; 0x68
 8003aa8:	4654      	mov	r4, sl
 8003aaa:	2205      	movs	r2, #5
 8003aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ab0:	4850      	ldr	r0, [pc, #320]	; (8003bf4 <_svfiprintf_r+0x1e8>)
 8003ab2:	f7fc fb8d 	bl	80001d0 <memchr>
 8003ab6:	9a04      	ldr	r2, [sp, #16]
 8003ab8:	b9d8      	cbnz	r0, 8003af2 <_svfiprintf_r+0xe6>
 8003aba:	06d0      	lsls	r0, r2, #27
 8003abc:	bf44      	itt	mi
 8003abe:	2320      	movmi	r3, #32
 8003ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ac4:	0711      	lsls	r1, r2, #28
 8003ac6:	bf44      	itt	mi
 8003ac8:	232b      	movmi	r3, #43	; 0x2b
 8003aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ace:	f89a 3000 	ldrb.w	r3, [sl]
 8003ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ad4:	d015      	beq.n	8003b02 <_svfiprintf_r+0xf6>
 8003ad6:	9a07      	ldr	r2, [sp, #28]
 8003ad8:	4654      	mov	r4, sl
 8003ada:	2000      	movs	r0, #0
 8003adc:	f04f 0c0a 	mov.w	ip, #10
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ae6:	3b30      	subs	r3, #48	; 0x30
 8003ae8:	2b09      	cmp	r3, #9
 8003aea:	d94d      	bls.n	8003b88 <_svfiprintf_r+0x17c>
 8003aec:	b1b0      	cbz	r0, 8003b1c <_svfiprintf_r+0x110>
 8003aee:	9207      	str	r2, [sp, #28]
 8003af0:	e014      	b.n	8003b1c <_svfiprintf_r+0x110>
 8003af2:	eba0 0308 	sub.w	r3, r0, r8
 8003af6:	fa09 f303 	lsl.w	r3, r9, r3
 8003afa:	4313      	orrs	r3, r2
 8003afc:	9304      	str	r3, [sp, #16]
 8003afe:	46a2      	mov	sl, r4
 8003b00:	e7d2      	b.n	8003aa8 <_svfiprintf_r+0x9c>
 8003b02:	9b03      	ldr	r3, [sp, #12]
 8003b04:	1d19      	adds	r1, r3, #4
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	9103      	str	r1, [sp, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	bfbb      	ittet	lt
 8003b0e:	425b      	neglt	r3, r3
 8003b10:	f042 0202 	orrlt.w	r2, r2, #2
 8003b14:	9307      	strge	r3, [sp, #28]
 8003b16:	9307      	strlt	r3, [sp, #28]
 8003b18:	bfb8      	it	lt
 8003b1a:	9204      	strlt	r2, [sp, #16]
 8003b1c:	7823      	ldrb	r3, [r4, #0]
 8003b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8003b20:	d10c      	bne.n	8003b3c <_svfiprintf_r+0x130>
 8003b22:	7863      	ldrb	r3, [r4, #1]
 8003b24:	2b2a      	cmp	r3, #42	; 0x2a
 8003b26:	d134      	bne.n	8003b92 <_svfiprintf_r+0x186>
 8003b28:	9b03      	ldr	r3, [sp, #12]
 8003b2a:	1d1a      	adds	r2, r3, #4
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	9203      	str	r2, [sp, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bfb8      	it	lt
 8003b34:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b38:	3402      	adds	r4, #2
 8003b3a:	9305      	str	r3, [sp, #20]
 8003b3c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003c04 <_svfiprintf_r+0x1f8>
 8003b40:	7821      	ldrb	r1, [r4, #0]
 8003b42:	2203      	movs	r2, #3
 8003b44:	4650      	mov	r0, sl
 8003b46:	f7fc fb43 	bl	80001d0 <memchr>
 8003b4a:	b138      	cbz	r0, 8003b5c <_svfiprintf_r+0x150>
 8003b4c:	9b04      	ldr	r3, [sp, #16]
 8003b4e:	eba0 000a 	sub.w	r0, r0, sl
 8003b52:	2240      	movs	r2, #64	; 0x40
 8003b54:	4082      	lsls	r2, r0
 8003b56:	4313      	orrs	r3, r2
 8003b58:	3401      	adds	r4, #1
 8003b5a:	9304      	str	r3, [sp, #16]
 8003b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b60:	4825      	ldr	r0, [pc, #148]	; (8003bf8 <_svfiprintf_r+0x1ec>)
 8003b62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b66:	2206      	movs	r2, #6
 8003b68:	f7fc fb32 	bl	80001d0 <memchr>
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	d038      	beq.n	8003be2 <_svfiprintf_r+0x1d6>
 8003b70:	4b22      	ldr	r3, [pc, #136]	; (8003bfc <_svfiprintf_r+0x1f0>)
 8003b72:	bb1b      	cbnz	r3, 8003bbc <_svfiprintf_r+0x1b0>
 8003b74:	9b03      	ldr	r3, [sp, #12]
 8003b76:	3307      	adds	r3, #7
 8003b78:	f023 0307 	bic.w	r3, r3, #7
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	9303      	str	r3, [sp, #12]
 8003b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b82:	4433      	add	r3, r6
 8003b84:	9309      	str	r3, [sp, #36]	; 0x24
 8003b86:	e768      	b.n	8003a5a <_svfiprintf_r+0x4e>
 8003b88:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	2001      	movs	r0, #1
 8003b90:	e7a6      	b.n	8003ae0 <_svfiprintf_r+0xd4>
 8003b92:	2300      	movs	r3, #0
 8003b94:	3401      	adds	r4, #1
 8003b96:	9305      	str	r3, [sp, #20]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f04f 0c0a 	mov.w	ip, #10
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ba4:	3a30      	subs	r2, #48	; 0x30
 8003ba6:	2a09      	cmp	r2, #9
 8003ba8:	d903      	bls.n	8003bb2 <_svfiprintf_r+0x1a6>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0c6      	beq.n	8003b3c <_svfiprintf_r+0x130>
 8003bae:	9105      	str	r1, [sp, #20]
 8003bb0:	e7c4      	b.n	8003b3c <_svfiprintf_r+0x130>
 8003bb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e7f0      	b.n	8003b9e <_svfiprintf_r+0x192>
 8003bbc:	ab03      	add	r3, sp, #12
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	462a      	mov	r2, r5
 8003bc2:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <_svfiprintf_r+0x1f4>)
 8003bc4:	a904      	add	r1, sp, #16
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	f3af 8000 	nop.w
 8003bcc:	1c42      	adds	r2, r0, #1
 8003bce:	4606      	mov	r6, r0
 8003bd0:	d1d6      	bne.n	8003b80 <_svfiprintf_r+0x174>
 8003bd2:	89ab      	ldrh	r3, [r5, #12]
 8003bd4:	065b      	lsls	r3, r3, #25
 8003bd6:	f53f af2d 	bmi.w	8003a34 <_svfiprintf_r+0x28>
 8003bda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bdc:	b01d      	add	sp, #116	; 0x74
 8003bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be2:	ab03      	add	r3, sp, #12
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	462a      	mov	r2, r5
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <_svfiprintf_r+0x1f4>)
 8003bea:	a904      	add	r1, sp, #16
 8003bec:	4638      	mov	r0, r7
 8003bee:	f000 f879 	bl	8003ce4 <_printf_i>
 8003bf2:	e7eb      	b.n	8003bcc <_svfiprintf_r+0x1c0>
 8003bf4:	0800407c 	.word	0x0800407c
 8003bf8:	08004086 	.word	0x08004086
 8003bfc:	00000000 	.word	0x00000000
 8003c00:	08003959 	.word	0x08003959
 8003c04:	08004082 	.word	0x08004082

08003c08 <_printf_common>:
 8003c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c0c:	4616      	mov	r6, r2
 8003c0e:	4699      	mov	r9, r3
 8003c10:	688a      	ldr	r2, [r1, #8]
 8003c12:	690b      	ldr	r3, [r1, #16]
 8003c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bfb8      	it	lt
 8003c1c:	4613      	movlt	r3, r2
 8003c1e:	6033      	str	r3, [r6, #0]
 8003c20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c24:	4607      	mov	r7, r0
 8003c26:	460c      	mov	r4, r1
 8003c28:	b10a      	cbz	r2, 8003c2e <_printf_common+0x26>
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	6033      	str	r3, [r6, #0]
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	0699      	lsls	r1, r3, #26
 8003c32:	bf42      	ittt	mi
 8003c34:	6833      	ldrmi	r3, [r6, #0]
 8003c36:	3302      	addmi	r3, #2
 8003c38:	6033      	strmi	r3, [r6, #0]
 8003c3a:	6825      	ldr	r5, [r4, #0]
 8003c3c:	f015 0506 	ands.w	r5, r5, #6
 8003c40:	d106      	bne.n	8003c50 <_printf_common+0x48>
 8003c42:	f104 0a19 	add.w	sl, r4, #25
 8003c46:	68e3      	ldr	r3, [r4, #12]
 8003c48:	6832      	ldr	r2, [r6, #0]
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	42ab      	cmp	r3, r5
 8003c4e:	dc26      	bgt.n	8003c9e <_printf_common+0x96>
 8003c50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c54:	1e13      	subs	r3, r2, #0
 8003c56:	6822      	ldr	r2, [r4, #0]
 8003c58:	bf18      	it	ne
 8003c5a:	2301      	movne	r3, #1
 8003c5c:	0692      	lsls	r2, r2, #26
 8003c5e:	d42b      	bmi.n	8003cb8 <_printf_common+0xb0>
 8003c60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c64:	4649      	mov	r1, r9
 8003c66:	4638      	mov	r0, r7
 8003c68:	47c0      	blx	r8
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	d01e      	beq.n	8003cac <_printf_common+0xa4>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	6922      	ldr	r2, [r4, #16]
 8003c72:	f003 0306 	and.w	r3, r3, #6
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	bf02      	ittt	eq
 8003c7a:	68e5      	ldreq	r5, [r4, #12]
 8003c7c:	6833      	ldreq	r3, [r6, #0]
 8003c7e:	1aed      	subeq	r5, r5, r3
 8003c80:	68a3      	ldr	r3, [r4, #8]
 8003c82:	bf0c      	ite	eq
 8003c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c88:	2500      	movne	r5, #0
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	bfc4      	itt	gt
 8003c8e:	1a9b      	subgt	r3, r3, r2
 8003c90:	18ed      	addgt	r5, r5, r3
 8003c92:	2600      	movs	r6, #0
 8003c94:	341a      	adds	r4, #26
 8003c96:	42b5      	cmp	r5, r6
 8003c98:	d11a      	bne.n	8003cd0 <_printf_common+0xc8>
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	e008      	b.n	8003cb0 <_printf_common+0xa8>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	4652      	mov	r2, sl
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	4638      	mov	r0, r7
 8003ca6:	47c0      	blx	r8
 8003ca8:	3001      	adds	r0, #1
 8003caa:	d103      	bne.n	8003cb4 <_printf_common+0xac>
 8003cac:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb4:	3501      	adds	r5, #1
 8003cb6:	e7c6      	b.n	8003c46 <_printf_common+0x3e>
 8003cb8:	18e1      	adds	r1, r4, r3
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	2030      	movs	r0, #48	; 0x30
 8003cbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cc2:	4422      	add	r2, r4
 8003cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ccc:	3302      	adds	r3, #2
 8003cce:	e7c7      	b.n	8003c60 <_printf_common+0x58>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	4638      	mov	r0, r7
 8003cd8:	47c0      	blx	r8
 8003cda:	3001      	adds	r0, #1
 8003cdc:	d0e6      	beq.n	8003cac <_printf_common+0xa4>
 8003cde:	3601      	adds	r6, #1
 8003ce0:	e7d9      	b.n	8003c96 <_printf_common+0x8e>
	...

08003ce4 <_printf_i>:
 8003ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce8:	7e0f      	ldrb	r7, [r1, #24]
 8003cea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cec:	2f78      	cmp	r7, #120	; 0x78
 8003cee:	4691      	mov	r9, r2
 8003cf0:	4680      	mov	r8, r0
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	469a      	mov	sl, r3
 8003cf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cfa:	d807      	bhi.n	8003d0c <_printf_i+0x28>
 8003cfc:	2f62      	cmp	r7, #98	; 0x62
 8003cfe:	d80a      	bhi.n	8003d16 <_printf_i+0x32>
 8003d00:	2f00      	cmp	r7, #0
 8003d02:	f000 80d4 	beq.w	8003eae <_printf_i+0x1ca>
 8003d06:	2f58      	cmp	r7, #88	; 0x58
 8003d08:	f000 80c0 	beq.w	8003e8c <_printf_i+0x1a8>
 8003d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d14:	e03a      	b.n	8003d8c <_printf_i+0xa8>
 8003d16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d1a:	2b15      	cmp	r3, #21
 8003d1c:	d8f6      	bhi.n	8003d0c <_printf_i+0x28>
 8003d1e:	a101      	add	r1, pc, #4	; (adr r1, 8003d24 <_printf_i+0x40>)
 8003d20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d24:	08003d7d 	.word	0x08003d7d
 8003d28:	08003d91 	.word	0x08003d91
 8003d2c:	08003d0d 	.word	0x08003d0d
 8003d30:	08003d0d 	.word	0x08003d0d
 8003d34:	08003d0d 	.word	0x08003d0d
 8003d38:	08003d0d 	.word	0x08003d0d
 8003d3c:	08003d91 	.word	0x08003d91
 8003d40:	08003d0d 	.word	0x08003d0d
 8003d44:	08003d0d 	.word	0x08003d0d
 8003d48:	08003d0d 	.word	0x08003d0d
 8003d4c:	08003d0d 	.word	0x08003d0d
 8003d50:	08003e95 	.word	0x08003e95
 8003d54:	08003dbd 	.word	0x08003dbd
 8003d58:	08003e4f 	.word	0x08003e4f
 8003d5c:	08003d0d 	.word	0x08003d0d
 8003d60:	08003d0d 	.word	0x08003d0d
 8003d64:	08003eb7 	.word	0x08003eb7
 8003d68:	08003d0d 	.word	0x08003d0d
 8003d6c:	08003dbd 	.word	0x08003dbd
 8003d70:	08003d0d 	.word	0x08003d0d
 8003d74:	08003d0d 	.word	0x08003d0d
 8003d78:	08003e57 	.word	0x08003e57
 8003d7c:	682b      	ldr	r3, [r5, #0]
 8003d7e:	1d1a      	adds	r2, r3, #4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	602a      	str	r2, [r5, #0]
 8003d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e09f      	b.n	8003ed0 <_printf_i+0x1ec>
 8003d90:	6820      	ldr	r0, [r4, #0]
 8003d92:	682b      	ldr	r3, [r5, #0]
 8003d94:	0607      	lsls	r7, r0, #24
 8003d96:	f103 0104 	add.w	r1, r3, #4
 8003d9a:	6029      	str	r1, [r5, #0]
 8003d9c:	d501      	bpl.n	8003da2 <_printf_i+0xbe>
 8003d9e:	681e      	ldr	r6, [r3, #0]
 8003da0:	e003      	b.n	8003daa <_printf_i+0xc6>
 8003da2:	0646      	lsls	r6, r0, #25
 8003da4:	d5fb      	bpl.n	8003d9e <_printf_i+0xba>
 8003da6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003daa:	2e00      	cmp	r6, #0
 8003dac:	da03      	bge.n	8003db6 <_printf_i+0xd2>
 8003dae:	232d      	movs	r3, #45	; 0x2d
 8003db0:	4276      	negs	r6, r6
 8003db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003db6:	485a      	ldr	r0, [pc, #360]	; (8003f20 <_printf_i+0x23c>)
 8003db8:	230a      	movs	r3, #10
 8003dba:	e012      	b.n	8003de2 <_printf_i+0xfe>
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	6820      	ldr	r0, [r4, #0]
 8003dc0:	1d19      	adds	r1, r3, #4
 8003dc2:	6029      	str	r1, [r5, #0]
 8003dc4:	0605      	lsls	r5, r0, #24
 8003dc6:	d501      	bpl.n	8003dcc <_printf_i+0xe8>
 8003dc8:	681e      	ldr	r6, [r3, #0]
 8003dca:	e002      	b.n	8003dd2 <_printf_i+0xee>
 8003dcc:	0641      	lsls	r1, r0, #25
 8003dce:	d5fb      	bpl.n	8003dc8 <_printf_i+0xe4>
 8003dd0:	881e      	ldrh	r6, [r3, #0]
 8003dd2:	4853      	ldr	r0, [pc, #332]	; (8003f20 <_printf_i+0x23c>)
 8003dd4:	2f6f      	cmp	r7, #111	; 0x6f
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2308      	moveq	r3, #8
 8003dda:	230a      	movne	r3, #10
 8003ddc:	2100      	movs	r1, #0
 8003dde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003de2:	6865      	ldr	r5, [r4, #4]
 8003de4:	60a5      	str	r5, [r4, #8]
 8003de6:	2d00      	cmp	r5, #0
 8003de8:	bfa2      	ittt	ge
 8003dea:	6821      	ldrge	r1, [r4, #0]
 8003dec:	f021 0104 	bicge.w	r1, r1, #4
 8003df0:	6021      	strge	r1, [r4, #0]
 8003df2:	b90e      	cbnz	r6, 8003df8 <_printf_i+0x114>
 8003df4:	2d00      	cmp	r5, #0
 8003df6:	d04b      	beq.n	8003e90 <_printf_i+0x1ac>
 8003df8:	4615      	mov	r5, r2
 8003dfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8003dfe:	fb03 6711 	mls	r7, r3, r1, r6
 8003e02:	5dc7      	ldrb	r7, [r0, r7]
 8003e04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e08:	4637      	mov	r7, r6
 8003e0a:	42bb      	cmp	r3, r7
 8003e0c:	460e      	mov	r6, r1
 8003e0e:	d9f4      	bls.n	8003dfa <_printf_i+0x116>
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d10b      	bne.n	8003e2c <_printf_i+0x148>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	07de      	lsls	r6, r3, #31
 8003e18:	d508      	bpl.n	8003e2c <_printf_i+0x148>
 8003e1a:	6923      	ldr	r3, [r4, #16]
 8003e1c:	6861      	ldr	r1, [r4, #4]
 8003e1e:	4299      	cmp	r1, r3
 8003e20:	bfde      	ittt	le
 8003e22:	2330      	movle	r3, #48	; 0x30
 8003e24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e2c:	1b52      	subs	r2, r2, r5
 8003e2e:	6122      	str	r2, [r4, #16]
 8003e30:	f8cd a000 	str.w	sl, [sp]
 8003e34:	464b      	mov	r3, r9
 8003e36:	aa03      	add	r2, sp, #12
 8003e38:	4621      	mov	r1, r4
 8003e3a:	4640      	mov	r0, r8
 8003e3c:	f7ff fee4 	bl	8003c08 <_printf_common>
 8003e40:	3001      	adds	r0, #1
 8003e42:	d14a      	bne.n	8003eda <_printf_i+0x1f6>
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295
 8003e48:	b004      	add	sp, #16
 8003e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	f043 0320 	orr.w	r3, r3, #32
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	4833      	ldr	r0, [pc, #204]	; (8003f24 <_printf_i+0x240>)
 8003e58:	2778      	movs	r7, #120	; 0x78
 8003e5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	6829      	ldr	r1, [r5, #0]
 8003e62:	061f      	lsls	r7, r3, #24
 8003e64:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e68:	d402      	bmi.n	8003e70 <_printf_i+0x18c>
 8003e6a:	065f      	lsls	r7, r3, #25
 8003e6c:	bf48      	it	mi
 8003e6e:	b2b6      	uxthmi	r6, r6
 8003e70:	07df      	lsls	r7, r3, #31
 8003e72:	bf48      	it	mi
 8003e74:	f043 0320 	orrmi.w	r3, r3, #32
 8003e78:	6029      	str	r1, [r5, #0]
 8003e7a:	bf48      	it	mi
 8003e7c:	6023      	strmi	r3, [r4, #0]
 8003e7e:	b91e      	cbnz	r6, 8003e88 <_printf_i+0x1a4>
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	f023 0320 	bic.w	r3, r3, #32
 8003e86:	6023      	str	r3, [r4, #0]
 8003e88:	2310      	movs	r3, #16
 8003e8a:	e7a7      	b.n	8003ddc <_printf_i+0xf8>
 8003e8c:	4824      	ldr	r0, [pc, #144]	; (8003f20 <_printf_i+0x23c>)
 8003e8e:	e7e4      	b.n	8003e5a <_printf_i+0x176>
 8003e90:	4615      	mov	r5, r2
 8003e92:	e7bd      	b.n	8003e10 <_printf_i+0x12c>
 8003e94:	682b      	ldr	r3, [r5, #0]
 8003e96:	6826      	ldr	r6, [r4, #0]
 8003e98:	6961      	ldr	r1, [r4, #20]
 8003e9a:	1d18      	adds	r0, r3, #4
 8003e9c:	6028      	str	r0, [r5, #0]
 8003e9e:	0635      	lsls	r5, r6, #24
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	d501      	bpl.n	8003ea8 <_printf_i+0x1c4>
 8003ea4:	6019      	str	r1, [r3, #0]
 8003ea6:	e002      	b.n	8003eae <_printf_i+0x1ca>
 8003ea8:	0670      	lsls	r0, r6, #25
 8003eaa:	d5fb      	bpl.n	8003ea4 <_printf_i+0x1c0>
 8003eac:	8019      	strh	r1, [r3, #0]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	6123      	str	r3, [r4, #16]
 8003eb2:	4615      	mov	r5, r2
 8003eb4:	e7bc      	b.n	8003e30 <_printf_i+0x14c>
 8003eb6:	682b      	ldr	r3, [r5, #0]
 8003eb8:	1d1a      	adds	r2, r3, #4
 8003eba:	602a      	str	r2, [r5, #0]
 8003ebc:	681d      	ldr	r5, [r3, #0]
 8003ebe:	6862      	ldr	r2, [r4, #4]
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	f7fc f984 	bl	80001d0 <memchr>
 8003ec8:	b108      	cbz	r0, 8003ece <_printf_i+0x1ea>
 8003eca:	1b40      	subs	r0, r0, r5
 8003ecc:	6060      	str	r0, [r4, #4]
 8003ece:	6863      	ldr	r3, [r4, #4]
 8003ed0:	6123      	str	r3, [r4, #16]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ed8:	e7aa      	b.n	8003e30 <_printf_i+0x14c>
 8003eda:	6923      	ldr	r3, [r4, #16]
 8003edc:	462a      	mov	r2, r5
 8003ede:	4649      	mov	r1, r9
 8003ee0:	4640      	mov	r0, r8
 8003ee2:	47d0      	blx	sl
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	d0ad      	beq.n	8003e44 <_printf_i+0x160>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	079b      	lsls	r3, r3, #30
 8003eec:	d413      	bmi.n	8003f16 <_printf_i+0x232>
 8003eee:	68e0      	ldr	r0, [r4, #12]
 8003ef0:	9b03      	ldr	r3, [sp, #12]
 8003ef2:	4298      	cmp	r0, r3
 8003ef4:	bfb8      	it	lt
 8003ef6:	4618      	movlt	r0, r3
 8003ef8:	e7a6      	b.n	8003e48 <_printf_i+0x164>
 8003efa:	2301      	movs	r3, #1
 8003efc:	4632      	mov	r2, r6
 8003efe:	4649      	mov	r1, r9
 8003f00:	4640      	mov	r0, r8
 8003f02:	47d0      	blx	sl
 8003f04:	3001      	adds	r0, #1
 8003f06:	d09d      	beq.n	8003e44 <_printf_i+0x160>
 8003f08:	3501      	adds	r5, #1
 8003f0a:	68e3      	ldr	r3, [r4, #12]
 8003f0c:	9903      	ldr	r1, [sp, #12]
 8003f0e:	1a5b      	subs	r3, r3, r1
 8003f10:	42ab      	cmp	r3, r5
 8003f12:	dcf2      	bgt.n	8003efa <_printf_i+0x216>
 8003f14:	e7eb      	b.n	8003eee <_printf_i+0x20a>
 8003f16:	2500      	movs	r5, #0
 8003f18:	f104 0619 	add.w	r6, r4, #25
 8003f1c:	e7f5      	b.n	8003f0a <_printf_i+0x226>
 8003f1e:	bf00      	nop
 8003f20:	0800408d 	.word	0x0800408d
 8003f24:	0800409e 	.word	0x0800409e

08003f28 <memmove>:
 8003f28:	4288      	cmp	r0, r1
 8003f2a:	b510      	push	{r4, lr}
 8003f2c:	eb01 0402 	add.w	r4, r1, r2
 8003f30:	d902      	bls.n	8003f38 <memmove+0x10>
 8003f32:	4284      	cmp	r4, r0
 8003f34:	4623      	mov	r3, r4
 8003f36:	d807      	bhi.n	8003f48 <memmove+0x20>
 8003f38:	1e43      	subs	r3, r0, #1
 8003f3a:	42a1      	cmp	r1, r4
 8003f3c:	d008      	beq.n	8003f50 <memmove+0x28>
 8003f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f46:	e7f8      	b.n	8003f3a <memmove+0x12>
 8003f48:	4402      	add	r2, r0
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	428a      	cmp	r2, r1
 8003f4e:	d100      	bne.n	8003f52 <memmove+0x2a>
 8003f50:	bd10      	pop	{r4, pc}
 8003f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f5a:	e7f7      	b.n	8003f4c <memmove+0x24>

08003f5c <_sbrk_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	4d06      	ldr	r5, [pc, #24]	; (8003f78 <_sbrk_r+0x1c>)
 8003f60:	2300      	movs	r3, #0
 8003f62:	4604      	mov	r4, r0
 8003f64:	4608      	mov	r0, r1
 8003f66:	602b      	str	r3, [r5, #0]
 8003f68:	f7fc fce0 	bl	800092c <_sbrk>
 8003f6c:	1c43      	adds	r3, r0, #1
 8003f6e:	d102      	bne.n	8003f76 <_sbrk_r+0x1a>
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	b103      	cbz	r3, 8003f76 <_sbrk_r+0x1a>
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	bd38      	pop	{r3, r4, r5, pc}
 8003f78:	2000024c 	.word	0x2000024c

08003f7c <memcpy>:
 8003f7c:	440a      	add	r2, r1
 8003f7e:	4291      	cmp	r1, r2
 8003f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f84:	d100      	bne.n	8003f88 <memcpy+0xc>
 8003f86:	4770      	bx	lr
 8003f88:	b510      	push	{r4, lr}
 8003f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f92:	4291      	cmp	r1, r2
 8003f94:	d1f9      	bne.n	8003f8a <memcpy+0xe>
 8003f96:	bd10      	pop	{r4, pc}

08003f98 <_realloc_r>:
 8003f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9c:	4680      	mov	r8, r0
 8003f9e:	4614      	mov	r4, r2
 8003fa0:	460e      	mov	r6, r1
 8003fa2:	b921      	cbnz	r1, 8003fae <_realloc_r+0x16>
 8003fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa8:	4611      	mov	r1, r2
 8003faa:	f7ff bc49 	b.w	8003840 <_malloc_r>
 8003fae:	b92a      	cbnz	r2, 8003fbc <_realloc_r+0x24>
 8003fb0:	f7ff fbda 	bl	8003768 <_free_r>
 8003fb4:	4625      	mov	r5, r4
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fbc:	f000 f81b 	bl	8003ff6 <_malloc_usable_size_r>
 8003fc0:	4284      	cmp	r4, r0
 8003fc2:	4607      	mov	r7, r0
 8003fc4:	d802      	bhi.n	8003fcc <_realloc_r+0x34>
 8003fc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fca:	d812      	bhi.n	8003ff2 <_realloc_r+0x5a>
 8003fcc:	4621      	mov	r1, r4
 8003fce:	4640      	mov	r0, r8
 8003fd0:	f7ff fc36 	bl	8003840 <_malloc_r>
 8003fd4:	4605      	mov	r5, r0
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	d0ed      	beq.n	8003fb6 <_realloc_r+0x1e>
 8003fda:	42bc      	cmp	r4, r7
 8003fdc:	4622      	mov	r2, r4
 8003fde:	4631      	mov	r1, r6
 8003fe0:	bf28      	it	cs
 8003fe2:	463a      	movcs	r2, r7
 8003fe4:	f7ff ffca 	bl	8003f7c <memcpy>
 8003fe8:	4631      	mov	r1, r6
 8003fea:	4640      	mov	r0, r8
 8003fec:	f7ff fbbc 	bl	8003768 <_free_r>
 8003ff0:	e7e1      	b.n	8003fb6 <_realloc_r+0x1e>
 8003ff2:	4635      	mov	r5, r6
 8003ff4:	e7df      	b.n	8003fb6 <_realloc_r+0x1e>

08003ff6 <_malloc_usable_size_r>:
 8003ff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ffa:	1f18      	subs	r0, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bfbc      	itt	lt
 8004000:	580b      	ldrlt	r3, [r1, r0]
 8004002:	18c0      	addlt	r0, r0, r3
 8004004:	4770      	bx	lr
	...

08004008 <_init>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	bf00      	nop
 800400c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400e:	bc08      	pop	{r3}
 8004010:	469e      	mov	lr, r3
 8004012:	4770      	bx	lr

08004014 <_fini>:
 8004014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004016:	bf00      	nop
 8004018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401a:	bc08      	pop	{r3}
 800401c:	469e      	mov	lr, r3
 800401e:	4770      	bx	lr
