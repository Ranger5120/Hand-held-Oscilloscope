
devBoard_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d20  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004eac  08004eac  00014eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef4  08004ef4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004efc  08004efc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f00  08004f00  00014f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a0  2000000c  08004f10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009ac  08004f10  000209ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161fc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c84  00000000  00000000  00036238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00038ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  0003a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225b0  00000000  00000000  0003b3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001666c  00000000  00000000  0005d968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6634  00000000  00000000  00073fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a608  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005028  00000000  00000000  0014a658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004e94 	.word	0x08004e94

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004e94 	.word	0x08004e94

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d6:	463b      	mov	r3, r7
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
 80004e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004e6:	4b2a      	ldr	r3, [pc, #168]	; (8000590 <MX_ADC1_Init+0xc0>)
 80004e8:	4a2a      	ldr	r2, [pc, #168]	; (8000594 <MX_ADC1_Init+0xc4>)
 80004ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004ec:	4b28      	ldr	r3, [pc, #160]	; (8000590 <MX_ADC1_Init+0xc0>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f2:	4b27      	ldr	r3, [pc, #156]	; (8000590 <MX_ADC1_Init+0xc0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f8:	4b25      	ldr	r3, [pc, #148]	; (8000590 <MX_ADC1_Init+0xc0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004fe:	4b24      	ldr	r3, [pc, #144]	; (8000590 <MX_ADC1_Init+0xc0>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000504:	4b22      	ldr	r3, [pc, #136]	; (8000590 <MX_ADC1_Init+0xc0>)
 8000506:	2204      	movs	r2, #4
 8000508:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800050a:	4b21      	ldr	r3, [pc, #132]	; (8000590 <MX_ADC1_Init+0xc0>)
 800050c:	2200      	movs	r2, #0
 800050e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000510:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <MX_ADC1_Init+0xc0>)
 8000512:	2200      	movs	r2, #0
 8000514:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000516:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <MX_ADC1_Init+0xc0>)
 8000518:	2201      	movs	r2, #1
 800051a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800051c:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <MX_ADC1_Init+0xc0>)
 800051e:	2200      	movs	r2, #0
 8000520:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000524:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <MX_ADC1_Init+0xc0>)
 8000526:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_ADC1_Init+0xc0>)
 800052e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000532:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <MX_ADC1_Init+0xc0>)
 8000536:	2201      	movs	r2, #1
 8000538:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <MX_ADC1_Init+0xc0>)
 800053e:	2200      	movs	r2, #0
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000542:	4b13      	ldr	r3, [pc, #76]	; (8000590 <MX_ADC1_Init+0xc0>)
 8000544:	2200      	movs	r2, #0
 8000546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800054a:	4811      	ldr	r0, [pc, #68]	; (8000590 <MX_ADC1_Init+0xc0>)
 800054c:	f000 fdf8 	bl	8001140 <HAL_ADC_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000556:	f000 f9b5 	bl	80008c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_ADC1_Init+0xc8>)
 800055c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800055e:	2306      	movs	r3, #6
 8000560:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000566:	237f      	movs	r3, #127	; 0x7f
 8000568:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800056a:	2304      	movs	r3, #4
 800056c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000572:	463b      	mov	r3, r7
 8000574:	4619      	mov	r1, r3
 8000576:	4806      	ldr	r0, [pc, #24]	; (8000590 <MX_ADC1_Init+0xc0>)
 8000578:	f001 f82e 	bl	80015d8 <HAL_ADC_ConfigChannel>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000582:	f000 f99f 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000586:	bf00      	nop
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000028 	.word	0x20000028
 8000594:	50040000 	.word	0x50040000
 8000598:	19200040 	.word	0x19200040

0800059c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b09e      	sub	sp, #120	; 0x78
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	2254      	movs	r2, #84	; 0x54
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 fc61 	bl	8004e84 <memset>
  if(adcHandle->Instance==ADC1)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a3b      	ldr	r2, [pc, #236]	; (80006b4 <HAL_ADC_MspInit+0x118>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d16e      	bne.n	80006aa <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d6:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005d8:	2301      	movs	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005dc:	2301      	movs	r3, #1
 80005de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 28;
 80005e0:	231c      	movs	r3, #28
 80005e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005e4:	2307      	movs	r3, #7
 80005e6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 80005ec:	2308      	movs	r3, #8
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80005f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fa04 	bl	8003a08 <HAL_RCCEx_PeriphCLKConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000606:	f000 f95d 	bl	80008c4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800060a:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <HAL_ADC_MspInit+0x11c>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a2a      	ldr	r2, [pc, #168]	; (80006b8 <HAL_ADC_MspInit+0x11c>)
 8000610:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <HAL_ADC_MspInit+0x11c>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <HAL_ADC_MspInit+0x11c>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a24      	ldr	r2, [pc, #144]	; (80006b8 <HAL_ADC_MspInit+0x11c>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <HAL_ADC_MspInit+0x11c>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800063a:	2302      	movs	r3, #2
 800063c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800063e:	230b      	movs	r3, #11
 8000640:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800064a:	4619      	mov	r1, r3
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f002 f9ac 	bl	80029ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <HAL_ADC_MspInit+0x120>)
 8000656:	4a1a      	ldr	r2, [pc, #104]	; (80006c0 <HAL_ADC_MspInit+0x124>)
 8000658:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <HAL_ADC_MspInit+0x120>)
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000660:	4b16      	ldr	r3, [pc, #88]	; (80006bc <HAL_ADC_MspInit+0x120>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <HAL_ADC_MspInit+0x120>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <HAL_ADC_MspInit+0x120>)
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_ADC_MspInit+0x120>)
 8000674:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000678:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <HAL_ADC_MspInit+0x120>)
 800067c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000680:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <HAL_ADC_MspInit+0x120>)
 8000684:	2200      	movs	r2, #0
 8000686:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <HAL_ADC_MspInit+0x120>)
 800068a:	2200      	movs	r2, #0
 800068c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800068e:	480b      	ldr	r0, [pc, #44]	; (80006bc <HAL_ADC_MspInit+0x120>)
 8000690:	f001 ff56 	bl	8002540 <HAL_DMA_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 800069a:	f000 f913 	bl	80008c4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a06      	ldr	r2, [pc, #24]	; (80006bc <HAL_ADC_MspInit+0x120>)
 80006a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80006a4:	4a05      	ldr	r2, [pc, #20]	; (80006bc <HAL_ADC_MspInit+0x120>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006aa:	bf00      	nop
 80006ac:	3778      	adds	r7, #120	; 0x78
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	50040000 	.word	0x50040000
 80006b8:	40021000 	.word	0x40021000
 80006bc:	2000008c 	.word	0x2000008c
 80006c0:	40020008 	.word	0x40020008

080006c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_DMA_Init+0x38>)
 80006cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ce:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <MX_DMA_Init+0x38>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6493      	str	r3, [r2, #72]	; 0x48
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_DMA_Init+0x38>)
 80006d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	200b      	movs	r0, #11
 80006e8:	f001 fef3 	bl	80024d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006ec:	200b      	movs	r0, #11
 80006ee:	f001 ff0c 	bl	800250a <HAL_NVIC_EnableIRQ>

}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000

08000700 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_GPIO_Init+0x8c>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	4a1c      	ldr	r2, [pc, #112]	; (800078c <MX_GPIO_Init+0x8c>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_GPIO_Init+0x8c>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_GPIO_Init+0x8c>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a16      	ldr	r2, [pc, #88]	; (800078c <MX_GPIO_Init+0x8c>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_GPIO_Init+0x8c>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_GPIO_Init+0x8c>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a10      	ldr	r2, [pc, #64]	; (800078c <MX_GPIO_Init+0x8c>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_GPIO_Init+0x8c>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2108      	movs	r1, #8
 8000762:	480b      	ldr	r0, [pc, #44]	; (8000790 <MX_GPIO_Init+0x90>)
 8000764:	f002 fa8c 	bl	8002c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000768:	2308      	movs	r3, #8
 800076a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	4619      	mov	r1, r3
 800077e:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_GPIO_Init+0x90>)
 8000780:	f002 f914 	bl	80029ac <HAL_GPIO_Init>

}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	48000400 	.word	0x48000400

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000798:	f000 fa47 	bl	8000c2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079c:	f000 f830 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a0:	f7ff ffae 	bl	8000700 <MX_GPIO_Init>
  MX_DMA_Init();
 80007a4:	f7ff ff8e 	bl	80006c4 <MX_DMA_Init>
  MX_ADC1_Init();
 80007a8:	f7ff fe92 	bl	80004d0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80007ac:	f000 f908 	bl	80009c0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80007b0:	f000 f978 	bl	8000aa4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80007b4:	480e      	ldr	r0, [pc, #56]	; (80007f0 <main+0x5c>)
 80007b6:	f003 fc77 	bl	80040a8 <HAL_TIM_Base_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80007ba:	217f      	movs	r1, #127	; 0x7f
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <main+0x60>)
 80007be:	f001 fd4d 	bl	800225c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuf, sizeof(adcBuf));
 80007c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007c6:	490c      	ldr	r1, [pc, #48]	; (80007f8 <main+0x64>)
 80007c8:	480a      	ldr	r0, [pc, #40]	; (80007f4 <main+0x60>)
 80007ca:	f000 fe01 	bl	80013d0 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (flag == 1) {
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <main+0x68>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d1fb      	bne.n	80007ce <main+0x3a>
		flag = 0;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <main+0x68>)
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
		//perform FFT transform
		HAL_TIM_Base_Start(&htim1);
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <main+0x5c>)
 80007de:	f003 fc63 	bl	80040a8 <HAL_TIM_Base_Start>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuf, sizeof(adcBuf));
 80007e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007e6:	4904      	ldr	r1, [pc, #16]	; (80007f8 <main+0x64>)
 80007e8:	4802      	ldr	r0, [pc, #8]	; (80007f4 <main+0x60>)
 80007ea:	f000 fdf1 	bl	80013d0 <HAL_ADC_Start_DMA>
    if (flag == 1) {
 80007ee:	e7ee      	b.n	80007ce <main+0x3a>
 80007f0:	200008d8 	.word	0x200008d8
 80007f4:	20000028 	.word	0x20000028
 80007f8:	200000d8 	.word	0x200000d8
 80007fc:	200000d4 	.word	0x200000d4

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b096      	sub	sp, #88	; 0x58
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2244      	movs	r2, #68	; 0x44
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f004 fb38 	bl	8004e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	463b      	mov	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000822:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000826:	f002 fa61 	bl	8002cec <HAL_PWREx_ControlVoltageScaling>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000830:	f000 f848 	bl	80008c4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000834:	f002 fa3c 	bl	8002cb0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000838:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <SystemClock_Config+0xc0>)
 800083a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800083e:	4a20      	ldr	r2, [pc, #128]	; (80008c0 <SystemClock_Config+0xc0>)
 8000840:	f023 0318 	bic.w	r3, r3, #24
 8000844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000848:	2314      	movs	r3, #20
 800084a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800084c:	2301      	movs	r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000850:	2301      	movs	r3, #1
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000858:	2360      	movs	r3, #96	; 0x60
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085c:	2302      	movs	r3, #2
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000860:	2301      	movs	r3, #1
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000864:	2301      	movs	r3, #1
 8000866:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000868:	2310      	movs	r3, #16
 800086a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800086c:	2307      	movs	r3, #7
 800086e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000870:	2302      	movs	r3, #2
 8000872:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4618      	mov	r0, r3
 800087e:	f002 fa8b 	bl	8002d98 <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000888:	f000 f81c 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	230f      	movs	r3, #15
 800088e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2303      	movs	r3, #3
 8000892:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008a0:	463b      	mov	r3, r7
 80008a2:	2101      	movs	r1, #1
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fe8b 	bl	80035c0 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008b0:	f000 f808 	bl	80008c4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008b4:	f003 fa9e 	bl	8003df4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008b8:	bf00      	nop
 80008ba:	3758      	adds	r7, #88	; 0x58
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40021000 	.word	0x40021000

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x44>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <HAL_MspInit+0x44>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6613      	str	r3, [r2, #96]	; 0x60
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x44>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x44>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6593      	str	r3, [r2, #88]	; 0x58
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800091c:	e7fe      	b.n	800091c <NMI_Handler+0x4>

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <MemManage_Handler+0x4>

0800092a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <UsageFault_Handler+0x4>

08000936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000964:	f000 f9b6 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000970:	4806      	ldr	r0, [pc, #24]	; (800098c <DMA1_Channel1_IRQHandler+0x20>)
 8000972:	f001 ff3b 	bl	80027ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  flag = 1;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <DMA1_Channel1_IRQHandler+0x24>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Stop_DMA(&hadc1);
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <DMA1_Channel1_IRQHandler+0x28>)
 800097e:	f000 fdab 	bl	80014d8 <HAL_ADC_Stop_DMA>
  HAL_TIM_Base_Stop(&htim1);
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <DMA1_Channel1_IRQHandler+0x2c>)
 8000984:	f003 fbdc 	bl	8004140 <HAL_TIM_Base_Stop>
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2000008c 	.word	0x2000008c
 8000990:	200000d4 	.word	0x200000d4
 8000994:	20000028 	.word	0x20000028
 8000998:	200008d8 	.word	0x200008d8

0800099c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <SystemInit+0x20>)
 80009a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <SystemInit+0x20>)
 80009a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <MX_TIM1_Init+0x9c>)
 80009e0:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <MX_TIM1_Init+0xa0>)
 80009e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_TIM1_Init+0x9c>)
 80009e6:	221f      	movs	r2, #31
 80009e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MX_TIM1_Init+0x9c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_TIM1_Init+0x9c>)
 80009f2:	2209      	movs	r2, #9
 80009f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_TIM1_Init+0x9c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_TIM1_Init+0x9c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_TIM1_Init+0x9c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a08:	4814      	ldr	r0, [pc, #80]	; (8000a5c <MX_TIM1_Init+0x9c>)
 8000a0a:	f003 faf5 	bl	8003ff8 <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a14:	f7ff ff56 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	4619      	mov	r1, r3
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <MX_TIM1_Init+0x9c>)
 8000a26:	f003 fbb2 	bl	800418e <HAL_TIM_ConfigClockSource>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a30:	f7ff ff48 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a34:	2320      	movs	r3, #32
 8000a36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_TIM1_Init+0x9c>)
 8000a46:	f003 fd69 	bl	800451c <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000a50:	f7ff ff38 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3720      	adds	r7, #32
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200008d8 	.word	0x200008d8
 8000a60:	40012c00 	.word	0x40012c00

08000a64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <HAL_TIM_Base_MspInit+0x38>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d10b      	bne.n	8000a8e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_TIM_Base_MspInit+0x3c>)
 8000a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7a:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <HAL_TIM_Base_MspInit+0x3c>)
 8000a7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a80:	6613      	str	r3, [r2, #96]	; 0x60
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <HAL_TIM_Base_MspInit+0x3c>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40012c00 	.word	0x40012c00
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000aaa:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <MX_USART2_UART_Init+0x5c>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ae8:	f003 fd7e 	bl	80045e8 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000af2:	f7ff fee7 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000924 	.word	0x20000924
 8000b00:	40004400 	.word	0x40004400

08000b04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b09e      	sub	sp, #120	; 0x78
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	2254      	movs	r2, #84	; 0x54
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f004 f9ad 	bl	8004e84 <memset>
  if(uartHandle->Instance==USART2)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a28      	ldr	r2, [pc, #160]	; (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d148      	bne.n	8000bc6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4618      	mov	r0, r3
 8000b42:	f002 ff61 	bl	8003a08 <HAL_RCCEx_PeriphCLKConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b4c:	f7ff feba 	bl	80008c4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <HAL_UART_MspInit+0xd0>)
 8000b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b54:	4a1f      	ldr	r2, [pc, #124]	; (8000bd4 <HAL_UART_MspInit+0xd0>)
 8000b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <HAL_UART_MspInit+0xd0>)
 8000b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_UART_MspInit+0xd0>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6c:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <HAL_UART_MspInit+0xd0>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_UART_MspInit+0xd0>)
 8000b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b80:	2304      	movs	r3, #4
 8000b82:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b90:	2307      	movs	r3, #7
 8000b92:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f001 ff05 	bl	80029ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ba6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc2:	f001 fef3 	bl	80029ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3778      	adds	r7, #120	; 0x78
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bdc:	f7ff fede 	bl	800099c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	; (8000c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <LoopForever+0xe>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	; (8000c24 <LoopForever+0x16>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c06:	f004 f919 	bl	8004e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c0a:	f7ff fdc3 	bl	8000794 <main>

08000c0e <LoopForever>:

LoopForever:
    b LoopForever
 8000c0e:	e7fe      	b.n	8000c0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c1c:	08004f04 	.word	0x08004f04
  ldr r2, =_sbss
 8000c20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c24:	200009ac 	.word	0x200009ac

08000c28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC1_IRQHandler>

08000c2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f001 fc41 	bl	80024bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 f80e 	bl	8000c5c <HAL_InitTick>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	e001      	b.n	8000c50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c4c:	f7ff fe40 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c50:	79fb      	ldrb	r3, [r7, #7]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_InitTick+0x6c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d023      	beq.n	8000cb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <HAL_InitTick+0x70>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_InitTick+0x6c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 fc4d 	bl	8002526 <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10f      	bne.n	8000cb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d809      	bhi.n	8000cac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f001 fc17 	bl	80024d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <HAL_InitTick+0x74>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e007      	b.n	8000cbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e004      	b.n	8000cbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
 8000cb6:	e001      	b.n	8000cbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	200009a8 	.word	0x200009a8

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	200009a8 	.word	0x200009a8

08000d14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	609a      	str	r2, [r3, #8]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	3360      	adds	r3, #96	; 0x60
 8000d8e:	461a      	mov	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <LL_ADC_SetOffset+0x44>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	4313      	orrs	r3, r2
 8000dac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000db4:	bf00      	nop
 8000db6:	371c      	adds	r7, #28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	03fff000 	.word	0x03fff000

08000dc4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3360      	adds	r3, #96	; 0x60
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b087      	sub	sp, #28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	3360      	adds	r3, #96	; 0x60
 8000e00:	461a      	mov	r2, r3
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	431a      	orrs	r2, r3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e1a:	bf00      	nop
 8000e1c:	371c      	adds	r7, #28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3330      	adds	r3, #48	; 0x30
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	f003 030c 	and.w	r3, r3, #12
 8000e68:	4413      	add	r3, r2
 8000e6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	f003 031f 	and.w	r3, r3, #31
 8000e76:	211f      	movs	r1, #31
 8000e78:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	401a      	ands	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	0e9b      	lsrs	r3, r3, #26
 8000e84:	f003 011f 	and.w	r1, r3, #31
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	f003 031f 	and.w	r3, r3, #31
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	431a      	orrs	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e98:	bf00      	nop
 8000e9a:	371c      	adds	r7, #28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3314      	adds	r3, #20
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	0e5b      	lsrs	r3, r3, #25
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	4413      	add	r3, r2
 8000ec2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	0d1b      	lsrs	r3, r3, #20
 8000ecc:	f003 031f 	and.w	r3, r3, #31
 8000ed0:	2107      	movs	r1, #7
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	401a      	ands	r2, r3
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	0d1b      	lsrs	r3, r3, #20
 8000ede:	f003 031f 	and.w	r3, r3, #31
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000eee:	bf00      	nop
 8000ef0:	371c      	adds	r7, #28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f14:	43db      	mvns	r3, r3
 8000f16:	401a      	ands	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0318 	and.w	r3, r3, #24
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f20:	40d9      	lsrs	r1, r3
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	400b      	ands	r3, r1
 8000f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	0007ffff 	.word	0x0007ffff

08000f44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	6093      	str	r3, [r2, #8]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f7c:	d101      	bne.n	8000f82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000fa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fa4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000fcc:	d101      	bne.n	8000fd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ff0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ff4:	f043 0201 	orr.w	r2, r3, #1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001018:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800101c:	f043 0202 	orr.w	r2, r3, #2
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <LL_ADC_IsEnabled+0x18>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <LL_ADC_IsEnabled+0x1a>
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b02      	cmp	r3, #2
 8001068:	d101      	bne.n	800106e <LL_ADC_IsDisableOngoing+0x18>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <LL_ADC_IsDisableOngoing+0x1a>
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001090:	f043 0204 	orr.w	r2, r3, #4
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010b8:	f043 0210 	orr.w	r2, r3, #16
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d101      	bne.n	80010e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001102:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001106:	f043 0220 	orr.w	r2, r3, #32
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	2b08      	cmp	r3, #8
 800112c:	d101      	bne.n	8001132 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e12c      	b.n	80013b4 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001164:	2b00      	cmp	r3, #0
 8001166:	d109      	bne.n	800117c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff fa17 	bl	800059c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fef1 	bl	8000f68 <LL_ADC_IsDeepPowerDownEnabled>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d004      	beq.n	8001196 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fed7 	bl	8000f44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff0c 	bl	8000fb8 <LL_ADC_IsInternalRegulatorEnabled>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d115      	bne.n	80011d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fef0 	bl	8000f90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011b0:	4b82      	ldr	r3, [pc, #520]	; (80013bc <HAL_ADC_Init+0x27c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	099b      	lsrs	r3, r3, #6
 80011b6:	4a82      	ldr	r2, [pc, #520]	; (80013c0 <HAL_ADC_Init+0x280>)
 80011b8:	fba2 2303 	umull	r2, r3, r2, r3
 80011bc:	099b      	lsrs	r3, r3, #6
 80011be:	3301      	adds	r3, #1
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011c4:	e002      	b.n	80011cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f9      	bne.n	80011c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff feee 	bl	8000fb8 <LL_ADC_IsInternalRegulatorEnabled>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10d      	bne.n	80011fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e6:	f043 0210 	orr.w	r2, r3, #16
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	f043 0201 	orr.w	r2, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff62 	bl	80010cc <LL_ADC_REG_IsConversionOngoing>
 8001208:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	2b00      	cmp	r3, #0
 8001214:	f040 80c5 	bne.w	80013a2 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f040 80c1 	bne.w	80013a2 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001224:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001228:	f043 0202 	orr.w	r2, r3, #2
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fefb 	bl	8001030 <LL_ADC_IsEnabled>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10b      	bne.n	8001258 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001240:	4860      	ldr	r0, [pc, #384]	; (80013c4 <HAL_ADC_Init+0x284>)
 8001242:	f7ff fef5 	bl	8001030 <LL_ADC_IsEnabled>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d105      	bne.n	8001258 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4619      	mov	r1, r3
 8001252:	485d      	ldr	r0, [pc, #372]	; (80013c8 <HAL_ADC_Init+0x288>)
 8001254:	f7ff fd5e 	bl	8000d14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7e5b      	ldrb	r3, [r3, #25]
 800125c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001262:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001268:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800126e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001276:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d106      	bne.n	8001294 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	3b01      	subs	r3, #1
 800128c:	045b      	lsls	r3, r3, #17
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	2b00      	cmp	r3, #0
 800129a:	d009      	beq.n	80012b0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	4b45      	ldr	r3, [pc, #276]	; (80013cc <HAL_ADC_Init+0x28c>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	430b      	orrs	r3, r1
 80012c2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff feff 	bl	80010cc <LL_ADC_REG_IsConversionOngoing>
 80012ce:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff20 	bl	800111a <LL_ADC_INJ_IsConversionOngoing>
 80012da:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d13d      	bne.n	800135e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d13a      	bne.n	800135e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012ec:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012f4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001304:	f023 0302 	bic.w	r3, r3, #2
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	69b9      	ldr	r1, [r7, #24]
 800130e:	430b      	orrs	r3, r1
 8001310:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001318:	2b01      	cmp	r3, #1
 800131a:	d118      	bne.n	800134e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001326:	f023 0304 	bic.w	r3, r3, #4
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001332:	4311      	orrs	r1, r2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001338:	4311      	orrs	r1, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800133e:	430a      	orrs	r2, r1
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0201 	orr.w	r2, r2, #1
 800134a:	611a      	str	r2, [r3, #16]
 800134c:	e007      	b.n	800135e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0201 	bic.w	r2, r2, #1
 800135c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d10c      	bne.n	8001380 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f023 010f 	bic.w	r1, r3, #15
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	1e5a      	subs	r2, r3, #1
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	631a      	str	r2, [r3, #48]	; 0x30
 800137e:	e007      	b.n	8001390 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 020f 	bic.w	r2, r2, #15
 800138e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001394:	f023 0303 	bic.w	r3, r3, #3
 8001398:	f043 0201 	orr.w	r2, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	655a      	str	r2, [r3, #84]	; 0x54
 80013a0:	e007      	b.n	80013b2 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a6:	f043 0210 	orr.w	r2, r3, #16
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3720      	adds	r7, #32
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000000 	.word	0x20000000
 80013c0:	053e2d63 	.word	0x053e2d63
 80013c4:	50040000 	.word	0x50040000
 80013c8:	50040300 	.word	0x50040300
 80013cc:	fff0c007 	.word	0xfff0c007

080013d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fe73 	bl	80010cc <LL_ADC_REG_IsConversionOngoing>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d167      	bne.n	80014bc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d101      	bne.n	80013fa <HAL_ADC_Start_DMA+0x2a>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e063      	b.n	80014c2 <HAL_ADC_Start_DMA+0xf2>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 fd84 	bl	8001f10 <ADC_Enable>
 8001408:	4603      	mov	r3, r0
 800140a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d14f      	bne.n	80014b2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001416:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001436:	f023 0206 	bic.w	r2, r3, #6
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	659a      	str	r2, [r3, #88]	; 0x58
 800143e:	e002      	b.n	8001446 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2200      	movs	r2, #0
 8001444:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	4a20      	ldr	r2, [pc, #128]	; (80014cc <HAL_ADC_Start_DMA+0xfc>)
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a1f      	ldr	r2, [pc, #124]	; (80014d0 <HAL_ADC_Start_DMA+0x100>)
 8001454:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <HAL_ADC_Start_DMA+0x104>)
 800145c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	221c      	movs	r2, #28
 8001464:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 0210 	orr.w	r2, r2, #16
 800147c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0201 	orr.w	r2, r2, #1
 800148c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3340      	adds	r3, #64	; 0x40
 8001498:	4619      	mov	r1, r3
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f001 f907 	bl	80026b0 <HAL_DMA_Start_IT>
 80014a2:	4603      	mov	r3, r0
 80014a4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fde6 	bl	800107c <LL_ADC_REG_StartConversion>
 80014b0:	e006      	b.n	80014c0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80014ba:	e001      	b.n	80014c0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014bc:	2302      	movs	r3, #2
 80014be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	080020db 	.word	0x080020db
 80014d0:	080021b3 	.word	0x080021b3
 80014d4:	080021cf 	.word	0x080021cf

080014d8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_ADC_Stop_DMA+0x16>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e051      	b.n	8001592 <HAL_ADC_Stop_DMA+0xba>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80014f6:	2103      	movs	r1, #3
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fc4d 	bl	8001d98 <ADC_ConversionStop>
 80014fe:	4603      	mov	r3, r0
 8001500:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d13f      	bne.n	8001588 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d10f      	bne.n	8001546 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4618      	mov	r0, r3
 800152c:	f001 f920 	bl	8002770 <HAL_DMA_Abort>
 8001530:	4603      	mov	r3, r0
 8001532:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0210 	bic.w	r2, r2, #16
 8001554:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d105      	bne.n	8001568 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 fd5d 	bl	800201c <ADC_Disable>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]
 8001566:	e002      	b.n	800156e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 fd57 	bl	800201c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001578:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	f043 0201 	orr.w	r2, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b0b6      	sub	sp, #216	; 0xd8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x22>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e3b9      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x796>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fd60 	bl	80010cc <LL_ADC_REG_IsConversionOngoing>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	f040 839e 	bne.w	8001d50 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b05      	cmp	r3, #5
 800161a:	d824      	bhi.n	8001666 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	3b02      	subs	r3, #2
 8001622:	2b03      	cmp	r3, #3
 8001624:	d81b      	bhi.n	800165e <HAL_ADC_ConfigChannel+0x86>
 8001626:	a201      	add	r2, pc, #4	; (adr r2, 800162c <HAL_ADC_ConfigChannel+0x54>)
 8001628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162c:	0800163d 	.word	0x0800163d
 8001630:	08001645 	.word	0x08001645
 8001634:	0800164d 	.word	0x0800164d
 8001638:	08001655 	.word	0x08001655
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	220c      	movs	r2, #12
 8001640:	605a      	str	r2, [r3, #4]
          break;
 8001642:	e011      	b.n	8001668 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	2212      	movs	r2, #18
 8001648:	605a      	str	r2, [r3, #4]
          break;
 800164a:	e00d      	b.n	8001668 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2218      	movs	r2, #24
 8001650:	605a      	str	r2, [r3, #4]
          break;
 8001652:	e009      	b.n	8001668 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800165a:	605a      	str	r2, [r3, #4]
          break;
 800165c:	e004      	b.n	8001668 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2206      	movs	r2, #6
 8001662:	605a      	str	r2, [r3, #4]
          break;
 8001664:	e000      	b.n	8001668 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001666:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	6859      	ldr	r1, [r3, #4]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	f7ff fbe9 	bl	8000e4c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fd24 	bl	80010cc <LL_ADC_REG_IsConversionOngoing>
 8001684:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fd44 	bl	800111a <LL_ADC_INJ_IsConversionOngoing>
 8001692:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001696:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800169a:	2b00      	cmp	r3, #0
 800169c:	f040 81a6 	bne.w	80019ec <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f040 81a1 	bne.w	80019ec <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	6819      	ldr	r1, [r3, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	461a      	mov	r2, r3
 80016b8:	f7ff fbf4 	bl	8000ea4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	08db      	lsrs	r3, r3, #3
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d00a      	beq.n	80016f4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	6919      	ldr	r1, [r3, #16]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016ee:	f7ff fb45 	bl	8000d7c <LL_ADC_SetOffset>
 80016f2:	e17b      	b.n	80019ec <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fb62 	bl	8000dc4 <LL_ADC_GetOffsetChannel>
 8001700:	4603      	mov	r3, r0
 8001702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10a      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x148>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fb57 	bl	8000dc4 <LL_ADC_GetOffsetChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	0e9b      	lsrs	r3, r3, #26
 800171a:	f003 021f 	and.w	r2, r3, #31
 800171e:	e01e      	b.n	800175e <HAL_ADC_ConfigChannel+0x186>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fb4c 	bl	8000dc4 <LL_ADC_GetOffsetChannel>
 800172c:	4603      	mov	r3, r0
 800172e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001736:	fa93 f3a3 	rbit	r3, r3
 800173a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800173e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001742:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001746:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800174e:	2320      	movs	r3, #32
 8001750:	e004      	b.n	800175c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001752:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001756:	fab3 f383 	clz	r3, r3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001766:	2b00      	cmp	r3, #0
 8001768:	d105      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x19e>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	0e9b      	lsrs	r3, r3, #26
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	e018      	b.n	80017a8 <HAL_ADC_ConfigChannel+0x1d0>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001782:	fa93 f3a3 	rbit	r3, r3
 8001786:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800178a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800178e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001792:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800179a:	2320      	movs	r3, #32
 800179c:	e004      	b.n	80017a8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800179e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017a2:	fab3 f383 	clz	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d106      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2200      	movs	r2, #0
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fb1b 	bl	8000df0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2101      	movs	r1, #1
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff faff 	bl	8000dc4 <LL_ADC_GetOffsetChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10a      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x20e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2101      	movs	r1, #1
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff faf4 	bl	8000dc4 <LL_ADC_GetOffsetChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	0e9b      	lsrs	r3, r3, #26
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	e01e      	b.n	8001824 <HAL_ADC_ConfigChannel+0x24c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2101      	movs	r1, #1
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fae9 	bl	8000dc4 <LL_ADC_GetOffsetChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001804:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001808:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800180c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001814:	2320      	movs	r3, #32
 8001816:	e004      	b.n	8001822 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800181c:	fab3 f383 	clz	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800182c:	2b00      	cmp	r3, #0
 800182e:	d105      	bne.n	800183c <HAL_ADC_ConfigChannel+0x264>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0e9b      	lsrs	r3, r3, #26
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	e018      	b.n	800186e <HAL_ADC_ConfigChannel+0x296>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001850:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001858:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001860:	2320      	movs	r3, #32
 8001862:	e004      	b.n	800186e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800186e:	429a      	cmp	r2, r3
 8001870:	d106      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	2101      	movs	r1, #1
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fab8 	bl	8000df0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2102      	movs	r1, #2
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fa9c 	bl	8000dc4 <LL_ADC_GetOffsetChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10a      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x2d4>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2102      	movs	r1, #2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fa91 	bl	8000dc4 <LL_ADC_GetOffsetChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	0e9b      	lsrs	r3, r3, #26
 80018a6:	f003 021f 	and.w	r2, r3, #31
 80018aa:	e01e      	b.n	80018ea <HAL_ADC_ConfigChannel+0x312>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2102      	movs	r1, #2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fa86 	bl	8000dc4 <LL_ADC_GetOffsetChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018c2:	fa93 f3a3 	rbit	r3, r3
 80018c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80018ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80018d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80018da:	2320      	movs	r3, #32
 80018dc:	e004      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80018de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018e2:	fab3 f383 	clz	r3, r3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d105      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x32a>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	0e9b      	lsrs	r3, r3, #26
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	e016      	b.n	8001930 <HAL_ADC_ConfigChannel+0x358>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001914:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001916:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800191a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001922:	2320      	movs	r3, #32
 8001924:	e004      	b.n	8001930 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001926:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001930:	429a      	cmp	r2, r3
 8001932:	d106      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2200      	movs	r2, #0
 800193a:	2102      	movs	r1, #2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fa57 	bl	8000df0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2103      	movs	r1, #3
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fa3b 	bl	8000dc4 <LL_ADC_GetOffsetChannel>
 800194e:	4603      	mov	r3, r0
 8001950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10a      	bne.n	800196e <HAL_ADC_ConfigChannel+0x396>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2103      	movs	r1, #3
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fa30 	bl	8000dc4 <LL_ADC_GetOffsetChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	0e9b      	lsrs	r3, r3, #26
 8001968:	f003 021f 	and.w	r2, r3, #31
 800196c:	e017      	b.n	800199e <HAL_ADC_ConfigChannel+0x3c6>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2103      	movs	r1, #3
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fa25 	bl	8000dc4 <LL_ADC_GetOffsetChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001980:	fa93 f3a3 	rbit	r3, r3
 8001984:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001988:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800198a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001990:	2320      	movs	r3, #32
 8001992:	e003      	b.n	800199c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d105      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x3de>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	0e9b      	lsrs	r3, r3, #26
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	e011      	b.n	80019da <HAL_ADC_ConfigChannel+0x402>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80019c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80019c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80019ce:	2320      	movs	r3, #32
 80019d0:	e003      	b.n	80019da <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80019d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019da:	429a      	cmp	r2, r3
 80019dc:	d106      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2200      	movs	r2, #0
 80019e4:	2103      	movs	r1, #3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fa02 	bl	8000df0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fb1d 	bl	8001030 <LL_ADC_IsEnabled>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f040 813f 	bne.w	8001c7c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	6819      	ldr	r1, [r3, #0]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f7ff fa76 	bl	8000efc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4a8e      	ldr	r2, [pc, #568]	; (8001c50 <HAL_ADC_ConfigChannel+0x678>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	f040 8130 	bne.w	8001c7c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10b      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x46c>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0e9b      	lsrs	r3, r3, #26
 8001a32:	3301      	adds	r3, #1
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	2b09      	cmp	r3, #9
 8001a3a:	bf94      	ite	ls
 8001a3c:	2301      	movls	r3, #1
 8001a3e:	2300      	movhi	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e019      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x4a0>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a4c:	fa93 f3a3 	rbit	r3, r3
 8001a50:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a54:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001a5c:	2320      	movs	r3, #32
 8001a5e:	e003      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	2b09      	cmp	r3, #9
 8001a70:	bf94      	ite	ls
 8001a72:	2301      	movls	r3, #1
 8001a74:	2300      	movhi	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d079      	beq.n	8001b70 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d107      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x4c0>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0e9b      	lsrs	r3, r3, #26
 8001a8e:	3301      	adds	r3, #1
 8001a90:	069b      	lsls	r3, r3, #26
 8001a92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a96:	e015      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x4ec>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aa8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	e003      	b.n	8001abc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	069b      	lsls	r3, r3, #26
 8001ac0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d109      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x50c>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	0e9b      	lsrs	r3, r3, #26
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	e017      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x53c>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001afc:	2320      	movs	r3, #32
 8001afe:	e003      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	2101      	movs	r1, #1
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	ea42 0103 	orr.w	r1, r2, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10a      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x562>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0e9b      	lsrs	r3, r3, #26
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	051b      	lsls	r3, r3, #20
 8001b38:	e018      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x594>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001b52:	2320      	movs	r3, #32
 8001b54:	e003      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	e080      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d107      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x5b4>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0e9b      	lsrs	r3, r3, #26
 8001b82:	3301      	adds	r3, #1
 8001b84:	069b      	lsls	r3, r3, #26
 8001b86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b8a:	e015      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x5e0>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b94:	fa93 f3a3 	rbit	r3, r3
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001ba4:	2320      	movs	r3, #32
 8001ba6:	e003      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	069b      	lsls	r3, r3, #26
 8001bb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d109      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x600>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0e9b      	lsrs	r3, r3, #26
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	e017      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x630>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	61fb      	str	r3, [r7, #28]
  return result;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001bf0:	2320      	movs	r3, #32
 8001bf2:	e003      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f003 031f 	and.w	r3, r3, #31
 8001c02:	2101      	movs	r1, #1
 8001c04:	fa01 f303 	lsl.w	r3, r1, r3
 8001c08:	ea42 0103 	orr.w	r1, r2, r3
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10d      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x65c>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0e9b      	lsrs	r3, r3, #26
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f003 021f 	and.w	r2, r3, #31
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	3b1e      	subs	r3, #30
 8001c2c:	051b      	lsls	r3, r3, #20
 8001c2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c32:	e01d      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x698>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	613b      	str	r3, [r7, #16]
  return result;
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d103      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001c4c:	2320      	movs	r3, #32
 8001c4e:	e005      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x684>
 8001c50:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f003 021f 	and.w	r2, r3, #31
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	3b1e      	subs	r3, #30
 8001c6a:	051b      	lsls	r3, r3, #20
 8001c6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c70:	430b      	orrs	r3, r1
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	6892      	ldr	r2, [r2, #8]
 8001c76:	4619      	mov	r1, r3
 8001c78:	f7ff f914 	bl	8000ea4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_ADC_ConfigChannel+0x7a0>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d06c      	beq.n	8001d62 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c88:	483c      	ldr	r0, [pc, #240]	; (8001d7c <HAL_ADC_ConfigChannel+0x7a4>)
 8001c8a:	f7ff f869 	bl	8000d60 <LL_ADC_GetCommonPathInternalCh>
 8001c8e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a3a      	ldr	r2, [pc, #232]	; (8001d80 <HAL_ADC_ConfigChannel+0x7a8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d127      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d121      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a35      	ldr	r2, [pc, #212]	; (8001d84 <HAL_ADC_ConfigChannel+0x7ac>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d157      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cba:	4619      	mov	r1, r3
 8001cbc:	482f      	ldr	r0, [pc, #188]	; (8001d7c <HAL_ADC_ConfigChannel+0x7a4>)
 8001cbe:	f7ff f83c 	bl	8000d3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cc2:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <HAL_ADC_ConfigChannel+0x7b0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	099b      	lsrs	r3, r3, #6
 8001cc8:	4a30      	ldr	r2, [pc, #192]	; (8001d8c <HAL_ADC_ConfigChannel+0x7b4>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	099b      	lsrs	r3, r3, #6
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cdc:	e002      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f9      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cea:	e03a      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a27      	ldr	r2, [pc, #156]	; (8001d90 <HAL_ADC_ConfigChannel+0x7b8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d113      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x746>
 8001cf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10d      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <HAL_ADC_ConfigChannel+0x7ac>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d12a      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d14:	4619      	mov	r1, r3
 8001d16:	4819      	ldr	r0, [pc, #100]	; (8001d7c <HAL_ADC_ConfigChannel+0x7a4>)
 8001d18:	f7ff f80f 	bl	8000d3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d1c:	e021      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_ADC_ConfigChannel+0x7bc>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d11c      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d116      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <HAL_ADC_ConfigChannel+0x7ac>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d111      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d46:	4619      	mov	r1, r3
 8001d48:	480c      	ldr	r0, [pc, #48]	; (8001d7c <HAL_ADC_ConfigChannel+0x7a4>)
 8001d4a:	f7fe fff6 	bl	8000d3a <LL_ADC_SetCommonPathInternalCh>
 8001d4e:	e008      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d54:	f043 0220 	orr.w	r2, r3, #32
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	37d8      	adds	r7, #216	; 0xd8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	80080000 	.word	0x80080000
 8001d7c:	50040300 	.word	0x50040300
 8001d80:	c7520000 	.word	0xc7520000
 8001d84:	50040000 	.word	0x50040000
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	053e2d63 	.word	0x053e2d63
 8001d90:	cb840000 	.word	0xcb840000
 8001d94:	80000001 	.word	0x80000001

08001d98 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff f98c 	bl	80010cc <LL_ADC_REG_IsConversionOngoing>
 8001db4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f9ad 	bl	800111a <LL_ADC_INJ_IsConversionOngoing>
 8001dc0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d103      	bne.n	8001dd0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8098 	beq.w	8001f00 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d02a      	beq.n	8001e34 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7e5b      	ldrb	r3, [r3, #25]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d126      	bne.n	8001e34 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7e1b      	ldrb	r3, [r3, #24]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d122      	bne.n	8001e34 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001df2:	e014      	b.n	8001e1e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	4a45      	ldr	r2, [pc, #276]	; (8001f0c <ADC_ConversionStop+0x174>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d90d      	bls.n	8001e18 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e00:	f043 0210 	orr.w	r2, r3, #16
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	f043 0201 	orr.w	r2, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e074      	b.n	8001f02 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e28:	2b40      	cmp	r3, #64	; 0x40
 8001e2a:	d1e3      	bne.n	8001df4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2240      	movs	r2, #64	; 0x40
 8001e32:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d014      	beq.n	8001e64 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f944 	bl	80010cc <LL_ADC_REG_IsConversionOngoing>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00c      	beq.n	8001e64 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff f901 	bl	8001056 <LL_ADC_IsDisableOngoing>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d104      	bne.n	8001e64 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f920 	bl	80010a4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d014      	beq.n	8001e94 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff f953 	bl	800111a <LL_ADC_INJ_IsConversionOngoing>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00c      	beq.n	8001e94 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff f8e9 	bl	8001056 <LL_ADC_IsDisableOngoing>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d104      	bne.n	8001e94 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f92f 	bl	80010f2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d005      	beq.n	8001ea6 <ADC_ConversionStop+0x10e>
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d105      	bne.n	8001eac <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001ea0:	230c      	movs	r3, #12
 8001ea2:	617b      	str	r3, [r7, #20]
        break;
 8001ea4:	e005      	b.n	8001eb2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	617b      	str	r3, [r7, #20]
        break;
 8001eaa:	e002      	b.n	8001eb2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001eac:	2304      	movs	r3, #4
 8001eae:	617b      	str	r3, [r7, #20]
        break;
 8001eb0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001eb2:	f7fe ff23 	bl	8000cfc <HAL_GetTick>
 8001eb6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001eb8:	e01b      	b.n	8001ef2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001eba:	f7fe ff1f 	bl	8000cfc <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b05      	cmp	r3, #5
 8001ec6:	d914      	bls.n	8001ef2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00d      	beq.n	8001ef2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	f043 0210 	orr.w	r2, r3, #16
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e007      	b.n	8001f02 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1dc      	bne.n	8001eba <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3720      	adds	r7, #32
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	a33fffff 	.word	0xa33fffff

08001f10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff f885 	bl	8001030 <LL_ADC_IsEnabled>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d169      	bne.n	8002000 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	4b36      	ldr	r3, [pc, #216]	; (800200c <ADC_Enable+0xfc>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00d      	beq.n	8001f56 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	f043 0210 	orr.w	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	f043 0201 	orr.w	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e055      	b.n	8002002 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f840 	bl	8000fe0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f60:	482b      	ldr	r0, [pc, #172]	; (8002010 <ADC_Enable+0x100>)
 8001f62:	f7fe fefd 	bl	8000d60 <LL_ADC_GetCommonPathInternalCh>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d013      	beq.n	8001f98 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f70:	4b28      	ldr	r3, [pc, #160]	; (8002014 <ADC_Enable+0x104>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	099b      	lsrs	r3, r3, #6
 8001f76:	4a28      	ldr	r2, [pc, #160]	; (8002018 <ADC_Enable+0x108>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	099b      	lsrs	r3, r3, #6
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001f8a:	e002      	b.n	8001f92 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f9      	bne.n	8001f8c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f98:	f7fe feb0 	bl	8000cfc <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f9e:	e028      	b.n	8001ff2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f843 	bl	8001030 <LL_ADC_IsEnabled>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d104      	bne.n	8001fba <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f813 	bl	8000fe0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fba:	f7fe fe9f 	bl	8000cfc <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d914      	bls.n	8001ff2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d00d      	beq.n	8001ff2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	f043 0210 	orr.w	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e007      	b.n	8002002 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d1cf      	bne.n	8001fa0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	8000003f 	.word	0x8000003f
 8002010:	50040300 	.word	0x50040300
 8002014:	20000000 	.word	0x20000000
 8002018:	053e2d63 	.word	0x053e2d63

0800201c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff f814 	bl	8001056 <LL_ADC_IsDisableOngoing>
 800202e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fffb 	bl	8001030 <LL_ADC_IsEnabled>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d047      	beq.n	80020d0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d144      	bne.n	80020d0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 030d 	and.w	r3, r3, #13
 8002050:	2b01      	cmp	r3, #1
 8002052:	d10c      	bne.n	800206e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe ffd5 	bl	8001008 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2203      	movs	r2, #3
 8002064:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002066:	f7fe fe49 	bl	8000cfc <HAL_GetTick>
 800206a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800206c:	e029      	b.n	80020c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	f043 0210 	orr.w	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e023      	b.n	80020d2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800208a:	f7fe fe37 	bl	8000cfc <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d914      	bls.n	80020c2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00d      	beq.n	80020c2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	f043 0210 	orr.w	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e007      	b.n	80020d2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1dc      	bne.n	800208a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d14b      	bne.n	800218c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d021      	beq.n	8002152 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fe87 	bl	8000e26 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d032      	beq.n	8002184 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d12b      	bne.n	8002184 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002130:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d11f      	bne.n	8002184 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002148:	f043 0201 	orr.w	r2, r3, #1
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	655a      	str	r2, [r3, #84]	; 0x54
 8002150:	e018      	b.n	8002184 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d111      	bne.n	8002184 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002164:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217c:	f043 0201 	orr.w	r2, r3, #1
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f7ff fa08 	bl	800159a <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800218a:	e00e      	b.n	80021aa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f7ff fa12 	bl	80015c2 <HAL_ADC_ErrorCallback>
}
 800219e:	e004      	b.n	80021aa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	4798      	blx	r3
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7ff f9f4 	bl	80015ae <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	f043 0204 	orr.w	r2, r3, #4
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f7ff f9e4 	bl	80015c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <LL_ADC_StartCalibration>:
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002214:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800221e:	4313      	orrs	r3, r2
 8002220:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	609a      	str	r2, [r3, #8]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_ADC_IsCalibrationOnGoing>:
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002248:	d101      	bne.n	800224e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_ADCEx_Calibration_Start+0x1c>
 8002274:	2302      	movs	r3, #2
 8002276:	e04d      	b.n	8002314 <HAL_ADCEx_Calibration_Start+0xb8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fecb 	bl	800201c <ADC_Disable>
 8002286:	4603      	mov	r3, r0
 8002288:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d136      	bne.n	80022fe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002294:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002298:	f023 0302 	bic.w	r3, r3, #2
 800229c:	f043 0202 	orr.w	r2, r3, #2
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6839      	ldr	r1, [r7, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ffa9 	bl	8002202 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80022b0:	e014      	b.n	80022dc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3301      	adds	r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80022be:	d30d      	bcc.n	80022dc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c4:	f023 0312 	bic.w	r3, r3, #18
 80022c8:	f043 0210 	orr.w	r2, r3, #16
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e01b      	b.n	8002314 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ffa7 	bl	8002234 <LL_ADC_IsCalibrationOnGoing>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1e2      	bne.n	80022b2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f0:	f023 0303 	bic.w	r3, r3, #3
 80022f4:	f043 0201 	orr.w	r2, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	655a      	str	r2, [r3, #84]	; 0x54
 80022fc:	e005      	b.n	800230a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	f043 0210 	orr.w	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <__NVIC_SetPriorityGrouping+0x44>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002338:	4013      	ands	r3, r2
 800233a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800234c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234e:	4a04      	ldr	r2, [pc, #16]	; (8002360 <__NVIC_SetPriorityGrouping+0x44>)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	60d3      	str	r3, [r2, #12]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <__NVIC_GetPriorityGrouping+0x18>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	f003 0307 	and.w	r3, r3, #7
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	2b00      	cmp	r3, #0
 8002390:	db0b      	blt.n	80023aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	f003 021f 	and.w	r2, r3, #31
 8002398:	4907      	ldr	r1, [pc, #28]	; (80023b8 <__NVIC_EnableIRQ+0x38>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	2001      	movs	r0, #1
 80023a2:	fa00 f202 	lsl.w	r2, r0, r2
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000e100 	.word	0xe000e100

080023bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	db0a      	blt.n	80023e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	490c      	ldr	r1, [pc, #48]	; (8002408 <__NVIC_SetPriority+0x4c>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	0112      	lsls	r2, r2, #4
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	440b      	add	r3, r1
 80023e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e4:	e00a      	b.n	80023fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4908      	ldr	r1, [pc, #32]	; (800240c <__NVIC_SetPriority+0x50>)
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	3b04      	subs	r3, #4
 80023f4:	0112      	lsls	r2, r2, #4
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	440b      	add	r3, r1
 80023fa:	761a      	strb	r2, [r3, #24]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000e100 	.word	0xe000e100
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f1c3 0307 	rsb	r3, r3, #7
 800242a:	2b04      	cmp	r3, #4
 800242c:	bf28      	it	cs
 800242e:	2304      	movcs	r3, #4
 8002430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3304      	adds	r3, #4
 8002436:	2b06      	cmp	r3, #6
 8002438:	d902      	bls.n	8002440 <NVIC_EncodePriority+0x30>
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3b03      	subs	r3, #3
 800243e:	e000      	b.n	8002442 <NVIC_EncodePriority+0x32>
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	f04f 32ff 	mov.w	r2, #4294967295
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	401a      	ands	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002458:	f04f 31ff 	mov.w	r1, #4294967295
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	43d9      	mvns	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	4313      	orrs	r3, r2
         );
}
 800246a:	4618      	mov	r0, r3
 800246c:	3724      	adds	r7, #36	; 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002488:	d301      	bcc.n	800248e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800248a:	2301      	movs	r3, #1
 800248c:	e00f      	b.n	80024ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <SysTick_Config+0x40>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002496:	210f      	movs	r1, #15
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f7ff ff8e 	bl	80023bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <SysTick_Config+0x40>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a6:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <SysTick_Config+0x40>)
 80024a8:	2207      	movs	r2, #7
 80024aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	e000e010 	.word	0xe000e010

080024bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff29 	bl	800231c <__NVIC_SetPriorityGrouping>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024e4:	f7ff ff3e 	bl	8002364 <__NVIC_GetPriorityGrouping>
 80024e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	6978      	ldr	r0, [r7, #20]
 80024f0:	f7ff ff8e 	bl	8002410 <NVIC_EncodePriority>
 80024f4:	4602      	mov	r2, r0
 80024f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff5d 	bl	80023bc <__NVIC_SetPriority>
}
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	4603      	mov	r3, r0
 8002512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff31 	bl	8002380 <__NVIC_EnableIRQ>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff ffa2 	bl	8002478 <SysTick_Config>
 8002534:	4603      	mov	r3, r0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e098      	b.n	8002684 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	4b4d      	ldr	r3, [pc, #308]	; (8002690 <HAL_DMA_Init+0x150>)
 800255a:	429a      	cmp	r2, r3
 800255c:	d80f      	bhi.n	800257e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	4b4b      	ldr	r3, [pc, #300]	; (8002694 <HAL_DMA_Init+0x154>)
 8002566:	4413      	add	r3, r2
 8002568:	4a4b      	ldr	r2, [pc, #300]	; (8002698 <HAL_DMA_Init+0x158>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	009a      	lsls	r2, r3, #2
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a48      	ldr	r2, [pc, #288]	; (800269c <HAL_DMA_Init+0x15c>)
 800257a:	641a      	str	r2, [r3, #64]	; 0x40
 800257c:	e00e      	b.n	800259c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	4b46      	ldr	r3, [pc, #280]	; (80026a0 <HAL_DMA_Init+0x160>)
 8002586:	4413      	add	r3, r2
 8002588:	4a43      	ldr	r2, [pc, #268]	; (8002698 <HAL_DMA_Init+0x158>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	009a      	lsls	r2, r3, #2
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a42      	ldr	r2, [pc, #264]	; (80026a4 <HAL_DMA_Init+0x164>)
 800259a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80025b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025f6:	d039      	beq.n	800266c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	4a27      	ldr	r2, [pc, #156]	; (800269c <HAL_DMA_Init+0x15c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d11a      	bne.n	8002638 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002602:	4b29      	ldr	r3, [pc, #164]	; (80026a8 <HAL_DMA_Init+0x168>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	f003 031c 	and.w	r3, r3, #28
 800260e:	210f      	movs	r1, #15
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	4924      	ldr	r1, [pc, #144]	; (80026a8 <HAL_DMA_Init+0x168>)
 8002618:	4013      	ands	r3, r2
 800261a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800261c:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <HAL_DMA_Init+0x168>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6859      	ldr	r1, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002628:	f003 031c 	and.w	r3, r3, #28
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	491d      	ldr	r1, [pc, #116]	; (80026a8 <HAL_DMA_Init+0x168>)
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]
 8002636:	e019      	b.n	800266c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002638:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <HAL_DMA_Init+0x16c>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002640:	f003 031c 	and.w	r3, r3, #28
 8002644:	210f      	movs	r1, #15
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	4917      	ldr	r1, [pc, #92]	; (80026ac <HAL_DMA_Init+0x16c>)
 800264e:	4013      	ands	r3, r2
 8002650:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <HAL_DMA_Init+0x16c>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f003 031c 	and.w	r3, r3, #28
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	4911      	ldr	r1, [pc, #68]	; (80026ac <HAL_DMA_Init+0x16c>)
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40020407 	.word	0x40020407
 8002694:	bffdfff8 	.word	0xbffdfff8
 8002698:	cccccccd 	.word	0xcccccccd
 800269c:	40020000 	.word	0x40020000
 80026a0:	bffdfbf8 	.word	0xbffdfbf8
 80026a4:	40020400 	.word	0x40020400
 80026a8:	400200a8 	.word	0x400200a8
 80026ac:	400204a8 	.word	0x400204a8

080026b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_DMA_Start_IT+0x20>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e04b      	b.n	8002768 <HAL_DMA_Start_IT+0xb8>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d13a      	bne.n	800275a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	68b9      	ldr	r1, [r7, #8]
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 f91e 	bl	800294a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 020e 	orr.w	r2, r2, #14
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e00f      	b.n	8002748 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0204 	bic.w	r2, r2, #4
 8002736:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 020a 	orr.w	r2, r2, #10
 8002746:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	e005      	b.n	8002766 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002762:	2302      	movs	r3, #2
 8002764:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002766:	7dfb      	ldrb	r3, [r7, #23]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d008      	beq.n	800279a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2204      	movs	r2, #4
 800278c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e022      	b.n	80027e0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 020e 	bic.w	r2, r2, #14
 80027a8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0201 	bic.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f003 021c 	and.w	r2, r3, #28
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2101      	movs	r1, #1
 80027c8:	fa01 f202 	lsl.w	r2, r1, r2
 80027cc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002808:	f003 031c 	and.w	r3, r3, #28
 800280c:	2204      	movs	r2, #4
 800280e:	409a      	lsls	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d026      	beq.n	8002866 <HAL_DMA_IRQHandler+0x7a>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d021      	beq.n	8002866 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b00      	cmp	r3, #0
 800282e:	d107      	bne.n	8002840 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0204 	bic.w	r2, r2, #4
 800283e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	f003 021c 	and.w	r2, r3, #28
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	2104      	movs	r1, #4
 800284e:	fa01 f202 	lsl.w	r2, r1, r2
 8002852:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	2b00      	cmp	r3, #0
 800285a:	d071      	beq.n	8002940 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002864:	e06c      	b.n	8002940 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f003 031c 	and.w	r3, r3, #28
 800286e:	2202      	movs	r2, #2
 8002870:	409a      	lsls	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d02e      	beq.n	80028d8 <HAL_DMA_IRQHandler+0xec>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d029      	beq.n	80028d8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10b      	bne.n	80028aa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 020a 	bic.w	r2, r2, #10
 80028a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f003 021c 	and.w	r2, r3, #28
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2102      	movs	r1, #2
 80028b8:	fa01 f202 	lsl.w	r2, r1, r2
 80028bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d038      	beq.n	8002940 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80028d6:	e033      	b.n	8002940 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	f003 031c 	and.w	r3, r3, #28
 80028e0:	2208      	movs	r2, #8
 80028e2:	409a      	lsls	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d02a      	beq.n	8002942 <HAL_DMA_IRQHandler+0x156>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d025      	beq.n	8002942 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 020e 	bic.w	r2, r2, #14
 8002904:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f003 021c 	and.w	r2, r3, #28
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	2101      	movs	r1, #1
 8002914:	fa01 f202 	lsl.w	r2, r1, r2
 8002918:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002934:	2b00      	cmp	r3, #0
 8002936:	d004      	beq.n	8002942 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002940:	bf00      	nop
 8002942:	bf00      	nop
}
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295c:	f003 021c 	and.w	r2, r3, #28
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	2101      	movs	r1, #1
 8002966:	fa01 f202 	lsl.w	r2, r1, r2
 800296a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b10      	cmp	r3, #16
 800297a:	d108      	bne.n	800298e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800298c:	e007      	b.n	800299e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	60da      	str	r2, [r3, #12]
}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ba:	e148      	b.n	8002c4e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	2101      	movs	r1, #1
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	4013      	ands	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 813a 	beq.w	8002c48 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d005      	beq.n	80029ec <HAL_GPIO_Init+0x40>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d130      	bne.n	8002a4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2203      	movs	r2, #3
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a22:	2201      	movs	r2, #1
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	f003 0201 	and.w	r2, r3, #1
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d017      	beq.n	8002a8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	2203      	movs	r2, #3
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d123      	bne.n	8002ade <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	08da      	lsrs	r2, r3, #3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3208      	adds	r2, #8
 8002a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	220f      	movs	r2, #15
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	08da      	lsrs	r2, r3, #3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3208      	adds	r2, #8
 8002ad8:	6939      	ldr	r1, [r7, #16]
 8002ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	2203      	movs	r2, #3
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0203 	and.w	r2, r3, #3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 8094 	beq.w	8002c48 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b20:	4b52      	ldr	r3, [pc, #328]	; (8002c6c <HAL_GPIO_Init+0x2c0>)
 8002b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b24:	4a51      	ldr	r2, [pc, #324]	; (8002c6c <HAL_GPIO_Init+0x2c0>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6613      	str	r3, [r2, #96]	; 0x60
 8002b2c:	4b4f      	ldr	r3, [pc, #316]	; (8002c6c <HAL_GPIO_Init+0x2c0>)
 8002b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b38:	4a4d      	ldr	r2, [pc, #308]	; (8002c70 <HAL_GPIO_Init+0x2c4>)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	3302      	adds	r3, #2
 8002b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	220f      	movs	r2, #15
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b62:	d00d      	beq.n	8002b80 <HAL_GPIO_Init+0x1d4>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a43      	ldr	r2, [pc, #268]	; (8002c74 <HAL_GPIO_Init+0x2c8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d007      	beq.n	8002b7c <HAL_GPIO_Init+0x1d0>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a42      	ldr	r2, [pc, #264]	; (8002c78 <HAL_GPIO_Init+0x2cc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d101      	bne.n	8002b78 <HAL_GPIO_Init+0x1cc>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e004      	b.n	8002b82 <HAL_GPIO_Init+0x1d6>
 8002b78:	2307      	movs	r3, #7
 8002b7a:	e002      	b.n	8002b82 <HAL_GPIO_Init+0x1d6>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <HAL_GPIO_Init+0x1d6>
 8002b80:	2300      	movs	r3, #0
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	f002 0203 	and.w	r2, r2, #3
 8002b88:	0092      	lsls	r2, r2, #2
 8002b8a:	4093      	lsls	r3, r2
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b92:	4937      	ldr	r1, [pc, #220]	; (8002c70 <HAL_GPIO_Init+0x2c4>)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	3302      	adds	r3, #2
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ba0:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bc4:	4a2d      	ldr	r2, [pc, #180]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bca:	4b2c      	ldr	r3, [pc, #176]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bee:	4a23      	ldr	r2, [pc, #140]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bf4:	4b21      	ldr	r3, [pc, #132]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4013      	ands	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c18:	4a18      	ldr	r2, [pc, #96]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c1e:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c42:	4a0e      	ldr	r2, [pc, #56]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f47f aeaf 	bne.w	80029bc <HAL_GPIO_Init+0x10>
  }
}
 8002c5e:	bf00      	nop
 8002c60:	bf00      	nop
 8002c62:	371c      	adds	r7, #28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40010000 	.word	0x40010000
 8002c74:	48000400 	.word	0x48000400
 8002c78:	48000800 	.word	0x48000800
 8002c7c:	40010400 	.word	0x40010400

08002c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c90:	787b      	ldrb	r3, [r7, #1]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c96:	887a      	ldrh	r2, [r7, #2]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c9c:	e002      	b.n	8002ca4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c9e:	887a      	ldrh	r2, [r7, #2]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cbe:	6013      	str	r3, [r2, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40007000 	.word	0x40007000

08002cd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40007000 	.word	0x40007000

08002cec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfa:	d130      	bne.n	8002d5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cfc:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d08:	d038      	beq.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d0a:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d12:	4a1e      	ldr	r2, [pc, #120]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d1a:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2232      	movs	r2, #50	; 0x32
 8002d20:	fb02 f303 	mul.w	r3, r2, r3
 8002d24:	4a1b      	ldr	r2, [pc, #108]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	0c9b      	lsrs	r3, r3, #18
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d30:	e002      	b.n	8002d38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d38:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d44:	d102      	bne.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f2      	bne.n	8002d32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d58:	d110      	bne.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e00f      	b.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6a:	d007      	beq.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d6c:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d74:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	20000000 	.word	0x20000000
 8002d94:	431bde83 	.word	0x431bde83

08002d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d102      	bne.n	8002dac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	f000 bc02 	b.w	80035b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dac:	4b96      	ldr	r3, [pc, #600]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 030c 	and.w	r3, r3, #12
 8002db4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db6:	4b94      	ldr	r3, [pc, #592]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80e4 	beq.w	8002f96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d007      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4c>
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	f040 808b 	bne.w	8002ef2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	f040 8087 	bne.w	8002ef2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002de4:	4b88      	ldr	r3, [pc, #544]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_OscConfig+0x64>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e3d9      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1a      	ldr	r2, [r3, #32]
 8002e00:	4b81      	ldr	r3, [pc, #516]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d004      	beq.n	8002e16 <HAL_RCC_OscConfig+0x7e>
 8002e0c:	4b7e      	ldr	r3, [pc, #504]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e14:	e005      	b.n	8002e22 <HAL_RCC_OscConfig+0x8a>
 8002e16:	4b7c      	ldr	r3, [pc, #496]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d223      	bcs.n	8002e6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fd8c 	bl	8003948 <RCC_SetFlashLatencyFromMSIRange>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e3ba      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e3a:	4b73      	ldr	r3, [pc, #460]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a72      	ldr	r2, [pc, #456]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002e40:	f043 0308 	orr.w	r3, r3, #8
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	4b70      	ldr	r3, [pc, #448]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	496d      	ldr	r1, [pc, #436]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e58:	4b6b      	ldr	r3, [pc, #428]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	4968      	ldr	r1, [pc, #416]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
 8002e6c:	e025      	b.n	8002eba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e6e:	4b66      	ldr	r3, [pc, #408]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a65      	ldr	r2, [pc, #404]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002e74:	f043 0308 	orr.w	r3, r3, #8
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	4b63      	ldr	r3, [pc, #396]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4960      	ldr	r1, [pc, #384]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e8c:	4b5e      	ldr	r3, [pc, #376]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	495b      	ldr	r1, [pc, #364]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d109      	bne.n	8002eba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fd4c 	bl	8003948 <RCC_SetFlashLatencyFromMSIRange>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e37a      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eba:	f000 fc81 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	4b51      	ldr	r3, [pc, #324]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	4950      	ldr	r1, [pc, #320]	; (800300c <HAL_RCC_OscConfig+0x274>)
 8002ecc:	5ccb      	ldrb	r3, [r1, r3]
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed6:	4a4e      	ldr	r2, [pc, #312]	; (8003010 <HAL_RCC_OscConfig+0x278>)
 8002ed8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002eda:	4b4e      	ldr	r3, [pc, #312]	; (8003014 <HAL_RCC_OscConfig+0x27c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd febc 	bl	8000c5c <HAL_InitTick>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d052      	beq.n	8002f94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	e35e      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d032      	beq.n	8002f60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002efa:	4b43      	ldr	r3, [pc, #268]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a42      	ldr	r2, [pc, #264]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f06:	f7fd fef9 	bl	8000cfc <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f0e:	f7fd fef5 	bl	8000cfc <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e347      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f20:	4b39      	ldr	r3, [pc, #228]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f2c:	4b36      	ldr	r3, [pc, #216]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a35      	ldr	r2, [pc, #212]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002f32:	f043 0308 	orr.w	r3, r3, #8
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b33      	ldr	r3, [pc, #204]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	4930      	ldr	r1, [pc, #192]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f4a:	4b2f      	ldr	r3, [pc, #188]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	492b      	ldr	r1, [pc, #172]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
 8002f5e:	e01a      	b.n	8002f96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f60:	4b29      	ldr	r3, [pc, #164]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a28      	ldr	r2, [pc, #160]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002f66:	f023 0301 	bic.w	r3, r3, #1
 8002f6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f6c:	f7fd fec6 	bl	8000cfc <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f74:	f7fd fec2 	bl	8000cfc <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e314      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f86:	4b20      	ldr	r3, [pc, #128]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x1dc>
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d073      	beq.n	800308a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x21c>
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d10e      	bne.n	8002fcc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d10b      	bne.n	8002fcc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb4:	4b14      	ldr	r3, [pc, #80]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d063      	beq.n	8003088 <HAL_RCC_OscConfig+0x2f0>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d15f      	bne.n	8003088 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e2f1      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd4:	d106      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x24c>
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a0b      	ldr	r2, [pc, #44]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	e025      	b.n	8003030 <HAL_RCC_OscConfig+0x298>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fec:	d114      	bne.n	8003018 <HAL_RCC_OscConfig+0x280>
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a05      	ldr	r2, [pc, #20]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	4b03      	ldr	r3, [pc, #12]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a02      	ldr	r2, [pc, #8]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8003000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e013      	b.n	8003030 <HAL_RCC_OscConfig+0x298>
 8003008:	40021000 	.word	0x40021000
 800300c:	08004eac 	.word	0x08004eac
 8003010:	20000000 	.word	0x20000000
 8003014:	20000004 	.word	0x20000004
 8003018:	4ba0      	ldr	r3, [pc, #640]	; (800329c <HAL_RCC_OscConfig+0x504>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a9f      	ldr	r2, [pc, #636]	; (800329c <HAL_RCC_OscConfig+0x504>)
 800301e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b9d      	ldr	r3, [pc, #628]	; (800329c <HAL_RCC_OscConfig+0x504>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a9c      	ldr	r2, [pc, #624]	; (800329c <HAL_RCC_OscConfig+0x504>)
 800302a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d013      	beq.n	8003060 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fd fe60 	bl	8000cfc <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003040:	f7fd fe5c 	bl	8000cfc <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b64      	cmp	r3, #100	; 0x64
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e2ae      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003052:	4b92      	ldr	r3, [pc, #584]	; (800329c <HAL_RCC_OscConfig+0x504>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x2a8>
 800305e:	e014      	b.n	800308a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fd fe4c 	bl	8000cfc <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003068:	f7fd fe48 	bl	8000cfc <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e29a      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800307a:	4b88      	ldr	r3, [pc, #544]	; (800329c <HAL_RCC_OscConfig+0x504>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x2d0>
 8003086:	e000      	b.n	800308a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d060      	beq.n	8003158 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2b04      	cmp	r3, #4
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_OscConfig+0x310>
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2b0c      	cmp	r3, #12
 80030a0:	d119      	bne.n	80030d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d116      	bne.n	80030d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a8:	4b7c      	ldr	r3, [pc, #496]	; (800329c <HAL_RCC_OscConfig+0x504>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_OscConfig+0x328>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e277      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c0:	4b76      	ldr	r3, [pc, #472]	; (800329c <HAL_RCC_OscConfig+0x504>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	4973      	ldr	r1, [pc, #460]	; (800329c <HAL_RCC_OscConfig+0x504>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d4:	e040      	b.n	8003158 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d023      	beq.n	8003126 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030de:	4b6f      	ldr	r3, [pc, #444]	; (800329c <HAL_RCC_OscConfig+0x504>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a6e      	ldr	r2, [pc, #440]	; (800329c <HAL_RCC_OscConfig+0x504>)
 80030e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fd fe07 	bl	8000cfc <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f2:	f7fd fe03 	bl	8000cfc <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e255      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003104:	4b65      	ldr	r3, [pc, #404]	; (800329c <HAL_RCC_OscConfig+0x504>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003110:	4b62      	ldr	r3, [pc, #392]	; (800329c <HAL_RCC_OscConfig+0x504>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	061b      	lsls	r3, r3, #24
 800311e:	495f      	ldr	r1, [pc, #380]	; (800329c <HAL_RCC_OscConfig+0x504>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
 8003124:	e018      	b.n	8003158 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003126:	4b5d      	ldr	r3, [pc, #372]	; (800329c <HAL_RCC_OscConfig+0x504>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a5c      	ldr	r2, [pc, #368]	; (800329c <HAL_RCC_OscConfig+0x504>)
 800312c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003132:	f7fd fde3 	bl	8000cfc <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800313a:	f7fd fddf 	bl	8000cfc <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e231      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800314c:	4b53      	ldr	r3, [pc, #332]	; (800329c <HAL_RCC_OscConfig+0x504>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f0      	bne.n	800313a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d03c      	beq.n	80031de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01c      	beq.n	80031a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316c:	4b4b      	ldr	r3, [pc, #300]	; (800329c <HAL_RCC_OscConfig+0x504>)
 800316e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003172:	4a4a      	ldr	r2, [pc, #296]	; (800329c <HAL_RCC_OscConfig+0x504>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317c:	f7fd fdbe 	bl	8000cfc <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003184:	f7fd fdba 	bl	8000cfc <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e20c      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003196:	4b41      	ldr	r3, [pc, #260]	; (800329c <HAL_RCC_OscConfig+0x504>)
 8003198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0ef      	beq.n	8003184 <HAL_RCC_OscConfig+0x3ec>
 80031a4:	e01b      	b.n	80031de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a6:	4b3d      	ldr	r3, [pc, #244]	; (800329c <HAL_RCC_OscConfig+0x504>)
 80031a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ac:	4a3b      	ldr	r2, [pc, #236]	; (800329c <HAL_RCC_OscConfig+0x504>)
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b6:	f7fd fda1 	bl	8000cfc <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031be:	f7fd fd9d 	bl	8000cfc <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e1ef      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031d0:	4b32      	ldr	r3, [pc, #200]	; (800329c <HAL_RCC_OscConfig+0x504>)
 80031d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1ef      	bne.n	80031be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 80a6 	beq.w	8003338 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ec:	2300      	movs	r3, #0
 80031ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031f0:	4b2a      	ldr	r3, [pc, #168]	; (800329c <HAL_RCC_OscConfig+0x504>)
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10d      	bne.n	8003218 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fc:	4b27      	ldr	r3, [pc, #156]	; (800329c <HAL_RCC_OscConfig+0x504>)
 80031fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003200:	4a26      	ldr	r2, [pc, #152]	; (800329c <HAL_RCC_OscConfig+0x504>)
 8003202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003206:	6593      	str	r3, [r2, #88]	; 0x58
 8003208:	4b24      	ldr	r3, [pc, #144]	; (800329c <HAL_RCC_OscConfig+0x504>)
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003214:	2301      	movs	r3, #1
 8003216:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003218:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <HAL_RCC_OscConfig+0x508>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d118      	bne.n	8003256 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003224:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <HAL_RCC_OscConfig+0x508>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1d      	ldr	r2, [pc, #116]	; (80032a0 <HAL_RCC_OscConfig+0x508>)
 800322a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003230:	f7fd fd64 	bl	8000cfc <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003238:	f7fd fd60 	bl	8000cfc <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e1b2      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <HAL_RCC_OscConfig+0x508>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d108      	bne.n	8003270 <HAL_RCC_OscConfig+0x4d8>
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <HAL_RCC_OscConfig+0x504>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003264:	4a0d      	ldr	r2, [pc, #52]	; (800329c <HAL_RCC_OscConfig+0x504>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800326e:	e029      	b.n	80032c4 <HAL_RCC_OscConfig+0x52c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b05      	cmp	r3, #5
 8003276:	d115      	bne.n	80032a4 <HAL_RCC_OscConfig+0x50c>
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_RCC_OscConfig+0x504>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <HAL_RCC_OscConfig+0x504>)
 8003280:	f043 0304 	orr.w	r3, r3, #4
 8003284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003288:	4b04      	ldr	r3, [pc, #16]	; (800329c <HAL_RCC_OscConfig+0x504>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	4a03      	ldr	r2, [pc, #12]	; (800329c <HAL_RCC_OscConfig+0x504>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003298:	e014      	b.n	80032c4 <HAL_RCC_OscConfig+0x52c>
 800329a:	bf00      	nop
 800329c:	40021000 	.word	0x40021000
 80032a0:	40007000 	.word	0x40007000
 80032a4:	4b9a      	ldr	r3, [pc, #616]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	4a99      	ldr	r2, [pc, #612]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b4:	4b96      	ldr	r3, [pc, #600]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ba:	4a95      	ldr	r2, [pc, #596]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 80032bc:	f023 0304 	bic.w	r3, r3, #4
 80032c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d016      	beq.n	80032fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032cc:	f7fd fd16 	bl	8000cfc <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d4:	f7fd fd12 	bl	8000cfc <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e162      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ea:	4b89      	ldr	r3, [pc, #548]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 80032ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ed      	beq.n	80032d4 <HAL_RCC_OscConfig+0x53c>
 80032f8:	e015      	b.n	8003326 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fa:	f7fd fcff 	bl	8000cfc <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003300:	e00a      	b.n	8003318 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f7fd fcfb 	bl	8000cfc <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e14b      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003318:	4b7d      	ldr	r3, [pc, #500]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1ed      	bne.n	8003302 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003326:	7ffb      	ldrb	r3, [r7, #31]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332c:	4b78      	ldr	r3, [pc, #480]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	4a77      	ldr	r2, [pc, #476]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 8003332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003336:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d03c      	beq.n	80033be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01c      	beq.n	8003386 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800334c:	4b70      	ldr	r3, [pc, #448]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 800334e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003352:	4a6f      	ldr	r2, [pc, #444]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335c:	f7fd fcce 	bl	8000cfc <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003364:	f7fd fcca 	bl	8000cfc <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e11c      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003376:	4b66      	ldr	r3, [pc, #408]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 8003378:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ef      	beq.n	8003364 <HAL_RCC_OscConfig+0x5cc>
 8003384:	e01b      	b.n	80033be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003386:	4b62      	ldr	r3, [pc, #392]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 8003388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800338c:	4a60      	ldr	r2, [pc, #384]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 800338e:	f023 0301 	bic.w	r3, r3, #1
 8003392:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003396:	f7fd fcb1 	bl	8000cfc <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800339e:	f7fd fcad 	bl	8000cfc <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e0ff      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033b0:	4b57      	ldr	r3, [pc, #348]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 80033b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1ef      	bne.n	800339e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 80f3 	beq.w	80035ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	f040 80c9 	bne.w	8003564 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033d2:	4b4f      	ldr	r3, [pc, #316]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f003 0203 	and.w	r2, r3, #3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d12c      	bne.n	8003440 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	3b01      	subs	r3, #1
 80033f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d123      	bne.n	8003440 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003402:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d11b      	bne.n	8003440 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003414:	429a      	cmp	r2, r3
 8003416:	d113      	bne.n	8003440 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003422:	085b      	lsrs	r3, r3, #1
 8003424:	3b01      	subs	r3, #1
 8003426:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d109      	bne.n	8003440 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	085b      	lsrs	r3, r3, #1
 8003438:	3b01      	subs	r3, #1
 800343a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d06b      	beq.n	8003518 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b0c      	cmp	r3, #12
 8003444:	d062      	beq.n	800350c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003446:	4b32      	ldr	r3, [pc, #200]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e0ac      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003456:	4b2e      	ldr	r3, [pc, #184]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a2d      	ldr	r2, [pc, #180]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 800345c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003460:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003462:	f7fd fc4b 	bl	8000cfc <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346a:	f7fd fc47 	bl	8000cfc <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e099      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800347c:	4b24      	ldr	r3, [pc, #144]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f0      	bne.n	800346a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	4b21      	ldr	r3, [pc, #132]	; (8003514 <HAL_RCC_OscConfig+0x77c>)
 800348e:	4013      	ands	r3, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003498:	3a01      	subs	r2, #1
 800349a:	0112      	lsls	r2, r2, #4
 800349c:	4311      	orrs	r1, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034a2:	0212      	lsls	r2, r2, #8
 80034a4:	4311      	orrs	r1, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034aa:	0852      	lsrs	r2, r2, #1
 80034ac:	3a01      	subs	r2, #1
 80034ae:	0552      	lsls	r2, r2, #21
 80034b0:	4311      	orrs	r1, r2
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034b6:	0852      	lsrs	r2, r2, #1
 80034b8:	3a01      	subs	r2, #1
 80034ba:	0652      	lsls	r2, r2, #25
 80034bc:	4311      	orrs	r1, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034c2:	06d2      	lsls	r2, r2, #27
 80034c4:	430a      	orrs	r2, r1
 80034c6:	4912      	ldr	r1, [pc, #72]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034cc:	4b10      	ldr	r3, [pc, #64]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a0f      	ldr	r2, [pc, #60]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 80034d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034d8:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4a0c      	ldr	r2, [pc, #48]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 80034de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034e4:	f7fd fc0a 	bl	8000cfc <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fd fc06 	bl	8000cfc <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e058      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <HAL_RCC_OscConfig+0x778>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800350a:	e050      	b.n	80035ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e04f      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
 8003510:	40021000 	.word	0x40021000
 8003514:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003518:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <HAL_RCC_OscConfig+0x820>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d144      	bne.n	80035ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003524:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <HAL_RCC_OscConfig+0x820>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a23      	ldr	r2, [pc, #140]	; (80035b8 <HAL_RCC_OscConfig+0x820>)
 800352a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800352e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003530:	4b21      	ldr	r3, [pc, #132]	; (80035b8 <HAL_RCC_OscConfig+0x820>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4a20      	ldr	r2, [pc, #128]	; (80035b8 <HAL_RCC_OscConfig+0x820>)
 8003536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800353a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800353c:	f7fd fbde 	bl	8000cfc <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003544:	f7fd fbda 	bl	8000cfc <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e02c      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003556:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <HAL_RCC_OscConfig+0x820>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x7ac>
 8003562:	e024      	b.n	80035ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b0c      	cmp	r3, #12
 8003568:	d01f      	beq.n	80035aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356a:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <HAL_RCC_OscConfig+0x820>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a12      	ldr	r2, [pc, #72]	; (80035b8 <HAL_RCC_OscConfig+0x820>)
 8003570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7fd fbc1 	bl	8000cfc <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357e:	f7fd fbbd 	bl	8000cfc <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e00f      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_RCC_OscConfig+0x820>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1f0      	bne.n	800357e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <HAL_RCC_OscConfig+0x820>)
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	4905      	ldr	r1, [pc, #20]	; (80035b8 <HAL_RCC_OscConfig+0x820>)
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_RCC_OscConfig+0x824>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	60cb      	str	r3, [r1, #12]
 80035a8:	e001      	b.n	80035ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3720      	adds	r7, #32
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000
 80035bc:	feeefffc 	.word	0xfeeefffc

080035c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0e7      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d4:	4b75      	ldr	r3, [pc, #468]	; (80037ac <HAL_RCC_ClockConfig+0x1ec>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d910      	bls.n	8003604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b72      	ldr	r3, [pc, #456]	; (80037ac <HAL_RCC_ClockConfig+0x1ec>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 0207 	bic.w	r2, r3, #7
 80035ea:	4970      	ldr	r1, [pc, #448]	; (80037ac <HAL_RCC_ClockConfig+0x1ec>)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b6e      	ldr	r3, [pc, #440]	; (80037ac <HAL_RCC_ClockConfig+0x1ec>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0cf      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d010      	beq.n	8003632 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	4b66      	ldr	r3, [pc, #408]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800361c:	429a      	cmp	r2, r3
 800361e:	d908      	bls.n	8003632 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b63      	ldr	r3, [pc, #396]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4960      	ldr	r1, [pc, #384]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d04c      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003646:	4b5a      	ldr	r3, [pc, #360]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d121      	bne.n	8003696 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0a6      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365e:	4b54      	ldr	r3, [pc, #336]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d115      	bne.n	8003696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e09a      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d107      	bne.n	8003686 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003676:	4b4e      	ldr	r3, [pc, #312]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e08e      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003686:	4b4a      	ldr	r3, [pc, #296]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e086      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003696:	4b46      	ldr	r3, [pc, #280]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f023 0203 	bic.w	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4943      	ldr	r1, [pc, #268]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a8:	f7fd fb28 	bl	8000cfc <HAL_GetTick>
 80036ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b0:	f7fd fb24 	bl	8000cfc <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e06e      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	4b3a      	ldr	r3, [pc, #232]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 020c 	and.w	r2, r3, #12
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d1eb      	bne.n	80036b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d010      	beq.n	8003706 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	4b31      	ldr	r3, [pc, #196]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d208      	bcs.n	8003706 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f4:	4b2e      	ldr	r3, [pc, #184]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	492b      	ldr	r1, [pc, #172]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003706:	4b29      	ldr	r3, [pc, #164]	; (80037ac <HAL_RCC_ClockConfig+0x1ec>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d210      	bcs.n	8003736 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003714:	4b25      	ldr	r3, [pc, #148]	; (80037ac <HAL_RCC_ClockConfig+0x1ec>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f023 0207 	bic.w	r2, r3, #7
 800371c:	4923      	ldr	r1, [pc, #140]	; (80037ac <HAL_RCC_ClockConfig+0x1ec>)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	4313      	orrs	r3, r2
 8003722:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003724:	4b21      	ldr	r3, [pc, #132]	; (80037ac <HAL_RCC_ClockConfig+0x1ec>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d001      	beq.n	8003736 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e036      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	d008      	beq.n	8003754 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003742:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	4918      	ldr	r1, [pc, #96]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003750:	4313      	orrs	r3, r2
 8003752:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d009      	beq.n	8003774 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003760:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4910      	ldr	r1, [pc, #64]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	4313      	orrs	r3, r2
 8003772:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003774:	f000 f824 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	490b      	ldr	r1, [pc, #44]	; (80037b4 <HAL_RCC_ClockConfig+0x1f4>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
 8003790:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003792:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003794:	4b09      	ldr	r3, [pc, #36]	; (80037bc <HAL_RCC_ClockConfig+0x1fc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f7fd fa5f 	bl	8000c5c <HAL_InitTick>
 800379e:	4603      	mov	r3, r0
 80037a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80037a2:	7afb      	ldrb	r3, [r7, #11]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40022000 	.word	0x40022000
 80037b0:	40021000 	.word	0x40021000
 80037b4:	08004eac 	.word	0x08004eac
 80037b8:	20000000 	.word	0x20000000
 80037bc:	20000004 	.word	0x20000004

080037c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b089      	sub	sp, #36	; 0x24
 80037c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	2300      	movs	r3, #0
 80037cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ce:	4b3e      	ldr	r3, [pc, #248]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037d8:	4b3b      	ldr	r3, [pc, #236]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x34>
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b0c      	cmp	r3, #12
 80037ec:	d121      	bne.n	8003832 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d11e      	bne.n	8003832 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037f4:	4b34      	ldr	r3, [pc, #208]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d107      	bne.n	8003810 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003800:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	e005      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003810:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800381c:	4a2b      	ldr	r2, [pc, #172]	; (80038cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003824:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10d      	bne.n	8003848 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b04      	cmp	r3, #4
 8003836:	d102      	bne.n	800383e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003838:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800383a:	61bb      	str	r3, [r7, #24]
 800383c:	e004      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d101      	bne.n	8003848 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003844:	4b23      	ldr	r3, [pc, #140]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003846:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b0c      	cmp	r3, #12
 800384c:	d134      	bne.n	80038b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800384e:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d003      	beq.n	8003866 <HAL_RCC_GetSysClockFreq+0xa6>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b03      	cmp	r3, #3
 8003862:	d003      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0xac>
 8003864:	e005      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003866:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003868:	617b      	str	r3, [r7, #20]
      break;
 800386a:	e005      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800386c:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800386e:	617b      	str	r3, [r7, #20]
      break;
 8003870:	e002      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	617b      	str	r3, [r7, #20]
      break;
 8003876:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	3301      	adds	r3, #1
 8003884:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	fb03 f202 	mul.w	r2, r3, r2
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	fbb2 f3f3 	udiv	r3, r2, r3
 800389c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800389e:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	0e5b      	lsrs	r3, r3, #25
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	3301      	adds	r3, #1
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038b8:	69bb      	ldr	r3, [r7, #24]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3724      	adds	r7, #36	; 0x24
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	08004ec4 	.word	0x08004ec4
 80038d0:	00f42400 	.word	0x00f42400
 80038d4:	007a1200 	.word	0x007a1200

080038d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038dc:	4b03      	ldr	r3, [pc, #12]	; (80038ec <HAL_RCC_GetHCLKFreq+0x14>)
 80038de:	681b      	ldr	r3, [r3, #0]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000000 	.word	0x20000000

080038f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038f4:	f7ff fff0 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4904      	ldr	r1, [pc, #16]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003906:	5ccb      	ldrb	r3, [r1, r3]
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40021000 	.word	0x40021000
 8003918:	08004ebc 	.word	0x08004ebc

0800391c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003920:	f7ff ffda 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	0adb      	lsrs	r3, r3, #11
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4904      	ldr	r1, [pc, #16]	; (8003944 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	08004ebc 	.word	0x08004ebc

08003948 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003954:	4b2a      	ldr	r3, [pc, #168]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003960:	f7ff f9b6 	bl	8002cd0 <HAL_PWREx_GetVoltageRange>
 8003964:	6178      	str	r0, [r7, #20]
 8003966:	e014      	b.n	8003992 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003968:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	4a24      	ldr	r2, [pc, #144]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800396e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003972:	6593      	str	r3, [r2, #88]	; 0x58
 8003974:	4b22      	ldr	r3, [pc, #136]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003980:	f7ff f9a6 	bl	8002cd0 <HAL_PWREx_GetVoltageRange>
 8003984:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003986:	4b1e      	ldr	r3, [pc, #120]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398a:	4a1d      	ldr	r2, [pc, #116]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800398c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003990:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003998:	d10b      	bne.n	80039b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b80      	cmp	r3, #128	; 0x80
 800399e:	d919      	bls.n	80039d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2ba0      	cmp	r3, #160	; 0xa0
 80039a4:	d902      	bls.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039a6:	2302      	movs	r3, #2
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	e013      	b.n	80039d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039ac:	2301      	movs	r3, #1
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	e010      	b.n	80039d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b80      	cmp	r3, #128	; 0x80
 80039b6:	d902      	bls.n	80039be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039b8:	2303      	movs	r3, #3
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	e00a      	b.n	80039d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b80      	cmp	r3, #128	; 0x80
 80039c2:	d102      	bne.n	80039ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039c4:	2302      	movs	r3, #2
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	e004      	b.n	80039d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b70      	cmp	r3, #112	; 0x70
 80039ce:	d101      	bne.n	80039d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039d0:	2301      	movs	r3, #1
 80039d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039d4:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f023 0207 	bic.w	r2, r3, #7
 80039dc:	4909      	ldr	r1, [pc, #36]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d001      	beq.n	80039f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40022000 	.word	0x40022000

08003a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a10:	2300      	movs	r3, #0
 8003a12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a14:	2300      	movs	r3, #0
 8003a16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d031      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a2c:	d01a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003a2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a32:	d814      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d009      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a3c:	d10f      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003a3e:	4b5d      	ldr	r3, [pc, #372]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	4a5c      	ldr	r2, [pc, #368]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a4a:	e00c      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	2100      	movs	r1, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f9de 	bl	8003e14 <RCCEx_PLLSAI1_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a5c:	e003      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	74fb      	strb	r3, [r7, #19]
      break;
 8003a62:	e000      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a66:	7cfb      	ldrb	r3, [r7, #19]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10b      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a6c:	4b51      	ldr	r3, [pc, #324]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	494e      	ldr	r1, [pc, #312]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a82:	e001      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 809e 	beq.w	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a96:	2300      	movs	r3, #0
 8003a98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a9a:	4b46      	ldr	r3, [pc, #280]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00d      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab0:	4b40      	ldr	r3, [pc, #256]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab4:	4a3f      	ldr	r2, [pc, #252]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aba:	6593      	str	r3, [r2, #88]	; 0x58
 8003abc:	4b3d      	ldr	r3, [pc, #244]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003acc:	4b3a      	ldr	r3, [pc, #232]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a39      	ldr	r2, [pc, #228]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ad8:	f7fd f910 	bl	8000cfc <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ade:	e009      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae0:	f7fd f90c 	bl	8000cfc <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d902      	bls.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	74fb      	strb	r3, [r7, #19]
        break;
 8003af2:	e005      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003af4:	4b30      	ldr	r3, [pc, #192]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0ef      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003b00:	7cfb      	ldrb	r3, [r7, #19]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d15a      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b06:	4b2b      	ldr	r3, [pc, #172]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01e      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d019      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b22:	4b24      	ldr	r3, [pc, #144]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b2e:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b44:	4a1b      	ldr	r2, [pc, #108]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b4e:	4a19      	ldr	r2, [pc, #100]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d016      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fd f8cc 	bl	8000cfc <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b66:	e00b      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b68:	f7fd f8c8 	bl	8000cfc <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d902      	bls.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	74fb      	strb	r3, [r7, #19]
            break;
 8003b7e:	e006      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0ec      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003b8e:	7cfb      	ldrb	r3, [r7, #19]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b94:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba2:	4904      	ldr	r1, [pc, #16]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003baa:	e009      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bac:	7cfb      	ldrb	r3, [r7, #19]
 8003bae:	74bb      	strb	r3, [r7, #18]
 8003bb0:	e006      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003bb2:	bf00      	nop
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bbc:	7cfb      	ldrb	r3, [r7, #19]
 8003bbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bc0:	7c7b      	ldrb	r3, [r7, #17]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d105      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc6:	4b8a      	ldr	r3, [pc, #552]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bca:	4a89      	ldr	r2, [pc, #548]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bde:	4b84      	ldr	r3, [pc, #528]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be4:	f023 0203 	bic.w	r2, r3, #3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	4980      	ldr	r1, [pc, #512]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c00:	4b7b      	ldr	r3, [pc, #492]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	f023 020c 	bic.w	r2, r3, #12
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	4978      	ldr	r1, [pc, #480]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c22:	4b73      	ldr	r3, [pc, #460]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	496f      	ldr	r1, [pc, #444]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c44:	4b6a      	ldr	r3, [pc, #424]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c52:	4967      	ldr	r1, [pc, #412]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c66:	4b62      	ldr	r3, [pc, #392]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	495e      	ldr	r1, [pc, #376]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c88:	4b59      	ldr	r3, [pc, #356]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	4956      	ldr	r1, [pc, #344]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003caa:	4b51      	ldr	r3, [pc, #324]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	494d      	ldr	r1, [pc, #308]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d028      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ccc:	4b48      	ldr	r3, [pc, #288]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	4945      	ldr	r1, [pc, #276]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cea:	d106      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cec:	4b40      	ldr	r3, [pc, #256]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4a3f      	ldr	r2, [pc, #252]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cf6:	60d3      	str	r3, [r2, #12]
 8003cf8:	e011      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d02:	d10c      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3304      	adds	r3, #4
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 f882 	bl	8003e14 <RCCEx_PLLSAI1_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003d1a:	7cfb      	ldrb	r3, [r7, #19]
 8003d1c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d028      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d2a:	4b31      	ldr	r3, [pc, #196]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d38:	492d      	ldr	r1, [pc, #180]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d48:	d106      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d4a:	4b29      	ldr	r3, [pc, #164]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	4a28      	ldr	r2, [pc, #160]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d54:	60d3      	str	r3, [r2, #12]
 8003d56:	e011      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3304      	adds	r3, #4
 8003d66:	2101      	movs	r1, #1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f853 	bl	8003e14 <RCCEx_PLLSAI1_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d72:	7cfb      	ldrb	r3, [r7, #19]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01c      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d88:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d96:	4916      	ldr	r1, [pc, #88]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003da6:	d10c      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	2102      	movs	r1, #2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f830 	bl	8003e14 <RCCEx_PLLSAI1_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003dbe:	7cfb      	ldrb	r3, [r7, #19]
 8003dc0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003dce:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ddc:	4904      	ldr	r1, [pc, #16]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003de4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000

08003df4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a04      	ldr	r2, [pc, #16]	; (8003e10 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003dfe:	f043 0304 	orr.w	r3, r3, #4
 8003e02:	6013      	str	r3, [r2, #0]
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000

08003e14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e22:	4b74      	ldr	r3, [pc, #464]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d018      	beq.n	8003e60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e2e:	4b71      	ldr	r3, [pc, #452]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f003 0203 	and.w	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d10d      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
       ||
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e46:	4b6b      	ldr	r3, [pc, #428]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	091b      	lsrs	r3, r3, #4
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
       ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d047      	beq.n	8003eea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
 8003e5e:	e044      	b.n	8003eea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d018      	beq.n	8003e9a <RCCEx_PLLSAI1_Config+0x86>
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d825      	bhi.n	8003eb8 <RCCEx_PLLSAI1_Config+0xa4>
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d002      	beq.n	8003e76 <RCCEx_PLLSAI1_Config+0x62>
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d009      	beq.n	8003e88 <RCCEx_PLLSAI1_Config+0x74>
 8003e74:	e020      	b.n	8003eb8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e76:	4b5f      	ldr	r3, [pc, #380]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d11d      	bne.n	8003ebe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e86:	e01a      	b.n	8003ebe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e88:	4b5a      	ldr	r3, [pc, #360]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d116      	bne.n	8003ec2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e98:	e013      	b.n	8003ec2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e9a:	4b56      	ldr	r3, [pc, #344]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10f      	bne.n	8003ec6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ea6:	4b53      	ldr	r3, [pc, #332]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003eb6:	e006      	b.n	8003ec6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
      break;
 8003ebc:	e004      	b.n	8003ec8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ebe:	bf00      	nop
 8003ec0:	e002      	b.n	8003ec8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e000      	b.n	8003ec8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ec6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10d      	bne.n	8003eea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ece:	4b49      	ldr	r3, [pc, #292]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6819      	ldr	r1, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	430b      	orrs	r3, r1
 8003ee4:	4943      	ldr	r1, [pc, #268]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d17c      	bne.n	8003fea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ef0:	4b40      	ldr	r3, [pc, #256]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a3f      	ldr	r2, [pc, #252]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efc:	f7fc fefe 	bl	8000cfc <HAL_GetTick>
 8003f00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f02:	e009      	b.n	8003f18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f04:	f7fc fefa 	bl	8000cfc <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d902      	bls.n	8003f18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	73fb      	strb	r3, [r7, #15]
        break;
 8003f16:	e005      	b.n	8003f24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f18:	4b36      	ldr	r3, [pc, #216]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1ef      	bne.n	8003f04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d15f      	bne.n	8003fea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d110      	bne.n	8003f52 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f30:	4b30      	ldr	r3, [pc, #192]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003f38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6892      	ldr	r2, [r2, #8]
 8003f40:	0211      	lsls	r1, r2, #8
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68d2      	ldr	r2, [r2, #12]
 8003f46:	06d2      	lsls	r2, r2, #27
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	492a      	ldr	r1, [pc, #168]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	610b      	str	r3, [r1, #16]
 8003f50:	e027      	b.n	8003fa2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d112      	bne.n	8003f7e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f58:	4b26      	ldr	r3, [pc, #152]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6892      	ldr	r2, [r2, #8]
 8003f68:	0211      	lsls	r1, r2, #8
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6912      	ldr	r2, [r2, #16]
 8003f6e:	0852      	lsrs	r2, r2, #1
 8003f70:	3a01      	subs	r2, #1
 8003f72:	0552      	lsls	r2, r2, #21
 8003f74:	430a      	orrs	r2, r1
 8003f76:	491f      	ldr	r1, [pc, #124]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	610b      	str	r3, [r1, #16]
 8003f7c:	e011      	b.n	8003fa2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6892      	ldr	r2, [r2, #8]
 8003f8e:	0211      	lsls	r1, r2, #8
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6952      	ldr	r2, [r2, #20]
 8003f94:	0852      	lsrs	r2, r2, #1
 8003f96:	3a01      	subs	r2, #1
 8003f98:	0652      	lsls	r2, r2, #25
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	4915      	ldr	r1, [pc, #84]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fa2:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a13      	ldr	r2, [pc, #76]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fae:	f7fc fea5 	bl	8000cfc <HAL_GetTick>
 8003fb2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fb4:	e009      	b.n	8003fca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fb6:	f7fc fea1 	bl	8000cfc <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d902      	bls.n	8003fca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	73fb      	strb	r3, [r7, #15]
          break;
 8003fc8:	e005      	b.n	8003fd6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fca:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0ef      	beq.n	8003fb6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	4903      	ldr	r1, [pc, #12]	; (8003ff4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000

08003ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e049      	b.n	800409e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fc fd20 	bl	8000a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3304      	adds	r3, #4
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f000 f972 	bl	8004320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d001      	beq.n	80040c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e033      	b.n	8004128 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a19      	ldr	r2, [pc, #100]	; (8004134 <HAL_TIM_Base_Start+0x8c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d009      	beq.n	80040e6 <HAL_TIM_Base_Start+0x3e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040da:	d004      	beq.n	80040e6 <HAL_TIM_Base_Start+0x3e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a15      	ldr	r2, [pc, #84]	; (8004138 <HAL_TIM_Base_Start+0x90>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d115      	bne.n	8004112 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	4b13      	ldr	r3, [pc, #76]	; (800413c <HAL_TIM_Base_Start+0x94>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b06      	cmp	r3, #6
 80040f6:	d015      	beq.n	8004124 <HAL_TIM_Base_Start+0x7c>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fe:	d011      	beq.n	8004124 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004110:	e008      	b.n	8004124 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f042 0201 	orr.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	e000      	b.n	8004126 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004124:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	40012c00 	.word	0x40012c00
 8004138:	40014000 	.word	0x40014000
 800413c:	00010007 	.word	0x00010007

08004140 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6a1a      	ldr	r2, [r3, #32]
 800414e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004152:	4013      	ands	r3, r2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10f      	bne.n	8004178 <HAL_TIM_Base_Stop+0x38>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6a1a      	ldr	r2, [r3, #32]
 800415e:	f240 4344 	movw	r3, #1092	; 0x444
 8004162:	4013      	ands	r3, r2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d107      	bne.n	8004178 <HAL_TIM_Base_Stop+0x38>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0201 	bic.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_TIM_ConfigClockSource+0x1c>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e0b6      	b.n	8004318 <HAL_TIM_ConfigClockSource+0x18a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2202      	movs	r2, #2
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041d4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e6:	d03e      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0xd8>
 80041e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ec:	f200 8087 	bhi.w	80042fe <HAL_TIM_ConfigClockSource+0x170>
 80041f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f4:	f000 8086 	beq.w	8004304 <HAL_TIM_ConfigClockSource+0x176>
 80041f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fc:	d87f      	bhi.n	80042fe <HAL_TIM_ConfigClockSource+0x170>
 80041fe:	2b70      	cmp	r3, #112	; 0x70
 8004200:	d01a      	beq.n	8004238 <HAL_TIM_ConfigClockSource+0xaa>
 8004202:	2b70      	cmp	r3, #112	; 0x70
 8004204:	d87b      	bhi.n	80042fe <HAL_TIM_ConfigClockSource+0x170>
 8004206:	2b60      	cmp	r3, #96	; 0x60
 8004208:	d050      	beq.n	80042ac <HAL_TIM_ConfigClockSource+0x11e>
 800420a:	2b60      	cmp	r3, #96	; 0x60
 800420c:	d877      	bhi.n	80042fe <HAL_TIM_ConfigClockSource+0x170>
 800420e:	2b50      	cmp	r3, #80	; 0x50
 8004210:	d03c      	beq.n	800428c <HAL_TIM_ConfigClockSource+0xfe>
 8004212:	2b50      	cmp	r3, #80	; 0x50
 8004214:	d873      	bhi.n	80042fe <HAL_TIM_ConfigClockSource+0x170>
 8004216:	2b40      	cmp	r3, #64	; 0x40
 8004218:	d058      	beq.n	80042cc <HAL_TIM_ConfigClockSource+0x13e>
 800421a:	2b40      	cmp	r3, #64	; 0x40
 800421c:	d86f      	bhi.n	80042fe <HAL_TIM_ConfigClockSource+0x170>
 800421e:	2b30      	cmp	r3, #48	; 0x30
 8004220:	d064      	beq.n	80042ec <HAL_TIM_ConfigClockSource+0x15e>
 8004222:	2b30      	cmp	r3, #48	; 0x30
 8004224:	d86b      	bhi.n	80042fe <HAL_TIM_ConfigClockSource+0x170>
 8004226:	2b20      	cmp	r3, #32
 8004228:	d060      	beq.n	80042ec <HAL_TIM_ConfigClockSource+0x15e>
 800422a:	2b20      	cmp	r3, #32
 800422c:	d867      	bhi.n	80042fe <HAL_TIM_ConfigClockSource+0x170>
 800422e:	2b00      	cmp	r3, #0
 8004230:	d05c      	beq.n	80042ec <HAL_TIM_ConfigClockSource+0x15e>
 8004232:	2b10      	cmp	r3, #16
 8004234:	d05a      	beq.n	80042ec <HAL_TIM_ConfigClockSource+0x15e>
 8004236:	e062      	b.n	80042fe <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	6899      	ldr	r1, [r3, #8]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f000 f948 	bl	80044dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800425a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	609a      	str	r2, [r3, #8]
      break;
 8004264:	e04f      	b.n	8004306 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6899      	ldr	r1, [r3, #8]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f000 f931 	bl	80044dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004288:	609a      	str	r2, [r3, #8]
      break;
 800428a:	e03c      	b.n	8004306 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	6859      	ldr	r1, [r3, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	461a      	mov	r2, r3
 800429a:	f000 f8a5 	bl	80043e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2150      	movs	r1, #80	; 0x50
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f8fe 	bl	80044a6 <TIM_ITRx_SetConfig>
      break;
 80042aa:	e02c      	b.n	8004306 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	6859      	ldr	r1, [r3, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	461a      	mov	r2, r3
 80042ba:	f000 f8c4 	bl	8004446 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2160      	movs	r1, #96	; 0x60
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 f8ee 	bl	80044a6 <TIM_ITRx_SetConfig>
      break;
 80042ca:	e01c      	b.n	8004306 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	6859      	ldr	r1, [r3, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	461a      	mov	r2, r3
 80042da:	f000 f885 	bl	80043e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2140      	movs	r1, #64	; 0x40
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 f8de 	bl	80044a6 <TIM_ITRx_SetConfig>
      break;
 80042ea:	e00c      	b.n	8004306 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4619      	mov	r1, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f000 f8d5 	bl	80044a6 <TIM_ITRx_SetConfig>
      break;
 80042fc:	e003      	b.n	8004306 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]
      break;
 8004302:	e000      	b.n	8004306 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004304:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a2a      	ldr	r2, [pc, #168]	; (80043dc <TIM_Base_SetConfig+0xbc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d003      	beq.n	8004340 <TIM_Base_SetConfig+0x20>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433e:	d108      	bne.n	8004352 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a21      	ldr	r2, [pc, #132]	; (80043dc <TIM_Base_SetConfig+0xbc>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00b      	beq.n	8004372 <TIM_Base_SetConfig+0x52>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004360:	d007      	beq.n	8004372 <TIM_Base_SetConfig+0x52>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <TIM_Base_SetConfig+0xc0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_Base_SetConfig+0x52>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <TIM_Base_SetConfig+0xc4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d108      	bne.n	8004384 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a0c      	ldr	r2, [pc, #48]	; (80043dc <TIM_Base_SetConfig+0xbc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d007      	beq.n	80043c0 <TIM_Base_SetConfig+0xa0>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a0b      	ldr	r2, [pc, #44]	; (80043e0 <TIM_Base_SetConfig+0xc0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d003      	beq.n	80043c0 <TIM_Base_SetConfig+0xa0>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <TIM_Base_SetConfig+0xc4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d103      	bne.n	80043c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	615a      	str	r2, [r3, #20]
}
 80043ce:	bf00      	nop
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40014000 	.word	0x40014000
 80043e4:	40014400 	.word	0x40014400

080043e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f023 0201 	bic.w	r2, r3, #1
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f023 030a 	bic.w	r3, r3, #10
 8004424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	621a      	str	r2, [r3, #32]
}
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004446:	b480      	push	{r7}
 8004448:	b087      	sub	sp, #28
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f023 0210 	bic.w	r2, r3, #16
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004470:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	031b      	lsls	r3, r3, #12
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004482:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	621a      	str	r2, [r3, #32]
}
 800449a:	bf00      	nop
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b085      	sub	sp, #20
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f043 0307 	orr.w	r3, r3, #7
 80044c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	609a      	str	r2, [r3, #8]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	021a      	lsls	r2, r3, #8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	431a      	orrs	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4313      	orrs	r3, r2
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	609a      	str	r2, [r3, #8]
}
 8004510:	bf00      	nop
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004530:	2302      	movs	r3, #2
 8004532:	e04f      	b.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a21      	ldr	r2, [pc, #132]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d108      	bne.n	8004570 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004564:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a14      	ldr	r2, [pc, #80]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d009      	beq.n	80045a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d004      	beq.n	80045a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a10      	ldr	r2, [pc, #64]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d10c      	bne.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	40012c00 	.word	0x40012c00
 80045e4:	40014000 	.word	0x40014000

080045e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e040      	b.n	800467c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fc fa7a 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2224      	movs	r2, #36	; 0x24
 8004614:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0201 	bic.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f82c 	bl	8004684 <UART_SetConfig>
 800462c:	4603      	mov	r3, r0
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e022      	b.n	800467c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fa4c 	bl	8004adc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fad3 	bl	8004c20 <UART_CheckIdleState>
 800467a:	4603      	mov	r3, r0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004688:	b08a      	sub	sp, #40	; 0x28
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	431a      	orrs	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4bb4      	ldr	r3, [pc, #720]	; (8004984 <UART_SetConfig+0x300>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046bc:	430b      	orrs	r3, r1
 80046be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4aa9      	ldr	r2, [pc, #676]	; (8004988 <UART_SetConfig+0x304>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d004      	beq.n	80046f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ec:	4313      	orrs	r3, r2
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004700:	430a      	orrs	r2, r1
 8004702:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4aa0      	ldr	r2, [pc, #640]	; (800498c <UART_SetConfig+0x308>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d126      	bne.n	800475c <UART_SetConfig+0xd8>
 800470e:	4ba0      	ldr	r3, [pc, #640]	; (8004990 <UART_SetConfig+0x30c>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	2b03      	cmp	r3, #3
 800471a:	d81b      	bhi.n	8004754 <UART_SetConfig+0xd0>
 800471c:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <UART_SetConfig+0xa0>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004735 	.word	0x08004735
 8004728:	08004745 	.word	0x08004745
 800472c:	0800473d 	.word	0x0800473d
 8004730:	0800474d 	.word	0x0800474d
 8004734:	2301      	movs	r3, #1
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473a:	e080      	b.n	800483e <UART_SetConfig+0x1ba>
 800473c:	2302      	movs	r3, #2
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004742:	e07c      	b.n	800483e <UART_SetConfig+0x1ba>
 8004744:	2304      	movs	r3, #4
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474a:	e078      	b.n	800483e <UART_SetConfig+0x1ba>
 800474c:	2308      	movs	r3, #8
 800474e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004752:	e074      	b.n	800483e <UART_SetConfig+0x1ba>
 8004754:	2310      	movs	r3, #16
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475a:	e070      	b.n	800483e <UART_SetConfig+0x1ba>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a8c      	ldr	r2, [pc, #560]	; (8004994 <UART_SetConfig+0x310>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d138      	bne.n	80047d8 <UART_SetConfig+0x154>
 8004766:	4b8a      	ldr	r3, [pc, #552]	; (8004990 <UART_SetConfig+0x30c>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	f003 030c 	and.w	r3, r3, #12
 8004770:	2b0c      	cmp	r3, #12
 8004772:	d82d      	bhi.n	80047d0 <UART_SetConfig+0x14c>
 8004774:	a201      	add	r2, pc, #4	; (adr r2, 800477c <UART_SetConfig+0xf8>)
 8004776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477a:	bf00      	nop
 800477c:	080047b1 	.word	0x080047b1
 8004780:	080047d1 	.word	0x080047d1
 8004784:	080047d1 	.word	0x080047d1
 8004788:	080047d1 	.word	0x080047d1
 800478c:	080047c1 	.word	0x080047c1
 8004790:	080047d1 	.word	0x080047d1
 8004794:	080047d1 	.word	0x080047d1
 8004798:	080047d1 	.word	0x080047d1
 800479c:	080047b9 	.word	0x080047b9
 80047a0:	080047d1 	.word	0x080047d1
 80047a4:	080047d1 	.word	0x080047d1
 80047a8:	080047d1 	.word	0x080047d1
 80047ac:	080047c9 	.word	0x080047c9
 80047b0:	2300      	movs	r3, #0
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b6:	e042      	b.n	800483e <UART_SetConfig+0x1ba>
 80047b8:	2302      	movs	r3, #2
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047be:	e03e      	b.n	800483e <UART_SetConfig+0x1ba>
 80047c0:	2304      	movs	r3, #4
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c6:	e03a      	b.n	800483e <UART_SetConfig+0x1ba>
 80047c8:	2308      	movs	r3, #8
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ce:	e036      	b.n	800483e <UART_SetConfig+0x1ba>
 80047d0:	2310      	movs	r3, #16
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d6:	e032      	b.n	800483e <UART_SetConfig+0x1ba>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a6a      	ldr	r2, [pc, #424]	; (8004988 <UART_SetConfig+0x304>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d12a      	bne.n	8004838 <UART_SetConfig+0x1b4>
 80047e2:	4b6b      	ldr	r3, [pc, #428]	; (8004990 <UART_SetConfig+0x30c>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047f0:	d01a      	beq.n	8004828 <UART_SetConfig+0x1a4>
 80047f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047f6:	d81b      	bhi.n	8004830 <UART_SetConfig+0x1ac>
 80047f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fc:	d00c      	beq.n	8004818 <UART_SetConfig+0x194>
 80047fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004802:	d815      	bhi.n	8004830 <UART_SetConfig+0x1ac>
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <UART_SetConfig+0x18c>
 8004808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480c:	d008      	beq.n	8004820 <UART_SetConfig+0x19c>
 800480e:	e00f      	b.n	8004830 <UART_SetConfig+0x1ac>
 8004810:	2300      	movs	r3, #0
 8004812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004816:	e012      	b.n	800483e <UART_SetConfig+0x1ba>
 8004818:	2302      	movs	r3, #2
 800481a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800481e:	e00e      	b.n	800483e <UART_SetConfig+0x1ba>
 8004820:	2304      	movs	r3, #4
 8004822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004826:	e00a      	b.n	800483e <UART_SetConfig+0x1ba>
 8004828:	2308      	movs	r3, #8
 800482a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482e:	e006      	b.n	800483e <UART_SetConfig+0x1ba>
 8004830:	2310      	movs	r3, #16
 8004832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004836:	e002      	b.n	800483e <UART_SetConfig+0x1ba>
 8004838:	2310      	movs	r3, #16
 800483a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a51      	ldr	r2, [pc, #324]	; (8004988 <UART_SetConfig+0x304>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d17a      	bne.n	800493e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004848:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800484c:	2b08      	cmp	r3, #8
 800484e:	d824      	bhi.n	800489a <UART_SetConfig+0x216>
 8004850:	a201      	add	r2, pc, #4	; (adr r2, 8004858 <UART_SetConfig+0x1d4>)
 8004852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004856:	bf00      	nop
 8004858:	0800487d 	.word	0x0800487d
 800485c:	0800489b 	.word	0x0800489b
 8004860:	08004885 	.word	0x08004885
 8004864:	0800489b 	.word	0x0800489b
 8004868:	0800488b 	.word	0x0800488b
 800486c:	0800489b 	.word	0x0800489b
 8004870:	0800489b 	.word	0x0800489b
 8004874:	0800489b 	.word	0x0800489b
 8004878:	08004893 	.word	0x08004893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800487c:	f7ff f838 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 8004880:	61f8      	str	r0, [r7, #28]
        break;
 8004882:	e010      	b.n	80048a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004884:	4b44      	ldr	r3, [pc, #272]	; (8004998 <UART_SetConfig+0x314>)
 8004886:	61fb      	str	r3, [r7, #28]
        break;
 8004888:	e00d      	b.n	80048a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800488a:	f7fe ff99 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 800488e:	61f8      	str	r0, [r7, #28]
        break;
 8004890:	e009      	b.n	80048a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004896:	61fb      	str	r3, [r7, #28]
        break;
 8004898:	e005      	b.n	80048a6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 8107 	beq.w	8004abc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	4413      	add	r3, r2
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d305      	bcc.n	80048ca <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d903      	bls.n	80048d2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048d0:	e0f4      	b.n	8004abc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	2200      	movs	r2, #0
 80048d6:	461c      	mov	r4, r3
 80048d8:	4615      	mov	r5, r2
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	f04f 0300 	mov.w	r3, #0
 80048e2:	022b      	lsls	r3, r5, #8
 80048e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048e8:	0222      	lsls	r2, r4, #8
 80048ea:	68f9      	ldr	r1, [r7, #12]
 80048ec:	6849      	ldr	r1, [r1, #4]
 80048ee:	0849      	lsrs	r1, r1, #1
 80048f0:	2000      	movs	r0, #0
 80048f2:	4688      	mov	r8, r1
 80048f4:	4681      	mov	r9, r0
 80048f6:	eb12 0a08 	adds.w	sl, r2, r8
 80048fa:	eb43 0b09 	adc.w	fp, r3, r9
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	603b      	str	r3, [r7, #0]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800490c:	4650      	mov	r0, sl
 800490e:	4659      	mov	r1, fp
 8004910:	f7fb fc5c 	bl	80001cc <__aeabi_uldivmod>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4613      	mov	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004922:	d308      	bcc.n	8004936 <UART_SetConfig+0x2b2>
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492a:	d204      	bcs.n	8004936 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	60da      	str	r2, [r3, #12]
 8004934:	e0c2      	b.n	8004abc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800493c:	e0be      	b.n	8004abc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004946:	d16a      	bne.n	8004a1e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004948:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800494c:	2b08      	cmp	r3, #8
 800494e:	d834      	bhi.n	80049ba <UART_SetConfig+0x336>
 8004950:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <UART_SetConfig+0x2d4>)
 8004952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004956:	bf00      	nop
 8004958:	0800497d 	.word	0x0800497d
 800495c:	0800499d 	.word	0x0800499d
 8004960:	080049a5 	.word	0x080049a5
 8004964:	080049bb 	.word	0x080049bb
 8004968:	080049ab 	.word	0x080049ab
 800496c:	080049bb 	.word	0x080049bb
 8004970:	080049bb 	.word	0x080049bb
 8004974:	080049bb 	.word	0x080049bb
 8004978:	080049b3 	.word	0x080049b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800497c:	f7fe ffb8 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 8004980:	61f8      	str	r0, [r7, #28]
        break;
 8004982:	e020      	b.n	80049c6 <UART_SetConfig+0x342>
 8004984:	efff69f3 	.word	0xefff69f3
 8004988:	40008000 	.word	0x40008000
 800498c:	40013800 	.word	0x40013800
 8004990:	40021000 	.word	0x40021000
 8004994:	40004400 	.word	0x40004400
 8004998:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800499c:	f7fe ffbe 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 80049a0:	61f8      	str	r0, [r7, #28]
        break;
 80049a2:	e010      	b.n	80049c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049a4:	4b4c      	ldr	r3, [pc, #304]	; (8004ad8 <UART_SetConfig+0x454>)
 80049a6:	61fb      	str	r3, [r7, #28]
        break;
 80049a8:	e00d      	b.n	80049c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049aa:	f7fe ff09 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 80049ae:	61f8      	str	r0, [r7, #28]
        break;
 80049b0:	e009      	b.n	80049c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049b6:	61fb      	str	r3, [r7, #28]
        break;
 80049b8:	e005      	b.n	80049c6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d077      	beq.n	8004abc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	005a      	lsls	r2, r3, #1
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	085b      	lsrs	r3, r3, #1
 80049d6:	441a      	add	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	2b0f      	cmp	r3, #15
 80049e6:	d916      	bls.n	8004a16 <UART_SetConfig+0x392>
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ee:	d212      	bcs.n	8004a16 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f023 030f 	bic.w	r3, r3, #15
 80049f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	8afb      	ldrh	r3, [r7, #22]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	8afa      	ldrh	r2, [r7, #22]
 8004a12:	60da      	str	r2, [r3, #12]
 8004a14:	e052      	b.n	8004abc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a1c:	e04e      	b.n	8004abc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d827      	bhi.n	8004a76 <UART_SetConfig+0x3f2>
 8004a26:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <UART_SetConfig+0x3a8>)
 8004a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2c:	08004a51 	.word	0x08004a51
 8004a30:	08004a59 	.word	0x08004a59
 8004a34:	08004a61 	.word	0x08004a61
 8004a38:	08004a77 	.word	0x08004a77
 8004a3c:	08004a67 	.word	0x08004a67
 8004a40:	08004a77 	.word	0x08004a77
 8004a44:	08004a77 	.word	0x08004a77
 8004a48:	08004a77 	.word	0x08004a77
 8004a4c:	08004a6f 	.word	0x08004a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a50:	f7fe ff4e 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 8004a54:	61f8      	str	r0, [r7, #28]
        break;
 8004a56:	e014      	b.n	8004a82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a58:	f7fe ff60 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 8004a5c:	61f8      	str	r0, [r7, #28]
        break;
 8004a5e:	e010      	b.n	8004a82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a60:	4b1d      	ldr	r3, [pc, #116]	; (8004ad8 <UART_SetConfig+0x454>)
 8004a62:	61fb      	str	r3, [r7, #28]
        break;
 8004a64:	e00d      	b.n	8004a82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a66:	f7fe feab 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 8004a6a:	61f8      	str	r0, [r7, #28]
        break;
 8004a6c:	e009      	b.n	8004a82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a72:	61fb      	str	r3, [r7, #28]
        break;
 8004a74:	e005      	b.n	8004a82 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a80:	bf00      	nop
    }

    if (pclk != 0U)
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d019      	beq.n	8004abc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	085a      	lsrs	r2, r3, #1
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	441a      	add	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	2b0f      	cmp	r3, #15
 8004aa0:	d909      	bls.n	8004ab6 <UART_SetConfig+0x432>
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa8:	d205      	bcs.n	8004ab6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60da      	str	r2, [r3, #12]
 8004ab4:	e002      	b.n	8004abc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ac8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3728      	adds	r7, #40	; 0x28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ad6:	bf00      	nop
 8004ad8:	00f42400 	.word	0x00f42400

08004adc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01a      	beq.n	8004bf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bda:	d10a      	bne.n	8004bf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	605a      	str	r2, [r3, #4]
  }
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c30:	f7fc f864 	bl	8000cfc <HAL_GetTick>
 8004c34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d10e      	bne.n	8004c62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f82d 	bl	8004cb2 <UART_WaitOnFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e023      	b.n	8004caa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d10e      	bne.n	8004c8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f817 	bl	8004cb2 <UART_WaitOnFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e00d      	b.n	8004caa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b09c      	sub	sp, #112	; 0x70
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	603b      	str	r3, [r7, #0]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc2:	e0a5      	b.n	8004e10 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	f000 80a1 	beq.w	8004e10 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cce:	f7fc f815 	bl	8000cfc <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d302      	bcc.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004cde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d13e      	bne.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cf8:	667b      	str	r3, [r7, #100]	; 0x64
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d04:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e6      	bne.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d28:	f023 0301 	bic.w	r3, r3, #1
 8004d2c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3308      	adds	r3, #8
 8004d34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d36:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e5      	bne.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e067      	b.n	8004e32 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d04f      	beq.n	8004e10 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d7e:	d147      	bne.n	8004e10 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d88:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	e853 3f00 	ldrex	r3, [r3]
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	461a      	mov	r2, r3
 8004da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da8:	637b      	str	r3, [r7, #52]	; 0x34
 8004daa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e6      	bne.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
 8004dca:	613b      	str	r3, [r7, #16]
   return(result);
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f023 0301 	bic.w	r3, r3, #1
 8004dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3308      	adds	r3, #8
 8004dda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ddc:	623a      	str	r2, [r7, #32]
 8004dde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de0:	69f9      	ldr	r1, [r7, #28]
 8004de2:	6a3a      	ldr	r2, [r7, #32]
 8004de4:	e841 2300 	strex	r3, r2, [r1]
 8004de8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e5      	bne.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e010      	b.n	8004e32 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69da      	ldr	r2, [r3, #28]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	bf0c      	ite	eq
 8004e20:	2301      	moveq	r3, #1
 8004e22:	2300      	movne	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	f43f af4a 	beq.w	8004cc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3770      	adds	r7, #112	; 0x70
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <__libc_init_array>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	4d0d      	ldr	r5, [pc, #52]	; (8004e74 <__libc_init_array+0x38>)
 8004e40:	4c0d      	ldr	r4, [pc, #52]	; (8004e78 <__libc_init_array+0x3c>)
 8004e42:	1b64      	subs	r4, r4, r5
 8004e44:	10a4      	asrs	r4, r4, #2
 8004e46:	2600      	movs	r6, #0
 8004e48:	42a6      	cmp	r6, r4
 8004e4a:	d109      	bne.n	8004e60 <__libc_init_array+0x24>
 8004e4c:	4d0b      	ldr	r5, [pc, #44]	; (8004e7c <__libc_init_array+0x40>)
 8004e4e:	4c0c      	ldr	r4, [pc, #48]	; (8004e80 <__libc_init_array+0x44>)
 8004e50:	f000 f820 	bl	8004e94 <_init>
 8004e54:	1b64      	subs	r4, r4, r5
 8004e56:	10a4      	asrs	r4, r4, #2
 8004e58:	2600      	movs	r6, #0
 8004e5a:	42a6      	cmp	r6, r4
 8004e5c:	d105      	bne.n	8004e6a <__libc_init_array+0x2e>
 8004e5e:	bd70      	pop	{r4, r5, r6, pc}
 8004e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e64:	4798      	blx	r3
 8004e66:	3601      	adds	r6, #1
 8004e68:	e7ee      	b.n	8004e48 <__libc_init_array+0xc>
 8004e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6e:	4798      	blx	r3
 8004e70:	3601      	adds	r6, #1
 8004e72:	e7f2      	b.n	8004e5a <__libc_init_array+0x1e>
 8004e74:	08004efc 	.word	0x08004efc
 8004e78:	08004efc 	.word	0x08004efc
 8004e7c:	08004efc 	.word	0x08004efc
 8004e80:	08004f00 	.word	0x08004f00

08004e84 <memset>:
 8004e84:	4402      	add	r2, r0
 8004e86:	4603      	mov	r3, r0
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d100      	bne.n	8004e8e <memset+0xa>
 8004e8c:	4770      	bx	lr
 8004e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e92:	e7f9      	b.n	8004e88 <memset+0x4>

08004e94 <_init>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	bf00      	nop
 8004e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9a:	bc08      	pop	{r3}
 8004e9c:	469e      	mov	lr, r3
 8004e9e:	4770      	bx	lr

08004ea0 <_fini>:
 8004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea2:	bf00      	nop
 8004ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea6:	bc08      	pop	{r3}
 8004ea8:	469e      	mov	lr, r3
 8004eaa:	4770      	bx	lr
